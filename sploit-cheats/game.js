console.log("[!] Key Responder Made with "+String.fromCodePoint(10084)+" by Xploit @Hackedarcadegames.com [!]");class Responder{constructor(e,o,r=!1,t=!1){try{if("number"!=typeof e)throw"[Key Responder] parameter (1) is not of type 'number'.";if(this.responseKey=e,"function"!=typeof o)throw"[Key Responder] parameter (2) is not of type 'function'.";if(this.callback=o,"boolean"!=typeof r)throw"[Key Responder] parameter (3) is not of type 'Boolean'.";if(this.toggler=r,"boolean"!=typeof t)throw"[Key Responder] parameter (4) is not of type 'Boolean'.";this.active=t,this.response=null,this.interval=700}catch(e){console.error("Error : "+e)}finally{var n=this;null!=n.responseKey&&"undefined"!=n.responseKey&&null!=n.callback&&"undefined"!=n.callback&&(console.log("A Responder for key code "+n.responseKey+" has been initiated"),$(window).on("keyup",function(e){if(!0===n.toggler)switch(e.keyCode||e.which){case n.responseKey:!1===n.active?(n.active=!0,n.response=setInterval(n.callback,n.interval)):(clearInterval(n.response),n.active=!1);break;default:return}else switch(e.keyCode||e.which){case n.responseKey:n.callback();break;default:return}}))}}}
var sploit = {
          toggle: {
                esp: false
          }
  };

  $("<div id='GuidedHacking'>", {
      css: {
      	  'id' : "GuidedHacking",
          'top' : "0px",
          'left': "0px",
        	'width' : "150px",
          'height' : "100px",
          'display' : "none",
          'position': "absolute",
          'text-align' : "center",
          'line-height' : "100px",
          "background" : "rgba(0, 0, 0, 0.7)"
      }
  })
  		.appendTo("#timerDisplay")
  		.html("<a style='color: white;'>ESP : <a style='color: red;'>"+sploit.toggle.esp+"</a></a>");

  let menuToggle = new Responder(186, () => {
    // Semi-colon;
       // Show Menu;
       $('#GuidedHacking').css("display", $('#GuidedHacking').css("display") === 'none' ? '' : 'none');
  }, false);

  let espToggle = new Responder(76, () => {
    // Letter L;
       sploit.toggle.esp = !sploit.toggle.esp;
       $('#GuidedHacking').html("<a style='color: white;'>ESP : <a style='color: red;'>"+sploit.toggle.esp+"</a></a>");
  }, false);

! function(t) {
    var e = {};

    function n(i) {
        if (e[i]) return e[i].exports;
        var r = e[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return t[i].call(r.exports, r, r.exports, n), r.l = !0, r.exports
    }
    n.m = t, n.c = e, n.d = function(t, e, i) {
        n.o(t, e) || Object.defineProperty(t, e, {
            configurable: !1,
            enumerable: !0,
            get: i
        })
    }, n.r = function(t) {
        Object.defineProperty(t, "__esModule", {
            value: !0
        })
    }, n.n = function(t) {
        var e = t && t.__esModule ? function() {
            return t.default
        } : function() {
            return t
        };
        return n.d(e, "a", e), e
    }, n.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }, n.p = "", n(n.s = 78)
}([function(t, e, n) {
    var i = e.global = n(48),
        r = e.hasBuffer = i && !!i.isBuffer,
        a = e.hasArrayBuffer = "undefined" != typeof ArrayBuffer,
        o = e.isArray = n(5);
    e.isArrayBuffer = a ? function(t) {
        return t instanceof ArrayBuffer || f(t)
    } : g;
    var s = e.isBuffer = r ? i.isBuffer : g,
        c = e.isView = a ? ArrayBuffer.isView || v("ArrayBuffer", "buffer") : g;
    e.alloc = d, e.concat = function(t, n) {
        n || (n = 0, Array.prototype.forEach.call(t, function(t) {
            n += t.length
        }));
        var i = this !== e && this || t[0],
            r = d.call(i, n),
            a = 0;
        return Array.prototype.forEach.call(t, function(t) {
            a += p.copy.call(t, r, a)
        }), r
    }, e.from = function(t) {
        return "string" == typeof t ? function(t) {
            var e = 3 * t.length,
                n = d.call(this, e),
                i = p.write.call(n, t);
            return e !== i && (n = p.slice.call(n, 0, i)), n
        }.call(this, t) : m(this).from(t)
    };
    var l = e.Array = n(46),
        h = e.Buffer = n(45),
        u = e.Uint8Array = n(44),
        p = e.prototype = n(11);

    function d(t) {
        return m(this).alloc(t)
    }
    var f = v("ArrayBuffer");

    function m(t) {
        return s(t) ? h : c(t) ? u : o(t) ? l : r ? h : a ? u : l
    }

    function g() {
        return !1
    }

    function v(t, e) {
        return t = "[object " + t + "]",
            function(n) {
                return null != n && {}.toString.call(e ? n[e] : n) === t
            }
    }
}, function(t, e, n) {
    (function(e) {
        t.exports.isProd = void 0 !== e && !!e.env.IS_PROD || "undefined" != typeof location && "127.0.0.1" !== location.hostname && "localhost" !== location.hostname && !location.hostname.startsWith("192.168."), t.exports.enableHttps = t.exports.isProd, t.exports.serverTickRate = 1e3 / 30, t.exports.serverSendRate = 100, t.exports.clientSendRate = 1e3 / 30, t.exports.dltMx = Math.round(1e3 / 30), t.exports.maxPlayers = 8, t.exports.serverSpread = 3, t.exports.minServerSpace = 3, t.exports.gamesPerServer = 5, t.exports.serverBrowserRate = 1e4, t.exports.maxPlayersTotal = t.exports.maxPlayers * t.exports.gamesPerServer + 46, t.exports.kickTimer = 9e4, t.exports.endTimer = 2e4, t.exports.endAnim = 5e3, t.exports.serverConfig = [{
            name: "Players",
            varN: "maxPlayers",
            def: 2,
            max: 10,
            maxF: 16,
            min: 1,
            step: 1
        }, {
            name: "Minutes",
            varN: "gameTime",
            def: 4,
            max: 60,
            min: 0,
            step: 1
        }, {
            name: "Gravity",
            varN: "gravMlt",
            dontChange: !0,
            def: 1,
            max: 2,
            min: .1,
            step: .1
        }, {
            name: "Jump Force",
            varN: "jumpMlt",
            dontChange: !0,
            def: 1,
            max: 3,
            min: .1,
            step: .1
        }, {
            name: "Time Scale",
            varN: "deltaMlt",
            dontChange: !0,
            def: 1,
            max: 1.5,
            min: .1,
            step: .1
        }, {
            name: "Strafe Speed",
            varN: "strafeSpd",
            dontChange: !0,
            def: 1.2,
            max: 2,
            min: 1,
            step: .1
        }, {
            name: "Health Multiplier",
            varN: "healthMlt",
            dontChange: !0,
            def: 1,
            max: 3,
            min: .1,
            step: .1
        }, {
            name: "Auto Jump",
            varN: "autoJump",
            bool: !0
        }, {
            name: "Hide Nametags",
            varN: "nameTags",
            bool: !0
        }], t.exports.prefabIDS = ["CUBE", "CRATE", "BARREL", "LADDER", "PLANE", "SPAWN_POINT", "CAMERA_POSITION", "VEHICLE", "STACK", "RAMP", "SCORE_ZONE", "BILLBOARD", "DEATH_ZONE"], t.exports.textureIDS = ["WALL", "DIRT", "FLOOR", "GRID", "GREY", "DEFAULT", "ROOF", "FLAG"], t.exports.objectLimit = 2500, t.exports.objectLimitF = 5e3, t.exports.spawnLimit = 15, t.exports.gravity = 15e-5, t.exports.deathY = -100, t.exports.skyScale = 18e3, t.exports.shadowDst = 1200, t.exports.shadowRes = 1024, t.exports.shadowOff = .004, t.exports.lightDistance = 500, t.exports.cornerPad = 1, t.exports.cornerScl = 2.5, t.exports.cornerH = 7, t.exports.wallH = 5, t.exports.wallW = .8, t.exports.crateScale = 6, t.exports.stackScale = 6, t.exports.barrelScale = 4, t.exports.vehicleScale = 20, t.exports.barrelMlt = 1.5, t.exports.ladderWidth = 3.2, t.exports.ladderScale = .5, t.exports.terrainGrid = 8, t.exports.otherSoundMlt = .55, t.exports.maxParticles = 100, t.exports.explosionRange = 200, t.exports.chatMaxLength = 70, t.exports.chatInterval = 800, t.exports.voiceChatInterval = 2e3, t.exports.voiceChatMaxLength = 5, t.exports.movDirs = [];
        for (var n = 0; n < 8; ++n) t.exports.movDirs.push(-Math.PI + (n + 1) * Math.PI / 4);
        t.exports.interpolation = 1.1, t.exports.stateHistory = 1e3, t.exports.syncFreq = 800, t.exports.pingCount = 10, t.exports.mouseSens = .0024, t.exports.camChaseTrn = .0022, t.exports.camChaseSpd = .0012, t.exports.camChaseSen = .2, t.exports.camChaseDst = 24, t.exports.menuCamDist = 200, t.exports.menuCamAngle = -.5, t.exports.menuCamSpeed = .1, t.exports.animMult = 1.2, t.exports.leanPull = .99, t.exports.leanSens = .04, t.exports.leanMax = .16, t.exports.leanPullZ = .99, t.exports.leanMltZ = .02, t.exports.bobMltY = .03, t.exports.bobMltZ = .05, t.exports.bobPullY = .985, t.exports.bobPullZ = .99, t.exports.landPull = .994, t.exports.landPullV = .985, t.exports.aimAnimMlt = .18, t.exports.aimSlow = .55, t.exports.aimJumpSlow = .85, t.exports.stepAnim = .075, t.exports.stepMlt = .25, t.exports.stepPull = .995, t.exports.maxHealth = 100, t.exports.passiveInc = 500, t.exports.cameraHeight = 1.5, t.exports.playerSpeed = 42e-5, t.exports.ladderSpeed = .035, t.exports.ladderDecel = .97, t.exports.groundDecel = .99, t.exports.airSpeed = 47e-6, t.exports.airDecel = .9996, t.exports.jumpVel = .072, t.exports.jumpPush = .1, t.exports.decelMin = 1e-4, t.exports.climbHeight = 3, t.exports.wpnSpin = .018, t.exports.materialDens = {
            flesh: .2,
            default: .5
        }, t.exports.propGlows = {
            vehicle: !0
        }, t.exports.nameOffset = .6, t.exports.nameOffsetHat = .8, t.exports.maxNameLength = 14, t.exports.maxPassLength = 16, t.exports.playerHeight = 11, t.exports.chestWidth = 2.6, t.exports.chestScale = 1.3, t.exports.armScale = 1.3, t.exports.legScale = 1.3, t.exports.uArmLength = 2.7, t.exports.armInset = -.1, t.exports.lArmLength = 2.7, t.exports.headScale = 2, t.exports.armOff = -.8, t.exports.legHeight = 4.2, t.exports.playerScale = (2 * t.exports.armScale + t.exports.chestWidth + t.exports.armInset) / 2, t.exports.hitBoxPad = 1, t.exports.tracerMinDst = 20, t.exports.tracerMaxDst = 500, t.exports.tracerChance = 1, t.exports.crouchLean = -.1 * Math.PI, t.exports.crouchDst = 2.5, t.exports.crouchSlow = .3, t.exports.crouchSpeed = .007, t.exports.crouchJump = .25, t.exports.crouchSpread = .4, t.exports.crouchAnim = 8e-4, t.exports.crouchAnimMlt = .5, t.exports.spreadMove = 30, t.exports.spreadFall = 35, t.exports.spreadRecover = .985, t.exports.spreadAdj = 63e-5, t.exports.spreadMlt = 400, t.exports.recoilMlt = .3, t.exports.maxLevel = 60, t.exports.assistTime = 5e3, t.exports.assistScore = 25, t.exports.assistMin = 20, t.exports.medalAnim = 1e3, t.exports.medalDelay = 900, t.exports.scoreStreak = 2e3, t.exports.feedTimer = 1500, t.exports.spinTimer = 1800, t.exports.endStats = ["sid", "name", "score", "kills", "deaths", "reward"], t.exports.endForm = {
            reward: function(t, e, n) {
                return t + "KR"
            },
            time: function(t, e, n) {
                return n.timer || "DNF"
            },
            infected: function(t, e, n) {
                return n.convs
            },
            found: function(t, e, n) {
                return n.convs
            }
        }, t.exports.hitLife = 2e3, t.exports.regenDelay = 5e3, t.exports.regenVal = .1, t.exports.sprayTimer = 1e3, t.exports.sprayRange = 25, t.exports.sprayScale = 15, t.exports.deathDelay = 2800, t.exports.deathFollowD = 100, t.exports.suicides = ["suicide", "uninstall life", "not alive", "neck rope", "sudoku"], t.exports.fov = 70, t.exports.viewDist = 2e3, t.exports.nameVisRate = 200, t.exports.worldUV = 60, t.exports.ambientVal = .3, t.exports.ambD = 2, t.exports.ambMlt = 15, t.exports.ambOff = .1, t.exports.ambScale = 10, t.exports.ambBleed = 0, t.exports.boosterSpd = .002, t.exports.rankVar = .03, t.exports.newDataInterval = 6e4, t.exports.socials = ["leaders", "profile", "maps"], t.exports.leaderQueries = ["score", "kills", "wins", "timeplayed", "funds", "clan"], t.exports.leaderCal = {
            player_score: function(e) {
                var n = Math.max(1, Math.floor(t.exports.rankVar * Math.sqrt(e)));
                return "<span class='floatR'><img src='./img/levels/" + Math.max(Math.min(t.exports.maxLevel - 2, n.roundToNearest(3) - 2), 0) + ".png' class='rnkIcon'>" + n + "</span>"
            },
            player_kills: function(t) {
                return t + "<span class='lName'> kills</span>"
            },
            player_wins: function(t) {
                return t + "<span class='lName'> wins</span>"
            },
            player_funds: function(t) {
                return t + " KR"
            },
            player_timeplayed: function(t) {
                var e = t / 1e3 / 60,
                    n = parseInt(e % 60);
                e /= 60;
                var i = parseInt(e % 24);
                e /= 24;
                var r = parseInt(e);
                return (r ? r + "d " : "") + (i ? i + "h " : "") + (n || 0) + "m "
            }
        }
    }).call(this, n(15))
}, function(t, e, n) {
    "use strict";

    function i() {}
    n.r(e), n.d(e, "WebGLRenderTargetCube", function() {
        return qe
    }), n.d(e, "WebGLRenderTarget", function() {
        return Xe
    }), n.d(e, "WebGLRenderer", function() {
        return nr
    }), n.d(e, "ShaderLib", function() {
        return on
    }), n.d(e, "UniformsLib", function() {
        return an
    }), n.d(e, "UniformsUtils", function() {
        return en
    }), n.d(e, "ShaderChunk", function() {
        return tn
    }), n.d(e, "FogExp2", function() {
        return ir
    }), n.d(e, "Fog", function() {
        return rr
    }), n.d(e, "Scene", function() {
        return ar
    }), n.d(e, "Sprite", function() {
        return lr
    }), n.d(e, "LOD", function() {
        return hr
    }), n.d(e, "SkinnedMesh", function() {
        return dr
    }), n.d(e, "Skeleton", function() {
        return ur
    }), n.d(e, "Bone", function() {
        return pr
    }), n.d(e, "Mesh", function() {
        return Hn
    }), n.d(e, "LineSegments", function() {
        return gr
    }), n.d(e, "LineLoop", function() {
        return vr
    }), n.d(e, "Line", function() {
        return mr
    }), n.d(e, "Points", function() {
        return xr
    }), n.d(e, "Group", function() {
        return Qi
    }), n.d(e, "VideoTexture", function() {
        return wr
    }), n.d(e, "DataTexture", function() {
        return Ze
    }), n.d(e, "CompressedTexture", function() {
        return br
    }), n.d(e, "CubeTexture", function() {
        return jn
    }), n.d(e, "CanvasTexture", function() {
        return Mr
    }), n.d(e, "DepthTexture", function() {
        return _r
    }), n.d(e, "Texture", function() {
        return We
    }), n.d(e, "CompressedTextureLoader", function() {
        return Ja
    }), n.d(e, "DataTextureLoader", function() {
        return Qa
    }), n.d(e, "CubeTextureLoader", function() {
        return to
    }), n.d(e, "TextureLoader", function() {
        return eo
    }), n.d(e, "ObjectLoader", function() {
        return is
    }), n.d(e, "MaterialLoader", function() {
        return Jo
    }), n.d(e, "BufferGeometryLoader", function() {
        return Qo
    }), n.d(e, "DefaultLoadingManager", function() {
        return qa
    }), n.d(e, "LoadingManager", function() {
        return Xa
    }), n.d(e, "JSONLoader", function() {
        return ns
    }), n.d(e, "ImageLoader", function() {
        return $a
    }), n.d(e, "ImageBitmapLoader", function() {
        return cs
    }), n.d(e, "FontLoader", function() {
        return ps
    }), n.d(e, "FileLoader", function() {
        return Ka
    }), n.d(e, "Loader", function() {
        return ts
    }), n.d(e, "LoaderUtils", function() {
        return es
    }), n.d(e, "Cache", function() {
        return Ya
    }), n.d(e, "AudioLoader", function() {
        return gs
    }), n.d(e, "SpotLightShadow", function() {
        return Ro
    }), n.d(e, "SpotLight", function() {
        return Po
    }), n.d(e, "PointLight", function() {
        return Co
    }), n.d(e, "RectAreaLight", function() {
        return Bo
    }), n.d(e, "HemisphereLight", function() {
        return Ao
    }), n.d(e, "DirectionalLightShadow", function() {
        return Io
    }), n.d(e, "DirectionalLight", function() {
        return Oo
    }), n.d(e, "AmbientLight", function() {
        return Do
    }), n.d(e, "LightShadow", function() {
        return Lo
    }), n.d(e, "Light", function() {
        return To
    }), n.d(e, "StereoCamera", function() {
        return vs
    }), n.d(e, "PerspectiveCamera", function() {
        return $i
    }), n.d(e, "OrthographicCamera", function() {
        return dn
    }), n.d(e, "CubeCamera", function() {
        return ys
    }), n.d(e, "ArrayCamera", function() {
        return tr
    }), n.d(e, "Camera", function() {
        return pn
    }), n.d(e, "AudioListener", function() {
        return xs
    }), n.d(e, "PositionalAudio", function() {
        return bs
    }), n.d(e, "AudioContext", function() {
        return ms
    }), n.d(e, "AudioAnalyser", function() {
        return Ms
    }), n.d(e, "Audio", function() {
        return ws
    }), n.d(e, "VectorKeyframeTrack", function() {
        return qo
    }), n.d(e, "StringKeyframeTrack", function() {
        return Xo
    }), n.d(e, "QuaternionKeyframeTrack", function() {
        return Yo
    }), n.d(e, "NumberKeyframeTrack", function() {
        return Vo
    }), n.d(e, "ColorKeyframeTrack", function() {
        return jo
    }), n.d(e, "BooleanKeyframeTrack", function() {
        return Go
    }), n.d(e, "PropertyMixer", function() {
        return _s
    }), n.d(e, "PropertyBinding", function() {
        return Es
    }), n.d(e, "KeyframeTrack", function() {
        return Ho
    }), n.d(e, "AnimationUtils", function() {
        return No
    }), n.d(e, "AnimationObjectGroup", function() {
        return Ts
    }), n.d(e, "AnimationMixer", function() {
        return Ls
    }), n.d(e, "AnimationClip", function() {
        return Zo
    }), n.d(e, "Uniform", function() {
        return Rs
    }), n.d(e, "InstancedBufferGeometry", function() {
        return Ps
    }), n.d(e, "BufferGeometry", function() {
        return Pn
    }), n.d(e, "Geometry", function() {
        return gn
    }), n.d(e, "InterleavedBufferAttribute", function() {
        return sr
    }), n.d(e, "InstancedInterleavedBuffer", function() {
        return Cs
    }), n.d(e, "InterleavedBuffer", function() {
        return or
    }), n.d(e, "InstancedBufferAttribute", function() {
        return Is
    }), n.d(e, "Face3", function() {
        return fn
    }), n.d(e, "Object3D", function() {
        return un
    }), n.d(e, "Raycaster", function() {
        return Os
    }), n.d(e, "Layers", function() {
        return ln
    }), n.d(e, "EventDispatcher", function() {
        return i
    }), n.d(e, "Clock", function() {
        return Ns
    }), n.d(e, "QuaternionLinearInterpolant", function() {
        return Wo
    }), n.d(e, "LinearInterpolant", function() {
        return zo
    }), n.d(e, "DiscreteInterpolant", function() {
        return Fo
    }), n.d(e, "CubicInterpolant", function() {
        return Uo
    }), n.d(e, "Interpolant", function() {
        return ko
    }), n.d(e, "Triangle", function() {
        return Fn
    }), n.d(e, "Math", function() {
        return ke
    }), n.d(e, "Spherical", function() {
        return ks
    }), n.d(e, "Cylindrical", function() {
        return Us
    }), n.d(e, "Plane", function() {
        return Qe
    }), n.d(e, "Frustum", function() {
        return $e
    }), n.d(e, "Sphere", function() {
        return Je
    }), n.d(e, "Ray", function() {
        return zn
    }), n.d(e, "Matrix4", function() {
        return ze
    }), n.d(e, "Matrix3", function() {
        return Ge
    }), n.d(e, "Box3", function() {
        return Ke
    }), n.d(e, "Box2", function() {
        return zs
    }), n.d(e, "Line3", function() {
        return Fs
    }), n.d(e, "Euler", function() {
        return cn
    }), n.d(e, "Vector4", function() {
        return Ye
    }), n.d(e, "Vector3", function() {
        return He
    }), n.d(e, "Vector2", function() {
        return Ue
    }), n.d(e, "Quaternion", function() {
        return Fe
    }), n.d(e, "Color", function() {
        return rn
    }), n.d(e, "ImmediateRenderObject", function() {
        return Hs
    }), n.d(e, "VertexNormalsHelper", function() {
        return Gs
    }), n.d(e, "SpotLightHelper", function() {
        return js
    }), n.d(e, "SkeletonHelper", function() {
        return Vs
    }), n.d(e, "PointLightHelper", function() {
        return Ws
    }), n.d(e, "RectAreaLightHelper", function() {
        return Ys
    }), n.d(e, "HemisphereLightHelper", function() {
        return Xs
    }), n.d(e, "GridHelper", function() {
        return qs
    }), n.d(e, "PolarGridHelper", function() {
        return Zs
    }), n.d(e, "FaceNormalsHelper", function() {
        return Ks
    }), n.d(e, "DirectionalLightHelper", function() {
        return Js
    }), n.d(e, "CameraHelper", function() {
        return Qs
    }), n.d(e, "BoxHelper", function() {
        return $s
    }), n.d(e, "Box3Helper", function() {
        return tc
    }), n.d(e, "PlaneHelper", function() {
        return ec
    }), n.d(e, "ArrowHelper", function() {
        return nc
    }), n.d(e, "AxesHelper", function() {
        return ic
    }), n.d(e, "Shape", function() {
        return Eo
    }), n.d(e, "Path", function() {
        return So
    }), n.d(e, "ShapePath", function() {
        return ls
    }), n.d(e, "Font", function() {
        return hs
    }), n.d(e, "CurvePath", function() {
        return _o
    }), n.d(e, "Curve", function() {
        return no
    }), n.d(e, "ImageUtils", function() {
        return je
    }), n.d(e, "ShapeUtils", function() {
        return ha
    }), n.d(e, "WebGLUtils", function() {
        return Ji
    }), n.d(e, "WireframeGeometry", function() {
        return Sr
    }), n.d(e, "ParametricGeometry", function() {
        return Er
    }), n.d(e, "ParametricBufferGeometry", function() {
        return Tr
    }), n.d(e, "TetrahedronGeometry", function() {
        return Rr
    }), n.d(e, "TetrahedronBufferGeometry", function() {
        return Pr
    }), n.d(e, "OctahedronGeometry", function() {
        return Cr
    }), n.d(e, "OctahedronBufferGeometry", function() {
        return Ir
    }), n.d(e, "IcosahedronGeometry", function() {
        return Or
    }), n.d(e, "IcosahedronBufferGeometry", function() {
        return Dr
    }), n.d(e, "DodecahedronGeometry", function() {
        return Br
    }), n.d(e, "DodecahedronBufferGeometry", function() {
        return Nr
    }), n.d(e, "PolyhedronGeometry", function() {
        return Ar
    }), n.d(e, "PolyhedronBufferGeometry", function() {
        return Lr
    }), n.d(e, "TubeGeometry", function() {
        return kr
    }), n.d(e, "TubeBufferGeometry", function() {
        return Ur
    }), n.d(e, "TorusKnotGeometry", function() {
        return zr
    }), n.d(e, "TorusKnotBufferGeometry", function() {
        return Fr
    }), n.d(e, "TorusGeometry", function() {
        return Hr
    }), n.d(e, "TorusBufferGeometry", function() {
        return Gr
    }), n.d(e, "TextGeometry", function() {
        return va
    }), n.d(e, "TextBufferGeometry", function() {
        return ya
    }), n.d(e, "SphereGeometry", function() {
        return xa
    }), n.d(e, "SphereBufferGeometry", function() {
        return wa
    }), n.d(e, "RingGeometry", function() {
        return ba
    }), n.d(e, "RingBufferGeometry", function() {
        return Ma
    }), n.d(e, "PlaneGeometry", function() {
        return On
    }), n.d(e, "PlaneBufferGeometry", function() {
        return Dn
    }), n.d(e, "LatheGeometry", function() {
        return _a
    }), n.d(e, "LatheBufferGeometry", function() {
        return Sa
    }), n.d(e, "ShapeGeometry", function() {
        return Ea
    }), n.d(e, "ShapeBufferGeometry", function() {
        return Ta
    }), n.d(e, "ExtrudeGeometry", function() {
        return da
    }), n.d(e, "ExtrudeBufferGeometry", function() {
        return fa
    }), n.d(e, "EdgesGeometry", function() {
        return La
    }), n.d(e, "ConeGeometry", function() {
        return Ca
    }), n.d(e, "ConeBufferGeometry", function() {
        return Ia
    }), n.d(e, "CylinderGeometry", function() {
        return Ra
    }), n.d(e, "CylinderBufferGeometry", function() {
        return Pa
    }), n.d(e, "CircleGeometry", function() {
        return Oa
    }), n.d(e, "CircleBufferGeometry", function() {
        return Da
    }), n.d(e, "BoxGeometry", function() {
        return Cn
    }), n.d(e, "BoxBufferGeometry", function() {
        return In
    }), n.d(e, "ShadowMaterial", function() {
        return Na
    }), n.d(e, "SpriteMaterial", function() {
        return cr
    }), n.d(e, "RawShaderMaterial", function() {
        return ka
    }), n.d(e, "ShaderMaterial", function() {
        return Un
    }), n.d(e, "PointsMaterial", function() {
        return yr
    }), n.d(e, "MeshPhysicalMaterial", function() {
        return za
    }), n.d(e, "MeshStandardMaterial", function() {
        return Ua
    }), n.d(e, "MeshPhongMaterial", function() {
        return Fa
    }), n.d(e, "MeshToonMaterial", function() {
        return Ha
    }), n.d(e, "MeshNormalMaterial", function() {
        return Ga
    }), n.d(e, "MeshLambertMaterial", function() {
        return ja
    }), n.d(e, "MeshDepthMaterial", function() {
        return Xi
    }), n.d(e, "MeshDistanceMaterial", function() {
        return qi
    }), n.d(e, "MeshBasicMaterial", function() {
        return kn
    }), n.d(e, "LineDashedMaterial", function() {
        return Va
    }), n.d(e, "LineBasicMaterial", function() {
        return fr
    }), n.d(e, "Material", function() {
        return Nn
    }), n.d(e, "Float64BufferAttribute", function() {
        return Tn
    }), n.d(e, "Float32BufferAttribute", function() {
        return En
    }), n.d(e, "Uint32BufferAttribute", function() {
        return Sn
    }), n.d(e, "Int32BufferAttribute", function() {
        return _n
    }), n.d(e, "Uint16BufferAttribute", function() {
        return Mn
    }), n.d(e, "Int16BufferAttribute", function() {
        return bn
    }), n.d(e, "Uint8ClampedBufferAttribute", function() {
        return wn
    }), n.d(e, "Uint8BufferAttribute", function() {
        return xn
    }), n.d(e, "Int8BufferAttribute", function() {
        return yn
    }), n.d(e, "BufferAttribute", function() {
        return vn
    }), n.d(e, "ArcCurve", function() {
        return ro
    }), n.d(e, "CatmullRomCurve3", function() {
        return ho
    }), n.d(e, "CubicBezierCurve", function() {
        return mo
    }), n.d(e, "CubicBezierCurve3", function() {
        return go
    }), n.d(e, "EllipseCurve", function() {
        return io
    }), n.d(e, "LineCurve", function() {
        return vo
    }), n.d(e, "LineCurve3", function() {
        return yo
    }), n.d(e, "QuadraticBezierCurve", function() {
        return xo
    }), n.d(e, "QuadraticBezierCurve3", function() {
        return wo
    }), n.d(e, "SplineCurve", function() {
        return bo
    }), n.d(e, "REVISION", function() {
        return r
    }), n.d(e, "MOUSE", function() {
        return a
    }), n.d(e, "CullFaceNone", function() {
        return o
    }), n.d(e, "CullFaceBack", function() {
        return s
    }), n.d(e, "CullFaceFront", function() {
        return c
    }), n.d(e, "CullFaceFrontBack", function() {
        return l
    }), n.d(e, "FrontFaceDirectionCW", function() {
        return h
    }), n.d(e, "FrontFaceDirectionCCW", function() {
        return u
    }), n.d(e, "BasicShadowMap", function() {
        return p
    }), n.d(e, "PCFShadowMap", function() {
        return d
    }), n.d(e, "PCFSoftShadowMap", function() {
        return f
    }), n.d(e, "FrontSide", function() {
        return m
    }), n.d(e, "BackSide", function() {
        return g
    }), n.d(e, "DoubleSide", function() {
        return v
    }), n.d(e, "FlatShading", function() {
        return y
    }), n.d(e, "SmoothShading", function() {
        return x
    }), n.d(e, "NoColors", function() {
        return w
    }), n.d(e, "FaceColors", function() {
        return b
    }), n.d(e, "VertexColors", function() {
        return M
    }), n.d(e, "NoBlending", function() {
        return _
    }), n.d(e, "NormalBlending", function() {
        return S
    }), n.d(e, "AdditiveBlending", function() {
        return E
    }), n.d(e, "SubtractiveBlending", function() {
        return T
    }), n.d(e, "MultiplyBlending", function() {
        return A
    }), n.d(e, "CustomBlending", function() {
        return L
    }), n.d(e, "AddEquation", function() {
        return R
    }), n.d(e, "SubtractEquation", function() {
        return P
    }), n.d(e, "ReverseSubtractEquation", function() {
        return C
    }), n.d(e, "MinEquation", function() {
        return I
    }), n.d(e, "MaxEquation", function() {
        return O
    }), n.d(e, "ZeroFactor", function() {
        return D
    }), n.d(e, "OneFactor", function() {
        return B
    }), n.d(e, "SrcColorFactor", function() {
        return N
    }), n.d(e, "OneMinusSrcColorFactor", function() {
        return k
    }), n.d(e, "SrcAlphaFactor", function() {
        return U
    }), n.d(e, "OneMinusSrcAlphaFactor", function() {
        return z
    }), n.d(e, "DstAlphaFactor", function() {
        return F
    }), n.d(e, "OneMinusDstAlphaFactor", function() {
        return H
    }), n.d(e, "DstColorFactor", function() {
        return G
    }), n.d(e, "OneMinusDstColorFactor", function() {
        return j
    }), n.d(e, "SrcAlphaSaturateFactor", function() {
        return V
    }), n.d(e, "NeverDepth", function() {
        return W
    }), n.d(e, "AlwaysDepth", function() {
        return Y
    }), n.d(e, "LessDepth", function() {
        return X
    }), n.d(e, "LessEqualDepth", function() {
        return q
    }), n.d(e, "EqualDepth", function() {
        return Z
    }), n.d(e, "GreaterEqualDepth", function() {
        return K
    }), n.d(e, "GreaterDepth", function() {
        return J
    }), n.d(e, "NotEqualDepth", function() {
        return Q
    }), n.d(e, "MultiplyOperation", function() {
        return $
    }), n.d(e, "MixOperation", function() {
        return tt
    }), n.d(e, "AddOperation", function() {
        return et
    }), n.d(e, "NoToneMapping", function() {
        return nt
    }), n.d(e, "LinearToneMapping", function() {
        return it
    }), n.d(e, "ReinhardToneMapping", function() {
        return rt
    }), n.d(e, "Uncharted2ToneMapping", function() {
        return at
    }), n.d(e, "CineonToneMapping", function() {
        return ot
    }), n.d(e, "UVMapping", function() {
        return st
    }), n.d(e, "CubeReflectionMapping", function() {
        return ct
    }), n.d(e, "CubeRefractionMapping", function() {
        return lt
    }), n.d(e, "EquirectangularReflectionMapping", function() {
        return ht
    }), n.d(e, "EquirectangularRefractionMapping", function() {
        return ut
    }), n.d(e, "SphericalReflectionMapping", function() {
        return pt
    }), n.d(e, "CubeUVReflectionMapping", function() {
        return dt
    }), n.d(e, "CubeUVRefractionMapping", function() {
        return ft
    }), n.d(e, "RepeatWrapping", function() {
        return mt
    }), n.d(e, "ClampToEdgeWrapping", function() {
        return gt
    }), n.d(e, "MirroredRepeatWrapping", function() {
        return vt
    }), n.d(e, "NearestFilter", function() {
        return yt
    }), n.d(e, "NearestMipMapNearestFilter", function() {
        return xt
    }), n.d(e, "NearestMipMapLinearFilter", function() {
        return wt
    }), n.d(e, "LinearFilter", function() {
        return bt
    }), n.d(e, "LinearMipMapNearestFilter", function() {
        return Mt
    }), n.d(e, "LinearMipMapLinearFilter", function() {
        return _t
    }), n.d(e, "UnsignedByteType", function() {
        return St
    }), n.d(e, "ByteType", function() {
        return Et
    }), n.d(e, "ShortType", function() {
        return Tt
    }), n.d(e, "UnsignedShortType", function() {
        return At
    }), n.d(e, "IntType", function() {
        return Lt
    }), n.d(e, "UnsignedIntType", function() {
        return Rt
    }), n.d(e, "FloatType", function() {
        return Pt
    }), n.d(e, "HalfFloatType", function() {
        return Ct
    }), n.d(e, "UnsignedShort4444Type", function() {
        return It
    }), n.d(e, "UnsignedShort5551Type", function() {
        return Ot
    }), n.d(e, "UnsignedShort565Type", function() {
        return Dt
    }), n.d(e, "UnsignedInt248Type", function() {
        return Bt
    }), n.d(e, "AlphaFormat", function() {
        return Nt
    }), n.d(e, "RGBFormat", function() {
        return kt
    }), n.d(e, "RGBAFormat", function() {
        return Ut
    }), n.d(e, "LuminanceFormat", function() {
        return zt
    }), n.d(e, "LuminanceAlphaFormat", function() {
        return Ft
    }), n.d(e, "RGBEFormat", function() {
        return Ht
    }), n.d(e, "DepthFormat", function() {
        return Gt
    }), n.d(e, "DepthStencilFormat", function() {
        return jt
    }), n.d(e, "RGB_S3TC_DXT1_Format", function() {
        return Vt
    }), n.d(e, "RGBA_S3TC_DXT1_Format", function() {
        return Wt
    }), n.d(e, "RGBA_S3TC_DXT3_Format", function() {
        return Yt
    }), n.d(e, "RGBA_S3TC_DXT5_Format", function() {
        return Xt
    }), n.d(e, "RGB_PVRTC_4BPPV1_Format", function() {
        return qt
    }), n.d(e, "RGB_PVRTC_2BPPV1_Format", function() {
        return Zt
    }), n.d(e, "RGBA_PVRTC_4BPPV1_Format", function() {
        return Kt
    }), n.d(e, "RGBA_PVRTC_2BPPV1_Format", function() {
        return Jt
    }), n.d(e, "RGB_ETC1_Format", function() {
        return Qt
    }), n.d(e, "RGBA_ASTC_4x4_Format", function() {
        return $t
    }), n.d(e, "RGBA_ASTC_5x4_Format", function() {
        return te
    }), n.d(e, "RGBA_ASTC_5x5_Format", function() {
        return ee
    }), n.d(e, "RGBA_ASTC_6x5_Format", function() {
        return ne
    }), n.d(e, "RGBA_ASTC_6x6_Format", function() {
        return ie
    }), n.d(e, "RGBA_ASTC_8x5_Format", function() {
        return re
    }), n.d(e, "RGBA_ASTC_8x6_Format", function() {
        return ae
    }), n.d(e, "RGBA_ASTC_8x8_Format", function() {
        return oe
    }), n.d(e, "RGBA_ASTC_10x5_Format", function() {
        return se
    }), n.d(e, "RGBA_ASTC_10x6_Format", function() {
        return ce
    }), n.d(e, "RGBA_ASTC_10x8_Format", function() {
        return le
    }), n.d(e, "RGBA_ASTC_10x10_Format", function() {
        return he
    }), n.d(e, "RGBA_ASTC_12x10_Format", function() {
        return ue
    }), n.d(e, "RGBA_ASTC_12x12_Format", function() {
        return pe
    }), n.d(e, "LoopOnce", function() {
        return de
    }), n.d(e, "LoopRepeat", function() {
        return fe
    }), n.d(e, "LoopPingPong", function() {
        return me
    }), n.d(e, "InterpolateDiscrete", function() {
        return ge
    }), n.d(e, "InterpolateLinear", function() {
        return ve
    }), n.d(e, "InterpolateSmooth", function() {
        return ye
    }), n.d(e, "ZeroCurvatureEnding", function() {
        return xe
    }), n.d(e, "ZeroSlopeEnding", function() {
        return we
    }), n.d(e, "WrapAroundEnding", function() {
        return be
    }), n.d(e, "TrianglesDrawMode", function() {
        return Me
    }), n.d(e, "TriangleStripDrawMode", function() {
        return _e
    }), n.d(e, "TriangleFanDrawMode", function() {
        return Se
    }), n.d(e, "LinearEncoding", function() {
        return Ee
    }), n.d(e, "sRGBEncoding", function() {
        return Te
    }), n.d(e, "GammaEncoding", function() {
        return Ae
    }), n.d(e, "RGBEEncoding", function() {
        return Le
    }), n.d(e, "LogLuvEncoding", function() {
        return Re
    }), n.d(e, "RGBM7Encoding", function() {
        return Pe
    }), n.d(e, "RGBM16Encoding", function() {
        return Ce
    }), n.d(e, "RGBDEncoding", function() {
        return Ie
    }), n.d(e, "BasicDepthPacking", function() {
        return Oe
    }), n.d(e, "RGBADepthPacking", function() {
        return De
    }), n.d(e, "TangentSpaceNormalMap", function() {
        return Be
    }), n.d(e, "ObjectSpaceNormalMap", function() {
        return Ne
    }), n.d(e, "CubeGeometry", function() {
        return Cn
    }), n.d(e, "Face4", function() {
        return rc
    }), n.d(e, "LineStrip", function() {
        return ac
    }), n.d(e, "LinePieces", function() {
        return oc
    }), n.d(e, "MeshFaceMaterial", function() {
        return sc
    }), n.d(e, "MultiMaterial", function() {
        return cc
    }), n.d(e, "PointCloud", function() {
        return lc
    }), n.d(e, "Particle", function() {
        return hc
    }), n.d(e, "ParticleSystem", function() {
        return uc
    }), n.d(e, "PointCloudMaterial", function() {
        return pc
    }), n.d(e, "ParticleBasicMaterial", function() {
        return dc
    }), n.d(e, "ParticleSystemMaterial", function() {
        return fc
    }), n.d(e, "Vertex", function() {
        return mc
    }), n.d(e, "DynamicBufferAttribute", function() {
        return gc
    }), n.d(e, "Int8Attribute", function() {
        return vc
    }), n.d(e, "Uint8Attribute", function() {
        return yc
    }), n.d(e, "Uint8ClampedAttribute", function() {
        return xc
    }), n.d(e, "Int16Attribute", function() {
        return wc
    }), n.d(e, "Uint16Attribute", function() {
        return bc
    }), n.d(e, "Int32Attribute", function() {
        return Mc
    }), n.d(e, "Uint32Attribute", function() {
        return _c
    }), n.d(e, "Float32Attribute", function() {
        return Sc
    }), n.d(e, "Float64Attribute", function() {
        return Ec
    }), n.d(e, "ClosedSplineCurve3", function() {
        return Tc
    }), n.d(e, "SplineCurve3", function() {
        return Ac
    }), n.d(e, "Spline", function() {
        return Lc
    }), n.d(e, "AxisHelper", function() {
        return Rc
    }), n.d(e, "BoundingBoxHelper", function() {
        return Pc
    }), n.d(e, "EdgesHelper", function() {
        return Cc
    }), n.d(e, "WireframeHelper", function() {
        return Ic
    }), n.d(e, "XHRLoader", function() {
        return Oc
    }), n.d(e, "BinaryTextureLoader", function() {
        return Dc
    }), n.d(e, "GeometryUtils", function() {
        return Bc
    }), n.d(e, "Projector", function() {
        return Nc
    }), n.d(e, "CanvasRenderer", function() {
        return kc
    }), n.d(e, "SceneUtils", function() {
        return Uc
    }), n.d(e, "LensFlare", function() {
        return zc
    }), void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)), void 0 === Number.isInteger && (Number.isInteger = function(t) {
        return "number" == typeof t && isFinite(t) && Math.floor(t) === t
    }), void 0 === Math.sign && (Math.sign = function(t) {
        return t < 0 ? -1 : t > 0 ? 1 : +t
    }), "name" in Function.prototype == 0 && Object.defineProperty(Function.prototype, "name", {
        get: function() {
            return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]
        }
    }), void 0 === Object.assign && (Object.assign = function(t) {
        if (void 0 === t || null === t) throw new TypeError("Cannot convert undefined or null to object");
        for (var e = Object(t), n = 1; n < arguments.length; n++) {
            var i = arguments[n];
            if (void 0 !== i && null !== i)
                for (var r in i) Object.prototype.hasOwnProperty.call(i, r) && (e[r] = i[r])
        }
        return e
    }), Object.assign(i.prototype, {
        addEventListener: function(t, e) {
            void 0 === this._listeners && (this._listeners = {});
            var n = this._listeners;
            void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e)
        },
        hasEventListener: function(t, e) {
            if (void 0 === this._listeners) return !1;
            var n = this._listeners;
            return void 0 !== n[t] && -1 !== n[t].indexOf(e)
        },
        removeEventListener: function(t, e) {
            if (void 0 !== this._listeners) {
                var n = this._listeners[t];
                if (void 0 !== n) {
                    var i = n.indexOf(e); - 1 !== i && n.splice(i, 1)
                }
            }
        },
        dispatchEvent: function(t) {
            if (void 0 !== this._listeners) {
                var e = this._listeners[t.type];
                if (void 0 !== e) {
                    t.target = this;
                    for (var n = e.slice(0), i = 0, r = n.length; i < r; i++) n[i].call(this, t)
                }
            }
        }
    });
    var r = "95",
        a = {
            LEFT: 0,
            MIDDLE: 1,
            RIGHT: 2
        },
        o = 0,
        s = 1,
        c = 2,
        l = 3,
        h = 0,
        u = 1,
        p = 0,
        d = 1,
        f = 2,
        m = 0,
        g = 1,
        v = 2,
        y = 1,
        x = 2,
        w = 0,
        b = 1,
        M = 2,
        _ = 0,
        S = 1,
        E = 2,
        T = 3,
        A = 4,
        L = 5,
        R = 100,
        P = 101,
        C = 102,
        I = 103,
        O = 104,
        D = 200,
        B = 201,
        N = 202,
        k = 203,
        U = 204,
        z = 205,
        F = 206,
        H = 207,
        G = 208,
        j = 209,
        V = 210,
        W = 0,
        Y = 1,
        X = 2,
        q = 3,
        Z = 4,
        K = 5,
        J = 6,
        Q = 7,
        $ = 0,
        tt = 1,
        et = 2,
        nt = 0,
        it = 1,
        rt = 2,
        at = 3,
        ot = 4,
        st = 300,
        ct = 301,
        lt = 302,
        ht = 303,
        ut = 304,
        pt = 305,
        dt = 306,
        ft = 307,
        mt = 1e3,
        gt = 1001,
        vt = 1002,
        yt = 1003,
        xt = 1004,
        wt = 1005,
        bt = 1006,
        Mt = 1007,
        _t = 1008,
        St = 1009,
        Et = 1010,
        Tt = 1011,
        At = 1012,
        Lt = 1013,
        Rt = 1014,
        Pt = 1015,
        Ct = 1016,
        It = 1017,
        Ot = 1018,
        Dt = 1019,
        Bt = 1020,
        Nt = 1021,
        kt = 1022,
        Ut = 1023,
        zt = 1024,
        Ft = 1025,
        Ht = Ut,
        Gt = 1026,
        jt = 1027,
        Vt = 33776,
        Wt = 33777,
        Yt = 33778,
        Xt = 33779,
        qt = 35840,
        Zt = 35841,
        Kt = 35842,
        Jt = 35843,
        Qt = 36196,
        $t = 37808,
        te = 37809,
        ee = 37810,
        ne = 37811,
        ie = 37812,
        re = 37813,
        ae = 37814,
        oe = 37815,
        se = 37816,
        ce = 37817,
        le = 37818,
        he = 37819,
        ue = 37820,
        pe = 37821,
        de = 2200,
        fe = 2201,
        me = 2202,
        ge = 2300,
        ve = 2301,
        ye = 2302,
        xe = 2400,
        we = 2401,
        be = 2402,
        Me = 0,
        _e = 1,
        Se = 2,
        Ee = 3e3,
        Te = 3001,
        Ae = 3007,
        Le = 3002,
        Re = 3003,
        Pe = 3004,
        Ce = 3005,
        Ie = 3006,
        Oe = 3200,
        De = 3201,
        Be = 0,
        Ne = 1,
        ke = {
            DEG2RAD: Math.PI / 180,
            RAD2DEG: 180 / Math.PI,
            generateUUID: function() {
                for (var t = [], e = 0; e < 256; e++) t[e] = (e < 16 ? "0" : "") + e.toString(16);
                return function() {
                    var e = 4294967295 * Math.random() | 0,
                        n = 4294967295 * Math.random() | 0,
                        i = 4294967295 * Math.random() | 0,
                        r = 4294967295 * Math.random() | 0;
                    return (t[255 & e] + t[e >> 8 & 255] + t[e >> 16 & 255] + t[e >> 24 & 255] + "-" + t[255 & n] + t[n >> 8 & 255] + "-" + t[n >> 16 & 15 | 64] + t[n >> 24 & 255] + "-" + t[63 & i | 128] + t[i >> 8 & 255] + "-" + t[i >> 16 & 255] + t[i >> 24 & 255] + t[255 & r] + t[r >> 8 & 255] + t[r >> 16 & 255] + t[r >> 24 & 255]).toUpperCase()
                }
            }(),
            clamp: function(t, e, n) {
                return Math.max(e, Math.min(n, t))
            },
            euclideanModulo: function(t, e) {
                return (t % e + e) % e
            },
            mapLinear: function(t, e, n, i, r) {
                return i + (t - e) * (r - i) / (n - e)
            },
            lerp: function(t, e, n) {
                return (1 - n) * t + n * e
            },
            smoothstep: function(t, e, n) {
                return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t)
            },
            smootherstep: function(t, e, n) {
                return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * t * (t * (6 * t - 15) + 10)
            },
            randInt: function(t, e) {
                return t + Math.floor(Math.random() * (e - t + 1))
            },
            randFloat: function(t, e) {
                return t + Math.random() * (e - t)
            },
            randFloatSpread: function(t) {
                return t * (.5 - Math.random())
            },
            degToRad: function(t) {
                return t * ke.DEG2RAD
            },
            radToDeg: function(t) {
                return t * ke.RAD2DEG
            },
            isPowerOfTwo: function(t) {
                return 0 == (t & t - 1) && 0 !== t
            },
            ceilPowerOfTwo: function(t) {
                return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2))
            },
            floorPowerOfTwo: function(t) {
                return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
            }
        };

    function Ue(t, e) {
        this.x = t || 0, this.y = e || 0
    }

    function ze() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
    }

    function Fe(t, e, n, i) {
        this._x = t || 0, this._y = e || 0, this._z = n || 0, this._w = void 0 !== i ? i : 1
    }

    function He(t, e, n) {
        this.x = t || 0, this.y = e || 0, this.z = n || 0
    }

    function Ge() {
        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
    }
    Object.defineProperties(Ue.prototype, {
        width: {
            get: function() {
                return this.x
            },
            set: function(t) {
                this.x = t
            }
        },
        height: {
            get: function() {
                return this.y
            },
            set: function(t) {
                this.y = t
            }
        }
    }), Object.assign(Ue.prototype, {
        isVector2: !0,
        set: function(t, e) {
            return this.x = t, this.y = e, this
        },
        setScalar: function(t) {
            return this.x = t, this.y = t, this
        },
        setX: function(t) {
            return this.x = t, this
        },
        setY: function(t) {
            return this.y = t, this
        },
        setComponent: function(t, e) {
            switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
            }
            return this
        },
        getComponent: function(t) {
            switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw new Error("index is out of range: " + t)
            }
        },
        clone: function() {
            return new this.constructor(this.x, this.y)
        },
        copy: function(t) {
            return this.x = t.x, this.y = t.y, this
        },
        add: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : (this.x += t.x, this.y += t.y, this)
        },
        addScalar: function(t) {
            return this.x += t, this.y += t, this
        },
        addVectors: function(t, e) {
            return this.x = t.x + e.x, this.y = t.y + e.y, this
        },
        addScaledVector: function(t, e) {
            return this.x += t.x * e, this.y += t.y * e, this
        },
        sub: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : (this.x -= t.x, this.y -= t.y, this)
        },
        subScalar: function(t) {
            return this.x -= t, this.y -= t, this
        },
        subVectors: function(t, e) {
            return this.x = t.x - e.x, this.y = t.y - e.y, this
        },
        multiply: function(t) {
            return this.x *= t.x, this.y *= t.y, this
        },
        multiplyScalar: function(t) {
            return this.x *= t, this.y *= t, this
        },
        divide: function(t) {
            return this.x /= t.x, this.y /= t.y, this
        },
        divideScalar: function(t) {
            return this.multiplyScalar(1 / t)
        },
        applyMatrix3: function(t) {
            var e = this.x,
                n = this.y,
                i = t.elements;
            return this.x = i[0] * e + i[3] * n + i[6], this.y = i[1] * e + i[4] * n + i[7], this
        },
        min: function(t) {
            return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this
        },
        max: function(t) {
            return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this
        },
        clamp: function(t, e) {
            return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this
        },
        clampScalar: function() {
            var t = new Ue,
                e = new Ue;
            return function(n, i) {
                return t.set(n, n), e.set(i, i), this.clamp(t, e)
            }
        }(),
        clampLength: function(t, e) {
            var n = this.length();
            return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
        },
        floor: function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this
        },
        ceil: function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this
        },
        round: function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this
        },
        roundToZero: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this
        },
        negate: function() {
            return this.x = -this.x, this.y = -this.y, this
        },
        dot: function(t) {
            return this.x * t.x + this.y * t.y
        },
        cross: function(t) {
            return this.x * t.y - this.y * t.x
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y)
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y)
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1)
        },
        angle: function() {
            var t = Math.atan2(this.y, this.x);
            return t < 0 && (t += 2 * Math.PI), t
        },
        distanceTo: function(t) {
            return Math.sqrt(this.distanceToSquared(t))
        },
        distanceToSquared: function(t) {
            var e = this.x - t.x,
                n = this.y - t.y;
            return e * e + n * n
        },
        manhattanDistanceTo: function(t) {
            return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
        },
        setLength: function(t) {
            return this.normalize().multiplyScalar(t)
        },
        lerp: function(t, e) {
            return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this
        },
        lerpVectors: function(t, e, n) {
            return this.subVectors(e, t).multiplyScalar(n).add(t)
        },
        equals: function(t) {
            return t.x === this.x && t.y === this.y
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0), this.x = t[e], this.y = t[e + 1], this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []), void 0 === e && (e = 0), t[e] = this.x, t[e + 1] = this.y, t
        },
        fromBufferAttribute: function(t, e, n) {
            return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = t.getX(e), this.y = t.getY(e), this
        },
        rotateAround: function(t, e) {
            var n = Math.cos(e),
                i = Math.sin(e),
                r = this.x - t.x,
                a = this.y - t.y;
            return this.x = r * n - a * i + t.x, this.y = r * i + a * n + t.y, this
        }
    }), Object.assign(ze.prototype, {
        isMatrix4: !0,
        set: function(t, e, n, i, r, a, o, s, c, l, h, u, p, d, f, m) {
            var g = this.elements;
            return g[0] = t, g[4] = e, g[8] = n, g[12] = i, g[1] = r, g[5] = a, g[9] = o, g[13] = s, g[2] = c, g[6] = l, g[10] = h, g[14] = u, g[3] = p, g[7] = d, g[11] = f, g[15] = m, this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
        },
        clone: function() {
            return (new ze).fromArray(this.elements)
        },
        copy: function(t) {
            var e = this.elements,
                n = t.elements;
            return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11], e[12] = n[12], e[13] = n[13], e[14] = n[14], e[15] = n[15], this
        },
        copyPosition: function(t) {
            var e = this.elements,
                n = t.elements;
            return e[12] = n[12], e[13] = n[13], e[14] = n[14], this
        },
        extractBasis: function(t, e, n) {
            return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this
        },
        makeBasis: function(t, e, n) {
            return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this
        },
        extractRotation: function() {
            var t = new He;
            return function(e) {
                var n = this.elements,
                    i = e.elements,
                    r = 1 / t.setFromMatrixColumn(e, 0).length(),
                    a = 1 / t.setFromMatrixColumn(e, 1).length(),
                    o = 1 / t.setFromMatrixColumn(e, 2).length();
                return n[0] = i[0] * r, n[1] = i[1] * r, n[2] = i[2] * r, n[3] = 0, n[4] = i[4] * a, n[5] = i[5] * a, n[6] = i[6] * a, n[7] = 0, n[8] = i[8] * o, n[9] = i[9] * o, n[10] = i[10] * o, n[11] = 0, n[12] = 0, n[13] = 0, n[14] = 0, n[15] = 1, this
            }
        }(),
        makeRotationFromEuler: function(t) {
            t && t.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var e = this.elements,
                n = t.x,
                i = t.y,
                r = t.z,
                a = Math.cos(n),
                o = Math.sin(n),
                s = Math.cos(i),
                c = Math.sin(i),
                l = Math.cos(r),
                h = Math.sin(r);
            if ("XYZ" === t.order) {
                var u = a * l,
                    p = a * h,
                    d = o * l,
                    f = o * h;
                e[0] = s * l, e[4] = -s * h, e[8] = c, e[1] = p + d * c, e[5] = u - f * c, e[9] = -o * s, e[2] = f - u * c, e[6] = d + p * c, e[10] = a * s
            } else if ("YXZ" === t.order) {
                var m = s * l,
                    g = s * h,
                    v = c * l,
                    y = c * h;
                e[0] = m + y * o, e[4] = v * o - g, e[8] = a * c, e[1] = a * h, e[5] = a * l, e[9] = -o, e[2] = g * o - v, e[6] = y + m * o, e[10] = a * s
            } else if ("ZXY" === t.order) m = s * l, g = s * h, v = c * l, y = c * h, e[0] = m - y * o, e[4] = -a * h, e[8] = v + g * o, e[1] = g + v * o, e[5] = a * l, e[9] = y - m * o, e[2] = -a * c, e[6] = o, e[10] = a * s;
            else if ("ZYX" === t.order) u = a * l, p = a * h, d = o * l, f = o * h, e[0] = s * l, e[4] = d * c - p, e[8] = u * c + f, e[1] = s * h, e[5] = f * c + u, e[9] = p * c - d, e[2] = -c, e[6] = o * s, e[10] = a * s;
            else if ("YZX" === t.order) {
                var x = a * s,
                    w = a * c,
                    b = o * s,
                    M = o * c;
                e[0] = s * l, e[4] = M - x * h, e[8] = b * h + w, e[1] = h, e[5] = a * l, e[9] = -o * l, e[2] = -c * l, e[6] = w * h + b, e[10] = x - M * h
            } else "XZY" === t.order && (x = a * s, w = a * c, b = o * s, M = o * c, e[0] = s * l, e[4] = -h, e[8] = c * l, e[1] = x * h + M, e[5] = a * l, e[9] = w * h - b, e[2] = b * h - w, e[6] = o * l, e[10] = M * h + x);
            return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this
        },
        makeRotationFromQuaternion: function() {
            var t = new He(0, 0, 0),
                e = new He(1, 1, 1);
            return function(n) {
                return this.compose(t, n, e)
            }
        }(),
        lookAt: function() {
            var t = new He,
                e = new He,
                n = new He;
            return function(i, r, a) {
                var o = this.elements;
                return n.subVectors(i, r), 0 === n.lengthSq() && (n.z = 1), n.normalize(), t.crossVectors(a, n), 0 === t.lengthSq() && (1 === Math.abs(a.z) ? n.x += 1e-4 : n.z += 1e-4, n.normalize(), t.crossVectors(a, n)), t.normalize(), e.crossVectors(n, t), o[0] = t.x, o[4] = e.x, o[8] = n.x, o[1] = t.y, o[5] = e.y, o[9] = n.y, o[2] = t.z, o[6] = e.z, o[10] = n.z, this
            }
        }(),
        multiply: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t)
        },
        premultiply: function(t) {
            return this.multiplyMatrices(t, this)
        },
        multiplyMatrices: function(t, e) {
            var n = t.elements,
                i = e.elements,
                r = this.elements,
                a = n[0],
                o = n[4],
                s = n[8],
                c = n[12],
                l = n[1],
                h = n[5],
                u = n[9],
                p = n[13],
                d = n[2],
                f = n[6],
                m = n[10],
                g = n[14],
                v = n[3],
                y = n[7],
                x = n[11],
                w = n[15],
                b = i[0],
                M = i[4],
                _ = i[8],
                S = i[12],
                E = i[1],
                T = i[5],
                A = i[9],
                L = i[13],
                R = i[2],
                P = i[6],
                C = i[10],
                I = i[14],
                O = i[3],
                D = i[7],
                B = i[11],
                N = i[15];
            return r[0] = a * b + o * E + s * R + c * O, r[4] = a * M + o * T + s * P + c * D, r[8] = a * _ + o * A + s * C + c * B, r[12] = a * S + o * L + s * I + c * N, r[1] = l * b + h * E + u * R + p * O, r[5] = l * M + h * T + u * P + p * D, r[9] = l * _ + h * A + u * C + p * B, r[13] = l * S + h * L + u * I + p * N, r[2] = d * b + f * E + m * R + g * O, r[6] = d * M + f * T + m * P + g * D, r[10] = d * _ + f * A + m * C + g * B, r[14] = d * S + f * L + m * I + g * N, r[3] = v * b + y * E + x * R + w * O, r[7] = v * M + y * T + x * P + w * D, r[11] = v * _ + y * A + x * C + w * B, r[15] = v * S + y * L + x * I + w * N, this
        },
        multiplyScalar: function(t) {
            var e = this.elements;
            return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this
        },
        applyToBufferAttribute: function() {
            var t = new He;
            return function(e) {
                for (var n = 0, i = e.count; n < i; n++) t.x = e.getX(n), t.y = e.getY(n), t.z = e.getZ(n), t.applyMatrix4(this), e.setXYZ(n, t.x, t.y, t.z);
                return e
            }
        }(),
        determinant: function() {
            var t = this.elements,
                e = t[0],
                n = t[4],
                i = t[8],
                r = t[12],
                a = t[1],
                o = t[5],
                s = t[9],
                c = t[13],
                l = t[2],
                h = t[6],
                u = t[10],
                p = t[14];
            return t[3] * (+r * s * h - i * c * h - r * o * u + n * c * u + i * o * p - n * s * p) + t[7] * (+e * s * p - e * c * u + r * a * u - i * a * p + i * c * l - r * s * l) + t[11] * (+e * c * h - e * o * p - r * a * h + n * a * p + r * o * l - n * c * l) + t[15] * (-i * o * l - e * s * h + e * o * u + i * a * h - n * a * u + n * s * l)
        },
        transpose: function() {
            var t, e = this.elements;
            return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this
        },
        setPosition: function(t) {
            var e = this.elements;
            return e[12] = t.x, e[13] = t.y, e[14] = t.z, this
        },
        getInverse: function(t, e) {
            var n = this.elements,
                i = t.elements,
                r = i[0],
                a = i[1],
                o = i[2],
                s = i[3],
                c = i[4],
                l = i[5],
                h = i[6],
                u = i[7],
                p = i[8],
                d = i[9],
                f = i[10],
                m = i[11],
                g = i[12],
                v = i[13],
                y = i[14],
                x = i[15],
                w = d * y * u - v * f * u + v * h * m - l * y * m - d * h * x + l * f * x,
                b = g * f * u - p * y * u - g * h * m + c * y * m + p * h * x - c * f * x,
                M = p * v * u - g * d * u + g * l * m - c * v * m - p * l * x + c * d * x,
                _ = g * d * h - p * v * h - g * l * f + c * v * f + p * l * y - c * d * y,
                S = r * w + a * b + o * M + s * _;
            if (0 === S) {
                var E = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === e) throw new Error(E);
                return console.warn(E), this.identity()
            }
            var T = 1 / S;
            return n[0] = w * T, n[1] = (v * f * s - d * y * s - v * o * m + a * y * m + d * o * x - a * f * x) * T, n[2] = (l * y * s - v * h * s + v * o * u - a * y * u - l * o * x + a * h * x) * T, n[3] = (d * h * s - l * f * s - d * o * u + a * f * u + l * o * m - a * h * m) * T, n[4] = b * T, n[5] = (p * y * s - g * f * s + g * o * m - r * y * m - p * o * x + r * f * x) * T, n[6] = (g * h * s - c * y * s - g * o * u + r * y * u + c * o * x - r * h * x) * T, n[7] = (c * f * s - p * h * s + p * o * u - r * f * u - c * o * m + r * h * m) * T, n[8] = M * T, n[9] = (g * d * s - p * v * s - g * a * m + r * v * m + p * a * x - r * d * x) * T, n[10] = (c * v * s - g * l * s + g * a * u - r * v * u - c * a * x + r * l * x) * T, n[11] = (p * l * s - c * d * s - p * a * u + r * d * u + c * a * m - r * l * m) * T, n[12] = _ * T, n[13] = (p * v * o - g * d * o + g * a * f - r * v * f - p * a * y + r * d * y) * T, n[14] = (g * l * o - c * v * o - g * a * h + r * v * h + c * a * y - r * l * y) * T, n[15] = (c * d * o - p * l * o + p * a * h - r * d * h - c * a * f + r * l * f) * T, this
        },
        scale: function(t) {
            var e = this.elements,
                n = t.x,
                i = t.y,
                r = t.z;
            return e[0] *= n, e[4] *= i, e[8] *= r, e[1] *= n, e[5] *= i, e[9] *= r, e[2] *= n, e[6] *= i, e[10] *= r, e[3] *= n, e[7] *= i, e[11] *= r, this
        },
        getMaxScaleOnAxis: function() {
            var t = this.elements,
                e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
                n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
                i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
            return Math.sqrt(Math.max(e, n, i))
        },
        makeTranslation: function(t, e, n) {
            return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this
        },
        makeRotationX: function(t) {
            var e = Math.cos(t),
                n = Math.sin(t);
            return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this
        },
        makeRotationY: function(t) {
            var e = Math.cos(t),
                n = Math.sin(t);
            return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this
        },
        makeRotationZ: function(t) {
            var e = Math.cos(t),
                n = Math.sin(t);
            return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
        },
        makeRotationAxis: function(t, e) {
            var n = Math.cos(e),
                i = Math.sin(e),
                r = 1 - n,
                a = t.x,
                o = t.y,
                s = t.z,
                c = r * a,
                l = r * o;
            return this.set(c * a + n, c * o - i * s, c * s + i * o, 0, c * o + i * s, l * o + n, l * s - i * a, 0, c * s - i * o, l * s + i * a, r * s * s + n, 0, 0, 0, 0, 1), this
        },
        makeScale: function(t, e, n) {
            return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this
        },
        makeShear: function(t, e, n) {
            return this.set(1, e, n, 0, t, 1, n, 0, t, e, 1, 0, 0, 0, 0, 1), this
        },
        compose: function(t, e, n) {
            var i = this.elements,
                r = e._x,
                a = e._y,
                o = e._z,
                s = e._w,
                c = r + r,
                l = a + a,
                h = o + o,
                u = r * c,
                p = r * l,
                d = r * h,
                f = a * l,
                m = a * h,
                g = o * h,
                v = s * c,
                y = s * l,
                x = s * h,
                w = n.x,
                b = n.y,
                M = n.z;
            return i[0] = (1 - (f + g)) * w, i[1] = (p + x) * w, i[2] = (d - y) * w, i[3] = 0, i[4] = (p - x) * b, i[5] = (1 - (u + g)) * b, i[6] = (m + v) * b, i[7] = 0, i[8] = (d + y) * M, i[9] = (m - v) * M, i[10] = (1 - (u + f)) * M, i[11] = 0, i[12] = t.x, i[13] = t.y, i[14] = t.z, i[15] = 1, this
        },
        decompose: function() {
            var t = new He,
                e = new ze;
            return function(n, i, r) {
                var a = this.elements,
                    o = t.set(a[0], a[1], a[2]).length(),
                    s = t.set(a[4], a[5], a[6]).length(),
                    c = t.set(a[8], a[9], a[10]).length();
                this.determinant() < 0 && (o = -o), n.x = a[12], n.y = a[13], n.z = a[14], e.copy(this);
                var l = 1 / o,
                    h = 1 / s,
                    u = 1 / c;
                return e.elements[0] *= l, e.elements[1] *= l, e.elements[2] *= l, e.elements[4] *= h, e.elements[5] *= h, e.elements[6] *= h, e.elements[8] *= u, e.elements[9] *= u, e.elements[10] *= u, i.setFromRotationMatrix(e), r.x = o, r.y = s, r.z = c, this
            }
        }(),
        makePerspective: function(t, e, n, i, r, a) {
            void 0 === a && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
            var o = this.elements,
                s = 2 * r / (e - t),
                c = 2 * r / (n - i),
                l = (e + t) / (e - t),
                h = (n + i) / (n - i),
                u = -(a + r) / (a - r),
                p = -2 * a * r / (a - r);
            return o[0] = s, o[4] = 0, o[8] = l, o[12] = 0, o[1] = 0, o[5] = c, o[9] = h, o[13] = 0, o[2] = 0, o[6] = 0, o[10] = u, o[14] = p, o[3] = 0, o[7] = 0, o[11] = -1, o[15] = 0, this
        },
        makeOrthographic: function(t, e, n, i, r, a) {
            var o = this.elements,
                s = 1 / (e - t),
                c = 1 / (n - i),
                l = 1 / (a - r),
                h = (e + t) * s,
                u = (n + i) * c,
                p = (a + r) * l;
            return o[0] = 2 * s, o[4] = 0, o[8] = 0, o[12] = -h, o[1] = 0, o[5] = 2 * c, o[9] = 0, o[13] = -u, o[2] = 0, o[6] = 0, o[10] = -2 * l, o[14] = -p, o[3] = 0, o[7] = 0, o[11] = 0, o[15] = 1, this
        },
        equals: function(t) {
            for (var e = this.elements, n = t.elements, i = 0; i < 16; i++)
                if (e[i] !== n[i]) return !1;
            return !0
        },
        fromArray: function(t, e) {
            void 0 === e && (e = 0);
            for (var n = 0; n < 16; n++) this.elements[n] = t[n + e];
            return this
        },
        toArray: function(t, e) {
            void 0 === t && (t = []), void 0 === e && (e = 0);
            var n = this.elements;
            return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t[e + 9] = n[9], t[e + 10] = n[10], t[e + 11] = n[11], t[e + 12] = n[12], t[e + 13] = n[13], t[e + 14] = n[14], t[e + 15] = n[15], t
        }
    }), Object.assign(Fe, {
        slerp: function(t, e, n, i) {
            return n.copy(t).slerp(e, i)
        },
        slerpFlat: function(t, e, n, i, r, a, o) {
            var s = n[i + 0],
                c = n[i + 1],
                l = n[i + 2],
                h = n[i + 3],
                u = r[a + 0],
                p = r[a + 1],
                d = r[a + 2],
                f = r[a + 3];
            if (h !== f || s !== u || c !== p || l !== d) {
                var m = 1 - o,
                    g = s * u + c * p + l * d + h * f,
                    v = g >= 0 ? 1 : -1,
                    y = 1 - g * g;
                if (y > Number.EPSILON) {
                    var x = Math.sqrt(y),
                        w = Math.atan2(x, g * v);
                    m = Math.sin(m * w) / x, o = Math.sin(o * w) / x
                }
                var b = o * v;
                if (s = s * m + u * b, c = c * m + p * b, l = l * m + d * b, h = h * m + f * b, m === 1 - o) {
                    var M = 1 / Math.sqrt(s * s + c * c + l * l + h * h);
                    s *= M, c *= M, l *= M, h *= M
                }
            }
            t[e] = s, t[e + 1] = c, t[e + 2] = l, t[e + 3] = h
        }
    }), Object.defineProperties(Fe.prototype, {
        x: {
            get: function() {
                return this._x
            },
            set: function(t) {
                this._x = t, this.onChangeCallback()
            }
        },
        y: {
            get: function() {
                return this._y
            },
            set: function(t) {
                this._y = t, this.onChangeCallback()
            }
        },
        z: {
            get: function() {
                return this._z
            },
            set: function(t) {
                this._z = t, this.onChangeCallback()
            }
        },
        w: {
            get: function() {
                return this._w
            },
            set: function(t) {
                this._w = t, this.onChangeCallback()
            }
        }
    }), Object.assign(Fe.prototype, {
        set: function(t, e, n, i) {
            return this._x = t, this._y = e, this._z = n, this._w = i, this.onChangeCallback(), this
        },
        clone: function() {
            return new this.constructor(this._x, this._y, this._z, this._w)
        },
        copy: function(t) {
            return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this.onChangeCallback(), this
        },
        setFromEuler: function(t, e) {
            if (!t || !t.isEuler) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
            var n = t._x,
                i = t._y,
                r = t._z,
                a = t.order,
                o = Math.cos,
                s = Math.sin,
                c = o(n / 2),
                l = o(i / 2),
                h = o(r / 2),
                u = s(n / 2),
                p = s(i / 2),
                d = s(r / 2);
            return "XYZ" === a ? (this._x = u * l * h + c * p * d, this._y = c * p * h - u * l * d, this._z = c * l * d + u * p * h, this._w = c * l * h - u * p * d) : "YXZ" === a ? (this._x = u * l * h + c * p * d, this._y = c * p * h - u * l * d, this._z = c * l * d - u * p * h, this._w = c * l * h + u * p * d) : "ZXY" === a ? (this._x = u * l * h - c * p * d, this._y = c * p * h + u * l * d, this._z = c * l * d + u * p * h, this._w = c * l * h - u * p * d) : "ZYX" === a ? (this._x = u * l * h - c * p * d, this._y = c * p * h + u * l * d, this._z = c * l * d - u * p * h, this._w = c * l * h + u * p * d) : "YZX" === a ? (this._x = u * l * h + c * p * d, this._y = c * p * h + u * l * d, this._z = c * l * d - u * p * h, this._w = c * l * h - u * p * d) : "XZY" === a && (this._x = u * l * h - c * p * d, this._y = c * p * h - u * l * d, this._z = c * l * d + u * p * h, this._w = c * l * h + u * p * d), !1 !== e && this.onChangeCallback(), this
        },
        setFromAxisAngle: function(t, e) {
            var n = e / 2,
                i = Math.sin(n);
            return this._x = t.x * i, this._y = t.y * i, this._z = t.z * i, this._w = Math.cos(n), this.onChangeCallback(), this
        },
        setFromRotationMatrix: function(t) {
            var e, n = t.elements,
                i = n[0],
                r = n[4],
                a = n[8],
                o = n[1],
                s = n[5],
                c = n[9],
                l = n[2],
                h = n[6],
                u = n[10],
                p = i + s + u;
            return p > 0 ? (e = .5 / Math.sqrt(p + 1), this._w = .25 / e, this._x = (h - c) * e, this._y = (a - l) * e, this._z = (o - r) * e) : i > s && i > u ? (e = 2 * Math.sqrt(1 + i - s - u), this._w = (h - c) / e, this._x = .25 * e, this._y = (r + o) / e, this._z = (a + l) / e) : s > u ? (e = 2 * Math.sqrt(1 + s - i - u), this._w = (a - l) / e, this._x = (r + o) / e, this._y = .25 * e, this._z = (c + h) / e) : (e = 2 * Math.sqrt(1 + u - i - s), this._w = (o - r) / e, this._x = (a + l) / e, this._y = (c + h) / e, this._z = .25 * e), this.onChangeCallback(), this
        },
        setFromUnitVectors: function() {
            var t, e = new He;
            return function(n, i) {
                return void 0 === e && (e = new He), (t = n.dot(i) + 1) < 1e-6 ? (t = 0, Math.abs(n.x) > Math.abs(n.z) ? e.set(-n.y, n.x, 0) : e.set(0, -n.z, n.y)) : e.crossVectors(n, i), this._x = e.x, this._y = e.y, this._z = e.z, this._w = t, this.normalize()
            }
        }(),
        angleTo: function(t) {
            return 2 * Math.acos(Math.abs(ke.clamp(this.dot(t), -1, 1)))
        },
        rotateTowards: function(t, e) {
            var n = this.angleTo(t);
            if (0 === n) return this;
            var i = Math.min(1, e / n);
            return this.slerp(t, i), this
        },
        inverse: function() {
            return this.conjugate()
        },
        conjugate: function() {
            return this._x *= -1, this._y *= -1, this._z *= -1, this.onChangeCallback(), this
        },
        dot: function(t) {
            return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
        },
        lengthSq: function() {
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
        },
        length: function() {
            return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
        },
        normalize: function() {
            var t = this.length();
            return 0 === t ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this.onChangeCallback(), this
        },
        multiply: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(t, e)) : this.multiplyQuaternions(this, t)
        },
        premultiply: function(t) {
            return this.multiplyQuaternions(t, this)
        },
        multiplyQuaternions: function(t, e) {
            var n = t._x,
                i = t._y,
                r = t._z,
                a = t._w,
                o = e._x,
                s = e._y,
                c = e._z,
                l = e._w;
            return this._x = n * l + a * o + i * c - r * s, this._y = i * l + a * s + r * o - n * c, this._z = r * l + a * c + n * s - i * o, this._w = a * l - n * o - i * s - r * c, this.onChangeCallback(), this
        },
        slerp: function(t, e) {
            if (0 === e) return this;
            if (1 === e) return this.copy(t);
            var n = this._x,
                i = this._y,
                r = this._z,
                a = this._w,
                o = a * t._w + n * t._x + i * t._y + r * t._z;
            if (o < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, o = -o) : this.copy(t), o >= 1) return this._w = a, this._x = n, this._y = i, this._z = r, this;
            var s = 1 - o * o;
            if (s <= Number.EPSILON) {
                var c = 1 - e;
                return this._w = c * a + e * this._w, this._x = c * n + e * this._x, this._y = c * i + e * this._y, this._z = c * r + e * this._z, this.normalize()
            }
            var l = Math.sqrt(s),
                h = Math.atan2(l, o),
                u = Math.sin((1 - e) * h) / l,
                p = Math.sin(e * h) / l;
            return this._w = a * u + this._w * p, this._x = n * u + this._x * p, this._y = i * u + this._y * p, this._z = r * u + this._z * p, this.onChangeCallback(), this
        },
        equals: function(t) {
            return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0), this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this.onChangeCallback(), this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []), void 0 === e && (e = 0), t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t
        },
        onChange: function(t) {
            return this.onChangeCallback = t, this
        },
        onChangeCallback: function() {}
    }), Object.assign(He.prototype, {
        isVector3: !0,
        set: function(t, e, n) {
            return this.x = t, this.y = e, this.z = n, this
        },
        setScalar: function(t) {
            return this.x = t, this.y = t, this.z = t, this
        },
        setX: function(t) {
            return this.x = t, this
        },
        setY: function(t) {
            return this.y = t, this
        },
        setZ: function(t) {
            return this.z = t, this
        },
        setComponent: function(t, e) {
            switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                case 2:
                    this.z = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
            }
            return this
        },
        getComponent: function(t) {
            switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + t)
            }
        },
        clone: function() {
            return new this.constructor(this.x, this.y, this.z)
        },
        copy: function(t) {
            return this.x = t.x, this.y = t.y, this.z = t.z, this
        },
        add: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : (this.x += t.x, this.y += t.y, this.z += t.z, this)
        },
        addScalar: function(t) {
            return this.x += t, this.y += t, this.z += t, this
        },
        addVectors: function(t, e) {
            return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this
        },
        addScaledVector: function(t, e) {
            return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this
        },
        sub: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : (this.x -= t.x, this.y -= t.y, this.z -= t.z, this)
        },
        subScalar: function(t) {
            return this.x -= t, this.y -= t, this.z -= t, this
        },
        subVectors: function(t, e) {
            return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this
        },
        multiply: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t, e)) : (this.x *= t.x, this.y *= t.y, this.z *= t.z, this)
        },
        multiplyScalar: function(t) {
            return this.x *= t, this.y *= t, this.z *= t, this
        },
        multiplyVectors: function(t, e) {
            return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this
        },
        applyEuler: function() {
            var t = new Fe;
            return function(e) {
                return e && e.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(t.setFromEuler(e))
            }
        }(),
        applyAxisAngle: function() {
            var t = new Fe;
            return function(e, n) {
                return this.applyQuaternion(t.setFromAxisAngle(e, n))
            }
        }(),
        applyMatrix3: function(t) {
            var e = this.x,
                n = this.y,
                i = this.z,
                r = t.elements;
            return this.x = r[0] * e + r[3] * n + r[6] * i, this.y = r[1] * e + r[4] * n + r[7] * i, this.z = r[2] * e + r[5] * n + r[8] * i, this
        },
        applyMatrix4: function(t) {
            var e = this.x,
                n = this.y,
                i = this.z,
                r = t.elements,
                a = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15]);
            return this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * a, this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * a, this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * a, this
        },
        applyQuaternion: function(t) {
            var e = this.x,
                n = this.y,
                i = this.z,
                r = t.x,
                a = t.y,
                o = t.z,
                s = t.w,
                c = s * e + a * i - o * n,
                l = s * n + o * e - r * i,
                h = s * i + r * n - a * e,
                u = -r * e - a * n - o * i;
            return this.x = c * s + u * -r + l * -o - h * -a, this.y = l * s + u * -a + h * -r - c * -o, this.z = h * s + u * -o + c * -a - l * -r, this
        },
        project: function() {
            var t = new ze;
            return function(e) {
                return t.multiplyMatrices(e.projectionMatrix, t.getInverse(e.matrixWorld)), this.applyMatrix4(t)
            }
        }(),
        unproject: function() {
            var t = new ze;
            return function(e) {
                return t.multiplyMatrices(e.matrixWorld, t.getInverse(e.projectionMatrix)), this.applyMatrix4(t)
            }
        }(),
        transformDirection: function(t) {
            var e = this.x,
                n = this.y,
                i = this.z,
                r = t.elements;
            return this.x = r[0] * e + r[4] * n + r[8] * i, this.y = r[1] * e + r[5] * n + r[9] * i, this.z = r[2] * e + r[6] * n + r[10] * i, this.normalize()
        },
        divide: function(t) {
            return this.x /= t.x, this.y /= t.y, this.z /= t.z, this
        },
        divideScalar: function(t) {
            return this.multiplyScalar(1 / t)
        },
        min: function(t) {
            return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this
        },
        max: function(t) {
            return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this
        },
        clamp: function(t, e) {
            return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this
        },
        clampScalar: function() {
            var t = new He,
                e = new He;
            return function(n, i) {
                return t.set(n, n, n), e.set(i, i, i), this.clamp(t, e)
            }
        }(),
        clampLength: function(t, e) {
            var n = this.length();
            return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
        },
        floor: function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this
        },
        ceil: function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this
        },
        round: function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this
        },
        roundToZero: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this
        },
        negate: function() {
            return this.x = -this.x, this.y = -this.y, this.z = -this.z, this
        },
        dot: function(t) {
            return this.x * t.x + this.y * t.y + this.z * t.z
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1)
        },
        setLength: function(t) {
            return this.normalize().multiplyScalar(t)
        },
        lerp: function(t, e) {
            return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this
        },
        lerpVectors: function(t, e, n) {
            return this.subVectors(e, t).multiplyScalar(n).add(t)
        },
        cross: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t, e)) : this.crossVectors(this, t)
        },
        crossVectors: function(t, e) {
            var n = t.x,
                i = t.y,
                r = t.z,
                a = e.x,
                o = e.y,
                s = e.z;
            return this.x = i * s - r * o, this.y = r * a - n * s, this.z = n * o - i * a, this
        },
        projectOnVector: function(t) {
            var e = t.dot(this) / t.lengthSq();
            return this.copy(t).multiplyScalar(e)
        },
        projectOnPlane: function() {
            var t = new He;
            return function(e) {
                return t.copy(this).projectOnVector(e), this.sub(t)
            }
        }(),
        reflect: function() {
            var t = new He;
            return function(e) {
                return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
            }
        }(),
        angleTo: function(t) {
            var e = this.dot(t) / Math.sqrt(this.lengthSq() * t.lengthSq());
            return Math.acos(ke.clamp(e, -1, 1))
        },
        distanceTo: function(t) {
            return Math.sqrt(this.distanceToSquared(t))
        },
        distanceToSquared: function(t) {
            var e = this.x - t.x,
                n = this.y - t.y,
                i = this.z - t.z;
            return e * e + n * n + i * i
        },
        manhattanDistanceTo: function(t) {
            return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
        },
        setFromSpherical: function(t) {
            var e = Math.sin(t.phi) * t.radius;
            return this.x = e * Math.sin(t.theta), this.y = Math.cos(t.phi) * t.radius, this.z = e * Math.cos(t.theta), this
        },
        setFromCylindrical: function(t) {
            return this.x = t.radius * Math.sin(t.theta), this.y = t.y, this.z = t.radius * Math.cos(t.theta), this
        },
        setFromMatrixPosition: function(t) {
            var e = t.elements;
            return this.x = e[12], this.y = e[13], this.z = e[14], this
        },
        setFromMatrixScale: function(t) {
            var e = this.setFromMatrixColumn(t, 0).length(),
                n = this.setFromMatrixColumn(t, 1).length(),
                i = this.setFromMatrixColumn(t, 2).length();
            return this.x = e, this.y = n, this.z = i, this
        },
        setFromMatrixColumn: function(t, e) {
            return this.fromArray(t.elements, 4 * e)
        },
        equals: function(t) {
            return t.x === this.x && t.y === this.y && t.z === this.z
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0), this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []), void 0 === e && (e = 0), t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t
        },
        fromBufferAttribute: function(t, e, n) {
            return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this
        }
    }), Object.assign(Ge.prototype, {
        isMatrix3: !0,
        set: function(t, e, n, i, r, a, o, s, c) {
            var l = this.elements;
            return l[0] = t, l[1] = i, l[2] = o, l[3] = e, l[4] = r, l[5] = s, l[6] = n, l[7] = a, l[8] = c, this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this
        },
        clone: function() {
            return (new this.constructor).fromArray(this.elements)
        },
        copy: function(t) {
            var e = this.elements,
                n = t.elements;
            return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this
        },
        setFromMatrix4: function(t) {
            var e = t.elements;
            return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this
        },
        applyToBufferAttribute: function() {
            var t = new He;
            return function(e) {
                for (var n = 0, i = e.count; n < i; n++) t.x = e.getX(n), t.y = e.getY(n), t.z = e.getZ(n), t.applyMatrix3(this), e.setXYZ(n, t.x, t.y, t.z);
                return e
            }
        }(),
        multiply: function(t) {
            return this.multiplyMatrices(this, t)
        },
        premultiply: function(t) {
            return this.multiplyMatrices(t, this)
        },
        multiplyMatrices: function(t, e) {
            var n = t.elements,
                i = e.elements,
                r = this.elements,
                a = n[0],
                o = n[3],
                s = n[6],
                c = n[1],
                l = n[4],
                h = n[7],
                u = n[2],
                p = n[5],
                d = n[8],
                f = i[0],
                m = i[3],
                g = i[6],
                v = i[1],
                y = i[4],
                x = i[7],
                w = i[2],
                b = i[5],
                M = i[8];
            return r[0] = a * f + o * v + s * w, r[3] = a * m + o * y + s * b, r[6] = a * g + o * x + s * M, r[1] = c * f + l * v + h * w, r[4] = c * m + l * y + h * b, r[7] = c * g + l * x + h * M, r[2] = u * f + p * v + d * w, r[5] = u * m + p * y + d * b, r[8] = u * g + p * x + d * M, this
        },
        multiplyScalar: function(t) {
            var e = this.elements;
            return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this
        },
        determinant: function() {
            var t = this.elements,
                e = t[0],
                n = t[1],
                i = t[2],
                r = t[3],
                a = t[4],
                o = t[5],
                s = t[6],
                c = t[7],
                l = t[8];
            return e * a * l - e * o * c - n * r * l + n * o * s + i * r * c - i * a * s
        },
        getInverse: function(t, e) {
            t && t.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
            var n = t.elements,
                i = this.elements,
                r = n[0],
                a = n[1],
                o = n[2],
                s = n[3],
                c = n[4],
                l = n[5],
                h = n[6],
                u = n[7],
                p = n[8],
                d = p * c - l * u,
                f = l * h - p * s,
                m = u * s - c * h,
                g = r * d + a * f + o * m;
            if (0 === g) {
                var v = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === e) throw new Error(v);
                return console.warn(v), this.identity()
            }
            var y = 1 / g;
            return i[0] = d * y, i[1] = (o * u - p * a) * y, i[2] = (l * a - o * c) * y, i[3] = f * y, i[4] = (p * r - o * h) * y, i[5] = (o * s - l * r) * y, i[6] = m * y, i[7] = (a * h - u * r) * y, i[8] = (c * r - a * s) * y, this
        },
        transpose: function() {
            var t, e = this.elements;
            return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this
        },
        getNormalMatrix: function(t) {
            return this.setFromMatrix4(t).getInverse(this).transpose()
        },
        transposeIntoArray: function(t) {
            var e = this.elements;
            return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this
        },
        setUvTransform: function(t, e, n, i, r, a, o) {
            var s = Math.cos(r),
                c = Math.sin(r);
            this.set(n * s, n * c, -n * (s * a + c * o) + a + t, -i * c, i * s, -i * (-c * a + s * o) + o + e, 0, 0, 1)
        },
        scale: function(t, e) {
            var n = this.elements;
            return n[0] *= t, n[3] *= t, n[6] *= t, n[1] *= e, n[4] *= e, n[7] *= e, this
        },
        rotate: function(t) {
            var e = Math.cos(t),
                n = Math.sin(t),
                i = this.elements,
                r = i[0],
                a = i[3],
                o = i[6],
                s = i[1],
                c = i[4],
                l = i[7];
            return i[0] = e * r + n * s, i[3] = e * a + n * c, i[6] = e * o + n * l, i[1] = -n * r + e * s, i[4] = -n * a + e * c, i[7] = -n * o + e * l, this
        },
        translate: function(t, e) {
            var n = this.elements;
            return n[0] += t * n[2], n[3] += t * n[5], n[6] += t * n[8], n[1] += e * n[2], n[4] += e * n[5], n[7] += e * n[8], this
        },
        equals: function(t) {
            for (var e = this.elements, n = t.elements, i = 0; i < 9; i++)
                if (e[i] !== n[i]) return !1;
            return !0
        },
        fromArray: function(t, e) {
            void 0 === e && (e = 0);
            for (var n = 0; n < 9; n++) this.elements[n] = t[n + e];
            return this
        },
        toArray: function(t, e) {
            void 0 === t && (t = []), void 0 === e && (e = 0);
            var n = this.elements;
            return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t
        }
    });
    var je = {
            getDataURL: function(t) {
                var e;
                if (t instanceof HTMLCanvasElement) e = t;
                else {
                    "undefined" != typeof OffscreenCanvas ? e = new OffscreenCanvas(t.width, t.height) : ((e = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")).width = t.width, e.height = t.height);
                    var n = e.getContext("2d");
                    t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height)
                }
                return e.width > 2048 || e.height > 2048 ? e.toDataURL("image/jpeg", .6) : e.toDataURL("image/png")
            }
        },
        Ve = 0;

    function We(t, e, n, i, r, a, o, s, c, l) {
        Object.defineProperty(this, "id", {
            value: Ve++
        }), this.uuid = ke.generateUUID(), this.name = "", this.image = void 0 !== t ? t : We.DEFAULT_IMAGE, this.mipmaps = [], this.mapping = void 0 !== e ? e : We.DEFAULT_MAPPING, this.wrapS = void 0 !== n ? n : gt, this.wrapT = void 0 !== i ? i : gt, this.magFilter = void 0 !== r ? r : bt, this.minFilter = void 0 !== a ? a : _t, this.anisotropy = void 0 !== c ? c : 1, this.format = void 0 !== o ? o : Ut, this.type = void 0 !== s ? s : St, this.offset = new Ue(0, 0), this.repeat = new Ue(1, 1), this.center = new Ue(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new Ge, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = void 0 !== l ? l : Ee, this.version = 0, this.onUpdate = null
    }

    function Ye(t, e, n, i) {
        this.x = t || 0, this.y = e || 0, this.z = n || 0, this.w = void 0 !== i ? i : 1
    }

    function Xe(t, e, n) {
        this.width = t, this.height = e, this.scissor = new Ye(0, 0, t, e), this.scissorTest = !1, this.viewport = new Ye(0, 0, t, e), void 0 === (n = n || {}).minFilter && (n.minFilter = bt), this.texture = new We(void 0, void 0, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.generateMipmaps = void 0 === n.generateMipmaps || n.generateMipmaps, this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer, this.stencilBuffer = void 0 === n.stencilBuffer || n.stencilBuffer, this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null
    }

    function qe(t, e, n) {
        Xe.call(this, t, e, n), this.activeCubeFace = 0, this.activeMipMapLevel = 0
    }

    function Ze(t, e, n, i, r, a, o, s, c, l, h, u) {
        We.call(this, null, a, o, s, c, l, i, r, h, u), this.image = {
            data: t,
            width: e,
            height: n
        }, this.magFilter = void 0 !== c ? c : yt, this.minFilter = void 0 !== l ? l : yt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1
    }

    function Ke(t, e) {
        this.min = void 0 !== t ? t : new He(1 / 0, 1 / 0, 1 / 0), this.max = void 0 !== e ? e : new He(-1 / 0, -1 / 0, -1 / 0)
    }

    function Je(t, e) {
        this.center = void 0 !== t ? t : new He, this.radius = void 0 !== e ? e : 0
    }

    function Qe(t, e) {
        this.normal = void 0 !== t ? t : new He(1, 0, 0), this.constant = void 0 !== e ? e : 0
    }

    function $e(t, e, n, i, r, a) {
        this.planes = [void 0 !== t ? t : new Qe, void 0 !== e ? e : new Qe, void 0 !== n ? n : new Qe, void 0 !== i ? i : new Qe, void 0 !== r ? r : new Qe, void 0 !== a ? a : new Qe]
    }
    We.DEFAULT_IMAGE = void 0, We.DEFAULT_MAPPING = st, We.prototype = Object.assign(Object.create(i.prototype), {
        constructor: We,
        isTexture: !0,
        updateMatrix: function() {
            this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.name = t.name, this.image = t.image, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.encoding = t.encoding, this
        },
        toJSON: function(t) {
            var e = void 0 === t || "string" == typeof t;
            if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid];
            var n = {
                metadata: {
                    version: 4.5,
                    type: "Texture",
                    generator: "Texture.toJSON"
                },
                uuid: this.uuid,
                name: this.name,
                mapping: this.mapping,
                repeat: [this.repeat.x, this.repeat.y],
                offset: [this.offset.x, this.offset.y],
                center: [this.center.x, this.center.y],
                rotation: this.rotation,
                wrap: [this.wrapS, this.wrapT],
                format: this.format,
                minFilter: this.minFilter,
                magFilter: this.magFilter,
                anisotropy: this.anisotropy,
                flipY: this.flipY
            };
            if (void 0 !== this.image) {
                var i = this.image;
                if (void 0 === i.uuid && (i.uuid = ke.generateUUID()), !e && void 0 === t.images[i.uuid]) {
                    var r;
                    if (Array.isArray(i)) {
                        r = [];
                        for (var a = 0, o = i.length; a < o; a++) r.push(je.getDataURL(i[a]))
                    } else r = je.getDataURL(i);
                    t.images[i.uuid] = {
                        uuid: i.uuid,
                        url: r
                    }
                }
                n.image = i.uuid
            }
            return e || (t.textures[this.uuid] = n), n
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        },
        transformUv: function(t) {
            if (this.mapping === st) {
                if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1) switch (this.wrapS) {
                    case mt:
                        t.x = t.x - Math.floor(t.x);
                        break;
                    case gt:
                        t.x = t.x < 0 ? 0 : 1;
                        break;
                    case vt:
                        1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x)
                }
                if (t.y < 0 || t.y > 1) switch (this.wrapT) {
                    case mt:
                        t.y = t.y - Math.floor(t.y);
                        break;
                    case gt:
                        t.y = t.y < 0 ? 0 : 1;
                        break;
                    case vt:
                        1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y)
                }
                this.flipY && (t.y = 1 - t.y)
            }
        }
    }), Object.defineProperty(We.prototype, "needsUpdate", {
        set: function(t) {
            !0 === t && this.version++
        }
    }), Object.assign(Ye.prototype, {
        isVector4: !0,
        set: function(t, e, n, i) {
            return this.x = t, this.y = e, this.z = n, this.w = i, this
        },
        setScalar: function(t) {
            return this.x = t, this.y = t, this.z = t, this.w = t, this
        },
        setX: function(t) {
            return this.x = t, this
        },
        setY: function(t) {
            return this.y = t, this
        },
        setZ: function(t) {
            return this.z = t, this
        },
        setW: function(t) {
            return this.w = t, this
        },
        setComponent: function(t, e) {
            switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                case 2:
                    this.z = e;
                    break;
                case 3:
                    this.w = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
            }
            return this
        },
        getComponent: function(t) {
            switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw new Error("index is out of range: " + t)
            }
        },
        clone: function() {
            return new this.constructor(this.x, this.y, this.z, this.w)
        },
        copy: function(t) {
            return this.x = t.x, this.y = t.y, this.z = t.z, this.w = void 0 !== t.w ? t.w : 1, this
        },
        add: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : (this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this)
        },
        addScalar: function(t) {
            return this.x += t, this.y += t, this.z += t, this.w += t, this
        },
        addVectors: function(t, e) {
            return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this
        },
        addScaledVector: function(t, e) {
            return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this
        },
        sub: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : (this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this)
        },
        subScalar: function(t) {
            return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this
        },
        subVectors: function(t, e) {
            return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this
        },
        multiplyScalar: function(t) {
            return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this
        },
        applyMatrix4: function(t) {
            var e = this.x,
                n = this.y,
                i = this.z,
                r = this.w,
                a = t.elements;
            return this.x = a[0] * e + a[4] * n + a[8] * i + a[12] * r, this.y = a[1] * e + a[5] * n + a[9] * i + a[13] * r, this.z = a[2] * e + a[6] * n + a[10] * i + a[14] * r, this.w = a[3] * e + a[7] * n + a[11] * i + a[15] * r, this
        },
        divideScalar: function(t) {
            return this.multiplyScalar(1 / t)
        },
        setAxisAngleFromQuaternion: function(t) {
            this.w = 2 * Math.acos(t.w);
            var e = Math.sqrt(1 - t.w * t.w);
            return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this
        },
        setAxisAngleFromRotationMatrix: function(t) {
            var e, n, i, r, a = t.elements,
                o = a[0],
                s = a[4],
                c = a[8],
                l = a[1],
                h = a[5],
                u = a[9],
                p = a[2],
                d = a[6],
                f = a[10];
            if (Math.abs(s - l) < .01 && Math.abs(c - p) < .01 && Math.abs(u - d) < .01) {
                if (Math.abs(s + l) < .1 && Math.abs(c + p) < .1 && Math.abs(u + d) < .1 && Math.abs(o + h + f - 3) < .1) return this.set(1, 0, 0, 0), this;
                e = Math.PI;
                var m = (o + 1) / 2,
                    g = (h + 1) / 2,
                    v = (f + 1) / 2,
                    y = (s + l) / 4,
                    x = (c + p) / 4,
                    w = (u + d) / 4;
                return m > g && m > v ? m < .01 ? (n = 0, i = .707106781, r = .707106781) : (i = y / (n = Math.sqrt(m)), r = x / n) : g > v ? g < .01 ? (n = .707106781, i = 0, r = .707106781) : (n = y / (i = Math.sqrt(g)), r = w / i) : v < .01 ? (n = .707106781, i = .707106781, r = 0) : (n = x / (r = Math.sqrt(v)), i = w / r), this.set(n, i, r, e), this
            }
            var b = Math.sqrt((d - u) * (d - u) + (c - p) * (c - p) + (l - s) * (l - s));
            return Math.abs(b) < .001 && (b = 1), this.x = (d - u) / b, this.y = (c - p) / b, this.z = (l - s) / b, this.w = Math.acos((o + h + f - 1) / 2), this
        },
        min: function(t) {
            return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this
        },
        max: function(t) {
            return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this
        },
        clamp: function(t, e) {
            return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this.w = Math.max(t.w, Math.min(e.w, this.w)), this
        },
        clampScalar: function() {
            var t, e;
            return function(n, i) {
                return void 0 === t && (t = new Ye, e = new Ye), t.set(n, n, n, n), e.set(i, i, i, i), this.clamp(t, e)
            }
        }(),
        clampLength: function(t, e) {
            var n = this.length();
            return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
        },
        floor: function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this
        },
        ceil: function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this
        },
        round: function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this
        },
        roundToZero: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this
        },
        negate: function() {
            return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this
        },
        dot: function(t) {
            return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1)
        },
        setLength: function(t) {
            return this.normalize().multiplyScalar(t)
        },
        lerp: function(t, e) {
            return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this
        },
        lerpVectors: function(t, e, n) {
            return this.subVectors(e, t).multiplyScalar(n).add(t)
        },
        equals: function(t) {
            return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0), this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []), void 0 === e && (e = 0), t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t
        },
        fromBufferAttribute: function(t, e, n) {
            return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this
        }
    }), Xe.prototype = Object.assign(Object.create(i.prototype), {
        constructor: Xe,
        isWebGLRenderTarget: !0,
        setSize: function(t, e) {
            this.width === t && this.height === e || (this.width = t, this.height = e, this.dispose()), this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.width = t.width, this.height = t.height, this.viewport.copy(t.viewport), this.texture = t.texture.clone(), this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, this.depthTexture = t.depthTexture, this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }), qe.prototype = Object.create(Xe.prototype), qe.prototype.constructor = qe, qe.prototype.isWebGLRenderTargetCube = !0, Ze.prototype = Object.create(We.prototype), Ze.prototype.constructor = Ze, Ze.prototype.isDataTexture = !0, Object.assign(Ke.prototype, {
        isBox3: !0,
        set: function(t, e) {
            return this.min.copy(t), this.max.copy(e), this
        },
        setFromArray: function(t) {
            for (var e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, a = -1 / 0, o = -1 / 0, s = 0, c = t.length; s < c; s += 3) {
                var l = t[s],
                    h = t[s + 1],
                    u = t[s + 2];
                l < e && (e = l), h < n && (n = h), u < i && (i = u), l > r && (r = l), h > a && (a = h), u > o && (o = u)
            }
            return this.min.set(e, n, i), this.max.set(r, a, o), this
        },
        setFromBufferAttribute: function(t) {
            for (var e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, a = -1 / 0, o = -1 / 0, s = 0, c = t.count; s < c; s++) {
                var l = t.getX(s),
                    h = t.getY(s),
                    u = t.getZ(s);
                l < e && (e = l), h < n && (n = h), u < i && (i = u), l > r && (r = l), h > a && (a = h), u > o && (o = u)
            }
            return this.min.set(e, n, i), this.max.set(r, a, o), this
        },
        setFromPoints: function(t) {
            this.makeEmpty();
            for (var e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
            return this
        },
        setFromCenterAndSize: function() {
            var t = new He;
            return function(e, n) {
                var i = t.copy(n).multiplyScalar(.5);
                return this.min.copy(e).sub(i), this.max.copy(e).add(i), this
            }
        }(),
        setFromObject: function(t) {
            return this.makeEmpty(), this.expandByObject(t)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.min.copy(t.min), this.max.copy(t.max), this
        },
        makeEmpty: function() {
            return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this
        },
        isEmpty: function() {
            return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
        },
        getCenter: function(t) {
            return void 0 === t && (console.warn("THREE.Box3: .getCenter() target is now required"), t = new He), this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
        },
        getSize: function(t) {
            return void 0 === t && (console.warn("THREE.Box3: .getSize() target is now required"), t = new He), this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
        },
        expandByPoint: function(t) {
            return this.min.min(t), this.max.max(t), this
        },
        expandByVector: function(t) {
            return this.min.sub(t), this.max.add(t), this
        },
        expandByScalar: function(t) {
            return this.min.addScalar(-t), this.max.addScalar(t), this
        },
        expandByObject: function() {
            var t, e, n, i = new He;

            function r(r) {
                var a = r.geometry;
                if (void 0 !== a)
                    if (a.isGeometry) {
                        var o = a.vertices;
                        for (e = 0, n = o.length; e < n; e++) i.copy(o[e]), i.applyMatrix4(r.matrixWorld), t.expandByPoint(i)
                    } else if (a.isBufferGeometry) {
                    var s = a.attributes.position;
                    if (void 0 !== s)
                        for (e = 0, n = s.count; e < n; e++) i.fromBufferAttribute(s, e).applyMatrix4(r.matrixWorld), t.expandByPoint(i)
                }
            }
            return function(e) {
                return t = this, e.updateMatrixWorld(!0), e.traverse(r), this
            }
        }(),
        containsPoint: function(t) {
            return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z)
        },
        containsBox: function(t) {
            return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z
        },
        getParameter: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box3: .getParameter() target is now required"), e = new He), e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
        },
        intersectsBox: function(t) {
            return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z)
        },
        intersectsSphere: function() {
            var t = new He;
            return function(e) {
                return this.clampPoint(e.center, t), t.distanceToSquared(e.center) <= e.radius * e.radius
            }
        }(),
        intersectsPlane: function(t) {
            var e, n;
            return t.normal.x > 0 ? (e = t.normal.x * this.min.x, n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, n = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, n += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, n += t.normal.z * this.min.z), e <= t.constant && n >= t.constant
        },
        intersectsTriangle: function() {
            var t = new He,
                e = new He,
                n = new He,
                i = new He,
                r = new He,
                a = new He,
                o = new He,
                s = new He,
                c = new He,
                l = new He;

            function h(i) {
                var r, a;
                for (r = 0, a = i.length - 3; r <= a; r += 3) {
                    o.fromArray(i, r);
                    var s = c.x * Math.abs(o.x) + c.y * Math.abs(o.y) + c.z * Math.abs(o.z),
                        l = t.dot(o),
                        h = e.dot(o),
                        u = n.dot(o);
                    if (Math.max(-Math.max(l, h, u), Math.min(l, h, u)) > s) return !1
                }
                return !0
            }
            return function(o) {
                if (this.isEmpty()) return !1;
                this.getCenter(s), c.subVectors(this.max, s), t.subVectors(o.a, s), e.subVectors(o.b, s), n.subVectors(o.c, s), i.subVectors(e, t), r.subVectors(n, e), a.subVectors(t, n);
                var u = [0, -i.z, i.y, 0, -r.z, r.y, 0, -a.z, a.y, i.z, 0, -i.x, r.z, 0, -r.x, a.z, 0, -a.x, -i.y, i.x, 0, -r.y, r.x, 0, -a.y, a.x, 0];
                return !!h(u) && !!h(u = [1, 0, 0, 0, 1, 0, 0, 0, 1]) && (l.crossVectors(i, r), h(u = [l.x, l.y, l.z]))
            }
        }(),
        clampPoint: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box3: .clampPoint() target is now required"), e = new He), e.copy(t).clamp(this.min, this.max)
        },
        distanceToPoint: function() {
            var t = new He;
            return function(e) {
                return t.copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }(),
        getBoundingSphere: function() {
            var t = new He;
            return function(e) {
                return void 0 === e && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"), e = new Je), this.getCenter(e.center), e.radius = .5 * this.getSize(t).length(), e
            }
        }(),
        intersect: function(t) {
            return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this
        },
        union: function(t) {
            return this.min.min(t.min), this.max.max(t.max), this
        },
        applyMatrix4: function(t) {
            if (this.isEmpty()) return this;
            var e = t.elements,
                n = e[0] * this.min.x,
                i = e[1] * this.min.x,
                r = e[2] * this.min.x,
                a = e[0] * this.max.x,
                o = e[1] * this.max.x,
                s = e[2] * this.max.x,
                c = e[4] * this.min.y,
                l = e[5] * this.min.y,
                h = e[6] * this.min.y,
                u = e[4] * this.max.y,
                p = e[5] * this.max.y,
                d = e[6] * this.max.y,
                f = e[8] * this.min.z,
                m = e[9] * this.min.z,
                g = e[10] * this.min.z,
                v = e[8] * this.max.z,
                y = e[9] * this.max.z,
                x = e[10] * this.max.z;
            return this.min.x = Math.min(n, a) + Math.min(c, u) + Math.min(f, v) + e[12], this.min.y = Math.min(i, o) + Math.min(l, p) + Math.min(m, y) + e[13], this.min.z = Math.min(r, s) + Math.min(h, d) + Math.min(g, x) + e[14], this.max.x = Math.max(n, a) + Math.max(c, u) + Math.max(f, v) + e[12], this.max.y = Math.max(i, o) + Math.max(l, p) + Math.max(m, y) + e[13], this.max.z = Math.max(r, s) + Math.max(h, d) + Math.max(g, x) + e[14], this
        },
        translate: function(t) {
            return this.min.add(t), this.max.add(t), this
        },
        equals: function(t) {
            return t.min.equals(this.min) && t.max.equals(this.max)
        }
    }), Object.assign(Je.prototype, {
        set: function(t, e) {
            return this.center.copy(t), this.radius = e, this
        },
        setFromPoints: function() {
            var t = new Ke;
            return function(e, n) {
                var i = this.center;
                void 0 !== n ? i.copy(n) : t.setFromPoints(e).getCenter(i);
                for (var r = 0, a = 0, o = e.length; a < o; a++) r = Math.max(r, i.distanceToSquared(e[a]));
                return this.radius = Math.sqrt(r), this
            }
        }(),
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.center.copy(t.center), this.radius = t.radius, this
        },
        empty: function() {
            return this.radius <= 0
        },
        containsPoint: function(t) {
            return t.distanceToSquared(this.center) <= this.radius * this.radius
        },
        distanceToPoint: function(t) {
            return t.distanceTo(this.center) - this.radius
        },
        intersectsSphere: function(t) {
            var e = this.radius + t.radius;
            return t.center.distanceToSquared(this.center) <= e * e
        },
        intersectsBox: function(t) {
            return t.intersectsSphere(this)
        },
        intersectsPlane: function(t) {
            return Math.abs(t.distanceToPoint(this.center)) <= this.radius
        },
        clampPoint: function(t, e) {
            var n = this.center.distanceToSquared(t);
            return void 0 === e && (console.warn("THREE.Sphere: .clampPoint() target is now required"), e = new He), e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e
        },
        getBoundingBox: function(t) {
            return void 0 === t && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), t = new Ke), t.set(this.center, this.center), t.expandByScalar(this.radius), t
        },
        applyMatrix4: function(t) {
            return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this
        },
        translate: function(t) {
            return this.center.add(t), this
        },
        equals: function(t) {
            return t.center.equals(this.center) && t.radius === this.radius
        }
    }), Object.assign(Qe.prototype, {
        set: function(t, e) {
            return this.normal.copy(t), this.constant = e, this
        },
        setComponents: function(t, e, n, i) {
            return this.normal.set(t, e, n), this.constant = i, this
        },
        setFromNormalAndCoplanarPoint: function(t, e) {
            return this.normal.copy(t), this.constant = -e.dot(this.normal), this
        },
        setFromCoplanarPoints: function() {
            var t = new He,
                e = new He;
            return function(n, i, r) {
                var a = t.subVectors(r, i).cross(e.subVectors(n, i)).normalize();
                return this.setFromNormalAndCoplanarPoint(a, n), this
            }
        }(),
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.normal.copy(t.normal), this.constant = t.constant, this
        },
        normalize: function() {
            var t = 1 / this.normal.length();
            return this.normal.multiplyScalar(t), this.constant *= t, this
        },
        negate: function() {
            return this.constant *= -1, this.normal.negate(), this
        },
        distanceToPoint: function(t) {
            return this.normal.dot(t) + this.constant
        },
        distanceToSphere: function(t) {
            return this.distanceToPoint(t.center) - t.radius
        },
        projectPoint: function(t, e) {
            return void 0 === e && (console.warn("THREE.Plane: .projectPoint() target is now required"), e = new He), e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
        },
        intersectLine: function() {
            var t = new He;
            return function(e, n) {
                void 0 === n && (console.warn("THREE.Plane: .intersectLine() target is now required"), n = new He);
                var i = e.delta(t),
                    r = this.normal.dot(i);
                if (0 === r) return 0 === this.distanceToPoint(e.start) ? n.copy(e.start) : void 0;
                var a = -(e.start.dot(this.normal) + this.constant) / r;
                return a < 0 || a > 1 ? void 0 : n.copy(i).multiplyScalar(a).add(e.start)
            }
        }(),
        intersectsLine: function(t) {
            var e = this.distanceToPoint(t.start),
                n = this.distanceToPoint(t.end);
            return e < 0 && n > 0 || n < 0 && e > 0
        },
        intersectsBox: function(t) {
            return t.intersectsPlane(this)
        },
        intersectsSphere: function(t) {
            return t.intersectsPlane(this)
        },
        coplanarPoint: function(t) {
            return void 0 === t && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), t = new He), t.copy(this.normal).multiplyScalar(-this.constant)
        },
        applyMatrix4: function() {
            var t = new He,
                e = new Ge;
            return function(n, i) {
                var r = i || e.getNormalMatrix(n),
                    a = this.coplanarPoint(t).applyMatrix4(n),
                    o = this.normal.applyMatrix3(r).normalize();
                return this.constant = -a.dot(o), this
            }
        }(),
        translate: function(t) {
            return this.constant -= t.dot(this.normal), this
        },
        equals: function(t) {
            return t.normal.equals(this.normal) && t.constant === this.constant
        }
    }), Object.assign($e.prototype, {
        set: function(t, e, n, i, r, a) {
            var o = this.planes;
            return o[0].copy(t), o[1].copy(e), o[2].copy(n), o[3].copy(i), o[4].copy(r), o[5].copy(a), this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            for (var e = this.planes, n = 0; n < 6; n++) e[n].copy(t.planes[n]);
            return this
        },
        setFromMatrix: function(t) {
            var e = this.planes,
                n = t.elements,
                i = n[0],
                r = n[1],
                a = n[2],
                o = n[3],
                s = n[4],
                c = n[5],
                l = n[6],
                h = n[7],
                u = n[8],
                p = n[9],
                d = n[10],
                f = n[11],
                m = n[12],
                g = n[13],
                v = n[14],
                y = n[15];
            return e[0].setComponents(o - i, h - s, f - u, y - m).normalize(), e[1].setComponents(o + i, h + s, f + u, y + m).normalize(), e[2].setComponents(o + r, h + c, f + p, y + g).normalize(), e[3].setComponents(o - r, h - c, f - p, y - g).normalize(), e[4].setComponents(o - a, h - l, f - d, y - v).normalize(), e[5].setComponents(o + a, h + l, f + d, y + v).normalize(), this
        },
        intersectsObject: function() {
            var t = new Je;
            return function(e) {
                var n = e.geometry;
                return null === n.boundingSphere && n.computeBoundingSphere(), t.copy(n.boundingSphere).applyMatrix4(e.matrixWorld), this.intersectsSphere(t)
            }
        }(),
        intersectsSprite: function() {
            var t = new Je;
            return function(e) {
                return t.center.set(0, 0, 0), t.radius = .7071067811865476, t.applyMatrix4(e.matrixWorld), this.intersectsSphere(t)
            }
        }(),
        intersectsSphere: function(t) {
            for (var e = this.planes, n = t.center, i = -t.radius, r = 0; r < 6; r++)
                if (e[r].distanceToPoint(n) < i) return !1;
            return !0
        },
        intersectsBox: function() {
            var t = new He;
            return function(e) {
                for (var n = this.planes, i = 0; i < 6; i++) {
                    var r = n[i];
                    if (t.x = r.normal.x > 0 ? e.max.x : e.min.x, t.y = r.normal.y > 0 ? e.max.y : e.min.y, t.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(t) < 0) return !1
                }
                return !0
            }
        }(),
        containsPoint: function(t) {
            for (var e = this.planes, n = 0; n < 6; n++)
                if (e[n].distanceToPoint(t) < 0) return !1;
            return !0
        }
    });
    var tn = {
            alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",
            alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",
            alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",
            aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",
            aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
            begin_vertex: "\nvec3 transformed = vec3( position );\n",
            beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n",
            bsdfs: "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
            bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
            clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n",
            clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",
            clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",
            clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
            color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
            color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",
            color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
            color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
            common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",
            cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
            defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",
            displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",
            displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",
            emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",
            emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",
            encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",
            encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",
            envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
            envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
            envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",
            envmap_physical_pars_fragment: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
            envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
            fog_vertex: "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",
            fog_pars_vertex: "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",
            fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",
            fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",
            gradientmap_pars_fragment: "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",
            lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",
            lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
            lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
            lights_pars_begin: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n",
            lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",
            lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
            lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
            lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
            lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n",
            lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n",
            lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
            logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
            logdepthbuf_pars_fragment: "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",
            logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",
            logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",
            map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",
            map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",
            map_particle_fragment: "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",
            map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",
            metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",
            metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
            morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
            morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
            morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
            normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n",
            normal_fragment_maps: "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
            normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n",
            packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
            premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",
            project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",
            dithering_fragment: "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",
            dithering_pars_fragment: "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",
            roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",
            roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
            shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
            shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
            shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
            shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
            skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
            skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
            skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",
            skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
            specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
            specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
            tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",
            tonemapping_pars_fragment: "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
            uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",
            uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",
            uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
            uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
            uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
            uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",
            worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",
            cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
            cube_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",
            depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
            depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
            distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",
            distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",
            equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",
            equirect_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
            linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",
            meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",
            normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",
            points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n",
            shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",
            shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tvec4 mvPosition;\n\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"
        },
        en = {
            merge: function(t) {
                for (var e = {}, n = 0; n < t.length; n++) {
                    var i = this.clone(t[n]);
                    for (var r in i) e[r] = i[r]
                }
                return e
            },
            clone: function(t) {
                var e = {};
                for (var n in t)
                    for (var i in e[n] = {}, t[n]) {
                        var r = t[n][i];
                        r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture) ? e[n][i] = r.clone() : Array.isArray(r) ? e[n][i] = r.slice() : e[n][i] = r
                    }
                return e
            }
        },
        nn = {
            aliceblue: 15792383,
            antiquewhite: 16444375,
            aqua: 65535,
            aquamarine: 8388564,
            azure: 15794175,
            beige: 16119260,
            bisque: 16770244,
            black: 0,
            blanchedalmond: 16772045,
            blue: 255,
            blueviolet: 9055202,
            brown: 10824234,
            burlywood: 14596231,
            cadetblue: 6266528,
            chartreuse: 8388352,
            chocolate: 13789470,
            coral: 16744272,
            cornflowerblue: 6591981,
            cornsilk: 16775388,
            crimson: 14423100,
            cyan: 65535,
            darkblue: 139,
            darkcyan: 35723,
            darkgoldenrod: 12092939,
            darkgray: 11119017,
            darkgreen: 25600,
            darkgrey: 11119017,
            darkkhaki: 12433259,
            darkmagenta: 9109643,
            darkolivegreen: 5597999,
            darkorange: 16747520,
            darkorchid: 10040012,
            darkred: 9109504,
            darksalmon: 15308410,
            darkseagreen: 9419919,
            darkslateblue: 4734347,
            darkslategray: 3100495,
            darkslategrey: 3100495,
            darkturquoise: 52945,
            darkviolet: 9699539,
            deeppink: 16716947,
            deepskyblue: 49151,
            dimgray: 6908265,
            dimgrey: 6908265,
            dodgerblue: 2003199,
            firebrick: 11674146,
            floralwhite: 16775920,
            forestgreen: 2263842,
            fuchsia: 16711935,
            gainsboro: 14474460,
            ghostwhite: 16316671,
            gold: 16766720,
            goldenrod: 14329120,
            gray: 8421504,
            green: 32768,
            greenyellow: 11403055,
            grey: 8421504,
            honeydew: 15794160,
            hotpink: 16738740,
            indianred: 13458524,
            indigo: 4915330,
            ivory: 16777200,
            khaki: 15787660,
            lavender: 15132410,
            lavenderblush: 16773365,
            lawngreen: 8190976,
            lemonchiffon: 16775885,
            lightblue: 11393254,
            lightcoral: 15761536,
            lightcyan: 14745599,
            lightgoldenrodyellow: 16448210,
            lightgray: 13882323,
            lightgreen: 9498256,
            lightgrey: 13882323,
            lightpink: 16758465,
            lightsalmon: 16752762,
            lightseagreen: 2142890,
            lightskyblue: 8900346,
            lightslategray: 7833753,
            lightslategrey: 7833753,
            lightsteelblue: 11584734,
            lightyellow: 16777184,
            lime: 65280,
            limegreen: 3329330,
            linen: 16445670,
            magenta: 16711935,
            maroon: 8388608,
            mediumaquamarine: 6737322,
            mediumblue: 205,
            mediumorchid: 12211667,
            mediumpurple: 9662683,
            mediumseagreen: 3978097,
            mediumslateblue: 8087790,
            mediumspringgreen: 64154,
            mediumturquoise: 4772300,
            mediumvioletred: 13047173,
            midnightblue: 1644912,
            mintcream: 16121850,
            mistyrose: 16770273,
            moccasin: 16770229,
            navajowhite: 16768685,
            navy: 128,
            oldlace: 16643558,
            olive: 8421376,
            olivedrab: 7048739,
            orange: 16753920,
            orangered: 16729344,
            orchid: 14315734,
            palegoldenrod: 15657130,
            palegreen: 10025880,
            paleturquoise: 11529966,
            palevioletred: 14381203,
            papayawhip: 16773077,
            peachpuff: 16767673,
            peru: 13468991,
            pink: 16761035,
            plum: 14524637,
            powderblue: 11591910,
            purple: 8388736,
            rebeccapurple: 6697881,
            red: 16711680,
            rosybrown: 12357519,
            royalblue: 4286945,
            saddlebrown: 9127187,
            salmon: 16416882,
            sandybrown: 16032864,
            seagreen: 3050327,
            seashell: 16774638,
            sienna: 10506797,
            silver: 12632256,
            skyblue: 8900331,
            slateblue: 6970061,
            slategray: 7372944,
            slategrey: 7372944,
            snow: 16775930,
            springgreen: 65407,
            steelblue: 4620980,
            tan: 13808780,
            teal: 32896,
            thistle: 14204888,
            tomato: 16737095,
            turquoise: 4251856,
            violet: 15631086,
            wheat: 16113331,
            white: 16777215,
            whitesmoke: 16119285,
            yellow: 16776960,
            yellowgreen: 10145074
        };

    function rn(t, e, n) {
        return void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n)
    }
    Object.assign(rn.prototype, {
        isColor: !0,
        r: 1,
        g: 1,
        b: 1,
        set: function(t) {
            return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t), this
        },
        setScalar: function(t) {
            return this.r = t, this.g = t, this.b = t, this
        },
        setHex: function(t) {
            return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (255 & t) / 255, this
        },
        setRGB: function(t, e, n) {
            return this.r = t, this.g = e, this.b = n, this
        },
        setHSL: function() {
            function t(t, e, n) {
                return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t
            }
            return function(e, n, i) {
                if (e = ke.euclideanModulo(e, 1), n = ke.clamp(n, 0, 1), i = ke.clamp(i, 0, 1), 0 === n) this.r = this.g = this.b = i;
                else {
                    var r = i <= .5 ? i * (1 + n) : i + n - i * n,
                        a = 2 * i - r;
                    this.r = t(a, r, e + 1 / 3), this.g = t(a, r, e), this.b = t(a, r, e - 1 / 3)
                }
                return this
            }
        }(),
        setStyle: function(t) {
            function e(e) {
                void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.")
            }
            var n;
            if (n = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)) {
                var i, r = n[1],
                    a = n[2];
                switch (r) {
                    case "rgb":
                    case "rgba":
                        if (i = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)) return this.r = Math.min(255, parseInt(i[1], 10)) / 255, this.g = Math.min(255, parseInt(i[2], 10)) / 255, this.b = Math.min(255, parseInt(i[3], 10)) / 255, e(i[5]), this;
                        if (i = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)) return this.r = Math.min(100, parseInt(i[1], 10)) / 100, this.g = Math.min(100, parseInt(i[2], 10)) / 100, this.b = Math.min(100, parseInt(i[3], 10)) / 100, e(i[5]), this;
                        break;
                    case "hsl":
                    case "hsla":
                        if (i = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)) {
                            var o = parseFloat(i[1]) / 360,
                                s = parseInt(i[2], 10) / 100,
                                c = parseInt(i[3], 10) / 100;
                            return e(i[5]), this.setHSL(o, s, c)
                        }
                }
            } else if (n = /^\#([A-Fa-f0-9]+)$/.exec(t)) {
                var l, h = (l = n[1]).length;
                if (3 === h) return this.r = parseInt(l.charAt(0) + l.charAt(0), 16) / 255, this.g = parseInt(l.charAt(1) + l.charAt(1), 16) / 255, this.b = parseInt(l.charAt(2) + l.charAt(2), 16) / 255, this;
                if (6 === h) return this.r = parseInt(l.charAt(0) + l.charAt(1), 16) / 255, this.g = parseInt(l.charAt(2) + l.charAt(3), 16) / 255, this.b = parseInt(l.charAt(4) + l.charAt(5), 16) / 255, this
            }
            return t && t.length > 0 && (void 0 !== (l = nn[t]) ? this.setHex(l) : console.warn("THREE.Color: Unknown color " + t)), this
        },
        clone: function() {
            return new this.constructor(this.r, this.g, this.b)
        },
        copy: function(t) {
            return this.r = t.r, this.g = t.g, this.b = t.b, this
        },
        copyGammaToLinear: function(t, e) {
            return void 0 === e && (e = 2), this.r = Math.pow(t.r, e), this.g = Math.pow(t.g, e), this.b = Math.pow(t.b, e), this
        },
        copyLinearToGamma: function(t, e) {
            void 0 === e && (e = 2);
            var n = e > 0 ? 1 / e : 1;
            return this.r = Math.pow(t.r, n), this.g = Math.pow(t.g, n), this.b = Math.pow(t.b, n), this
        },
        convertGammaToLinear: function(t) {
            return this.copyGammaToLinear(this, t), this
        },
        convertLinearToGamma: function(t) {
            return this.copyLinearToGamma(this, t), this
        },
        copySRGBToLinear: function() {
            function t(t) {
                return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4)
            }
            return function(e) {
                return this.r = t(e.r), this.g = t(e.g), this.b = t(e.b), this
            }
        }(),
        copyLinearToSRGB: function() {
            function t(t) {
                return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055
            }
            return function(e) {
                return this.r = t(e.r), this.g = t(e.g), this.b = t(e.b), this
            }
        }(),
        convertSRGBToLinear: function() {
            return this.copySRGBToLinear(this), this
        },
        convertLinearToSRGB: function() {
            return this.copyLinearToSRGB(this), this
        },
        getHex: function() {
            return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
        },
        getHexString: function() {
            return ("000000" + this.getHex().toString(16)).slice(-6)
        },
        getHSL: function(t) {
            void 0 === t && (console.warn("THREE.Color: .getHSL() target is now required"), t = {
                h: 0,
                s: 0,
                l: 0
            });
            var e, n, i = this.r,
                r = this.g,
                a = this.b,
                o = Math.max(i, r, a),
                s = Math.min(i, r, a),
                c = (s + o) / 2;
            if (s === o) e = 0, n = 0;
            else {
                var l = o - s;
                switch (n = c <= .5 ? l / (o + s) : l / (2 - o - s), o) {
                    case i:
                        e = (r - a) / l + (r < a ? 6 : 0);
                        break;
                    case r:
                        e = (a - i) / l + 2;
                        break;
                    case a:
                        e = (i - r) / l + 4
                }
                e /= 6
            }
            return t.h = e, t.s = n, t.l = c, t
        },
        getStyle: function() {
            return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
        },
        offsetHSL: function() {
            var t = {};
            return function(e, n, i) {
                return this.getHSL(t), t.h += e, t.s += n, t.l += i, this.setHSL(t.h, t.s, t.l), this
            }
        }(),
        add: function(t) {
            return this.r += t.r, this.g += t.g, this.b += t.b, this
        },
        addColors: function(t, e) {
            return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this
        },
        addScalar: function(t) {
            return this.r += t, this.g += t, this.b += t, this
        },
        sub: function(t) {
            return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this
        },
        multiply: function(t) {
            return this.r *= t.r, this.g *= t.g, this.b *= t.b, this
        },
        multiplyScalar: function(t) {
            return this.r *= t, this.g *= t, this.b *= t, this
        },
        lerp: function(t, e) {
            return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this
        },
        equals: function(t) {
            return t.r === this.r && t.g === this.g && t.b === this.b
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0), this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []), void 0 === e && (e = 0), t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t
        },
        toJSON: function() {
            return this.getHex()
        }
    });
    var an = {
            common: {
                diffuse: {
                    value: new rn(15658734)
                },
                opacity: {
                    value: 1
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new Ge
                },
                alphaMap: {
                    value: null
                }
            },
            specularmap: {
                specularMap: {
                    value: null
                }
            },
            envmap: {
                envMap: {
                    value: null
                },
                flipEnvMap: {
                    value: -1
                },
                reflectivity: {
                    value: 1
                },
                refractionRatio: {
                    value: .98
                },
                maxMipLevel: {
                    value: 0
                }
            },
            aomap: {
                aoMap: {
                    value: null
                },
                aoMapIntensity: {
                    value: 1
                }
            },
            lightmap: {
                lightMap: {
                    value: null
                },
                lightMapIntensity: {
                    value: 1
                }
            },
            emissivemap: {
                emissiveMap: {
                    value: null
                }
            },
            bumpmap: {
                bumpMap: {
                    value: null
                },
                bumpScale: {
                    value: 1
                }
            },
            normalmap: {
                normalMap: {
                    value: null
                },
                normalScale: {
                    value: new Ue(1, 1)
                }
            },
            displacementmap: {
                displacementMap: {
                    value: null
                },
                displacementScale: {
                    value: 1
                },
                displacementBias: {
                    value: 0
                }
            },
            roughnessmap: {
                roughnessMap: {
                    value: null
                }
            },
            metalnessmap: {
                metalnessMap: {
                    value: null
                }
            },
            gradientmap: {
                gradientMap: {
                    value: null
                }
            },
            fog: {
                fogDensity: {
                    value: 25e-5
                },
                fogNear: {
                    value: 1
                },
                fogFar: {
                    value: 2e3
                },
                fogColor: {
                    value: new rn(16777215)
                }
            },
            lights: {
                ambientLightColor: {
                    value: []
                },
                directionalLights: {
                    value: [],
                    properties: {
                        direction: {},
                        color: {},
                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                directionalShadowMap: {
                    value: []
                },
                directionalShadowMatrix: {
                    value: []
                },
                spotLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        direction: {},
                        distance: {},
                        coneCos: {},
                        penumbraCos: {},
                        decay: {},
                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                spotShadowMap: {
                    value: []
                },
                spotShadowMatrix: {
                    value: []
                },
                pointLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        decay: {},
                        distance: {},
                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {},
                        shadowCameraNear: {},
                        shadowCameraFar: {}
                    }
                },
                pointShadowMap: {
                    value: []
                },
                pointShadowMatrix: {
                    value: []
                },
                hemisphereLights: {
                    value: [],
                    properties: {
                        direction: {},
                        skyColor: {},
                        groundColor: {}
                    }
                },
                rectAreaLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        width: {},
                        height: {}
                    }
                }
            },
            points: {
                diffuse: {
                    value: new rn(15658734)
                },
                opacity: {
                    value: 1
                },
                size: {
                    value: 1
                },
                scale: {
                    value: 1
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new Ge
                }
            },
            sprite: {
                diffuse: {
                    value: new rn(15658734)
                },
                opacity: {
                    value: 1
                },
                center: {
                    value: new Ue(.5, .5)
                },
                rotation: {
                    value: 0
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new Ge
                }
            }
        },
        on = {
            basic: {
                uniforms: en.merge([an.common, an.specularmap, an.envmap, an.aomap, an.lightmap, an.fog]),
                vertexShader: tn.meshbasic_vert,
                fragmentShader: tn.meshbasic_frag
            },
            lambert: {
                uniforms: en.merge([an.common, an.specularmap, an.envmap, an.aomap, an.lightmap, an.emissivemap, an.fog, an.lights, {
                    emissive: {
                        value: new rn(0)
                    }
                }]),
                vertexShader: tn.meshlambert_vert,
                fragmentShader: tn.meshlambert_frag
            },
            phong: {
                uniforms: en.merge([an.common, an.specularmap, an.envmap, an.aomap, an.lightmap, an.emissivemap, an.bumpmap, an.normalmap, an.displacementmap, an.gradientmap, an.fog, an.lights, {
                    emissive: {
                        value: new rn(0)
                    },
                    specular: {
                        value: new rn(1118481)
                    },
                    shininess: {
                        value: 30
                    }
                }]),
                vertexShader: tn.meshphong_vert,
                fragmentShader: tn.meshphong_frag
            },
            standard: {
                uniforms: en.merge([an.common, an.envmap, an.aomap, an.lightmap, an.emissivemap, an.bumpmap, an.normalmap, an.displacementmap, an.roughnessmap, an.metalnessmap, an.fog, an.lights, {
                    emissive: {
                        value: new rn(0)
                    },
                    roughness: {
                        value: .5
                    },
                    metalness: {
                        value: .5
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }]),
                vertexShader: tn.meshphysical_vert,
                fragmentShader: tn.meshphysical_frag
            },
            points: {
                uniforms: en.merge([an.points, an.fog]),
                vertexShader: tn.points_vert,
                fragmentShader: tn.points_frag
            },
            dashed: {
                uniforms: en.merge([an.common, an.fog, {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }]),
                vertexShader: tn.linedashed_vert,
                fragmentShader: tn.linedashed_frag
            },
            depth: {
                uniforms: en.merge([an.common, an.displacementmap]),
                vertexShader: tn.depth_vert,
                fragmentShader: tn.depth_frag
            },
            normal: {
                uniforms: en.merge([an.common, an.bumpmap, an.normalmap, an.displacementmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: tn.normal_vert,
                fragmentShader: tn.normal_frag
            },
            sprite: {
                uniforms: en.merge([an.sprite, an.fog]),
                vertexShader: tn.sprite_vert,
                fragmentShader: tn.sprite_frag
            },
            cube: {
                uniforms: {
                    tCube: {
                        value: null
                    },
                    tFlip: {
                        value: -1
                    },
                    opacity: {
                        value: 1
                    }
                },
                vertexShader: tn.cube_vert,
                fragmentShader: tn.cube_frag
            },
            equirect: {
                uniforms: {
                    tEquirect: {
                        value: null
                    }
                },
                vertexShader: tn.equirect_vert,
                fragmentShader: tn.equirect_frag
            },
            distanceRGBA: {
                uniforms: en.merge([an.common, an.displacementmap, {
                    referencePosition: {
                        value: new He
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1e3
                    }
                }]),
                vertexShader: tn.distanceRGBA_vert,
                fragmentShader: tn.distanceRGBA_frag
            },
            shadow: {
                uniforms: en.merge([an.lights, an.fog, {
                    color: {
                        value: new rn(0)
                    },
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: tn.shadow_vert,
                fragmentShader: tn.shadow_frag
            }
        };

    function sn() {
        var t = null,
            e = !1,
            n = null;

        function i(r, a) {
            !1 !== e && (n(r, a), t.requestAnimationFrame(i))
        }
        return {
            start: function() {
                !0 !== e && null !== n && (t.requestAnimationFrame(i), e = !0)
            },
            stop: function() {
                e = !1
            },
            setAnimationLoop: function(t) {
                n = t
            },
            setContext: function(e) {
                t = e
            }
        }
    }

    function cn(t, e, n, i) {
        this._x = t || 0, this._y = e || 0, this._z = n || 0, this._order = i || cn.DefaultOrder
    }

    function ln() {
        this.mask = 1
    }
    on.physical = {
        uniforms: en.merge([on.standard.uniforms, {
            clearCoat: {
                value: 0
            },
            clearCoatRoughness: {
                value: 0
            }
        }]),
        vertexShader: tn.meshphysical_vert,
        fragmentShader: tn.meshphysical_frag
    }, cn.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"], cn.DefaultOrder = "XYZ", Object.defineProperties(cn.prototype, {
        x: {
            get: function() {
                return this._x
            },
            set: function(t) {
                this._x = t, this.onChangeCallback()
            }
        },
        y: {
            get: function() {
                return this._y
            },
            set: function(t) {
                this._y = t, this.onChangeCallback()
            }
        },
        z: {
            get: function() {
                return this._z
            },
            set: function(t) {
                this._z = t, this.onChangeCallback()
            }
        },
        order: {
            get: function() {
                return this._order
            },
            set: function(t) {
                this._order = t, this.onChangeCallback()
            }
        }
    }), Object.assign(cn.prototype, {
        isEuler: !0,
        set: function(t, e, n, i) {
            return this._x = t, this._y = e, this._z = n, this._order = i || this._order, this.onChangeCallback(), this
        },
        clone: function() {
            return new this.constructor(this._x, this._y, this._z, this._order)
        },
        copy: function(t) {
            return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this.onChangeCallback(), this
        },
        setFromRotationMatrix: function(t, e, n) {
            var i = ke.clamp,
                r = t.elements,
                a = r[0],
                o = r[4],
                s = r[8],
                c = r[1],
                l = r[5],
                h = r[9],
                u = r[2],
                p = r[6],
                d = r[10];
            return "XYZ" === (e = e || this._order) ? (this._y = Math.asin(i(s, -1, 1)), Math.abs(s) < .99999 ? (this._x = Math.atan2(-h, d), this._z = Math.atan2(-o, a)) : (this._x = Math.atan2(p, l), this._z = 0)) : "YXZ" === e ? (this._x = Math.asin(-i(h, -1, 1)), Math.abs(h) < .99999 ? (this._y = Math.atan2(s, d), this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-u, a), this._z = 0)) : "ZXY" === e ? (this._x = Math.asin(i(p, -1, 1)), Math.abs(p) < .99999 ? (this._y = Math.atan2(-u, d), this._z = Math.atan2(-o, l)) : (this._y = 0, this._z = Math.atan2(c, a))) : "ZYX" === e ? (this._y = Math.asin(-i(u, -1, 1)), Math.abs(u) < .99999 ? (this._x = Math.atan2(p, d), this._z = Math.atan2(c, a)) : (this._x = 0, this._z = Math.atan2(-o, l))) : "YZX" === e ? (this._z = Math.asin(i(c, -1, 1)), Math.abs(c) < .99999 ? (this._x = Math.atan2(-h, l), this._y = Math.atan2(-u, a)) : (this._x = 0, this._y = Math.atan2(s, d))) : "XZY" === e ? (this._z = Math.asin(-i(o, -1, 1)), Math.abs(o) < .99999 ? (this._x = Math.atan2(p, l), this._y = Math.atan2(s, a)) : (this._x = Math.atan2(-h, d), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + e), this._order = e, !1 !== n && this.onChangeCallback(), this
        },
        setFromQuaternion: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeRotationFromQuaternion(e), this.setFromRotationMatrix(t, n, i)
            }
        }(),
        setFromVector3: function(t, e) {
            return this.set(t.x, t.y, t.z, e || this._order)
        },
        reorder: function() {
            var t = new Fe;
            return function(e) {
                return t.setFromEuler(this), this.setFromQuaternion(t, e)
            }
        }(),
        equals: function(t) {
            return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
        },
        fromArray: function(t) {
            return this._x = t[0], this._y = t[1], this._z = t[2], void 0 !== t[3] && (this._order = t[3]), this.onChangeCallback(), this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []), void 0 === e && (e = 0), t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t
        },
        toVector3: function(t) {
            return t ? t.set(this._x, this._y, this._z) : new He(this._x, this._y, this._z)
        },
        onChange: function(t) {
            return this.onChangeCallback = t, this
        },
        onChangeCallback: function() {}
    }), Object.assign(ln.prototype, {
        set: function(t) {
            this.mask = 1 << t | 0
        },
        enable: function(t) {
            this.mask |= 1 << t | 0
        },
        toggle: function(t) {
            this.mask ^= 1 << t | 0
        },
        disable: function(t) {
            this.mask &= ~(1 << t | 0)
        },
        test: function(t) {
            return 0 != (this.mask & t.mask)
        }
    });
    var hn = 0;

    function un() {
        Object.defineProperty(this, "id", {
            value: hn++
        }), this.uuid = ke.generateUUID(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = un.DefaultUp.clone();
        var t = new He,
            e = new cn,
            n = new Fe,
            i = new He(1, 1, 1);
        e.onChange(function() {
            n.setFromEuler(e, !1)
        }), n.onChange(function() {
            e.setFromQuaternion(n, void 0, !1)
        }), Object.defineProperties(this, {
            position: {
                enumerable: !0,
                value: t
            },
            rotation: {
                enumerable: !0,
                value: e
            },
            quaternion: {
                enumerable: !0,
                value: n
            },
            scale: {
                enumerable: !0,
                value: i
            },
            modelViewMatrix: {
                value: new ze
            },
            normalMatrix: {
                value: new Ge
            }
        }), this.matrix = new ze, this.matrixWorld = new ze, this.matrixAutoUpdate = un.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = !1, this.layers = new ln, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.userData = {}
    }

    function pn() {
        un.call(this), this.type = "Camera", this.matrixWorldInverse = new ze, this.projectionMatrix = new ze
    }

    function dn(t, e, n, i, r, a) {
        pn.call(this), this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = t, this.right = e, this.top = n, this.bottom = i, this.near = void 0 !== r ? r : .1, this.far = void 0 !== a ? a : 2e3, this.updateProjectionMatrix()
    }

    function fn(t, e, n, i, r, a) {
        this.a = t, this.b = e, this.c = n, this.normal = i && i.isVector3 ? i : new He, this.vertexNormals = Array.isArray(i) ? i : [], this.color = r && r.isColor ? r : new rn, this.vertexColors = Array.isArray(r) ? r : [], this.materialIndex = void 0 !== a ? a : 0
    }
    un.DefaultUp = new He(0, 1, 0), un.DefaultMatrixAutoUpdate = !0, un.prototype = Object.assign(Object.create(i.prototype), {
        constructor: un,
        isObject3D: !0,
        onBeforeRender: function() {},
        onAfterRender: function() {},
        applyMatrix: function(t) {
            this.matrix.multiplyMatrices(t, this.matrix), this.matrix.decompose(this.position, this.quaternion, this.scale)
        },
        applyQuaternion: function(t) {
            return this.quaternion.premultiply(t), this
        },
        setRotationFromAxisAngle: function(t, e) {
            this.quaternion.setFromAxisAngle(t, e)
        },
        setRotationFromEuler: function(t) {
            this.quaternion.setFromEuler(t, !0)
        },
        setRotationFromMatrix: function(t) {
            this.quaternion.setFromRotationMatrix(t)
        },
        setRotationFromQuaternion: function(t) {
            this.quaternion.copy(t)
        },
        rotateOnAxis: function() {
            var t = new Fe;
            return function(e, n) {
                return t.setFromAxisAngle(e, n), this.quaternion.multiply(t), this
            }
        }(),
        rotateOnWorldAxis: function() {
            var t = new Fe;
            return function(e, n) {
                return t.setFromAxisAngle(e, n), this.quaternion.premultiply(t), this
            }
        }(),
        rotateX: function() {
            var t = new He(1, 0, 0);
            return function(e) {
                return this.rotateOnAxis(t, e)
            }
        }(),
        rotateY: function() {
            var t = new He(0, 1, 0);
            return function(e) {
                return this.rotateOnAxis(t, e)
            }
        }(),
        rotateZ: function() {
            var t = new He(0, 0, 1);
            return function(e) {
                return this.rotateOnAxis(t, e)
            }
        }(),
        translateOnAxis: function() {
            var t = new He;
            return function(e, n) {
                return t.copy(e).applyQuaternion(this.quaternion), this.position.add(t.multiplyScalar(n)), this
            }
        }(),
        translateX: function() {
            var t = new He(1, 0, 0);
            return function(e) {
                return this.translateOnAxis(t, e)
            }
        }(),
        translateY: function() {
            var t = new He(0, 1, 0);
            return function(e) {
                return this.translateOnAxis(t, e)
            }
        }(),
        translateZ: function() {
            var t = new He(0, 0, 1);
            return function(e) {
                return this.translateOnAxis(t, e)
            }
        }(),
        localToWorld: function(t) {
            return t.applyMatrix4(this.matrixWorld)
        },
        worldToLocal: function() {
            var t = new ze;
            return function(e) {
                return e.applyMatrix4(t.getInverse(this.matrixWorld))
            }
        }(),
        lookAt: function() {
            var t = new ze,
                e = new He;
            return function(n, i, r) {
                n.isVector3 ? e.copy(n) : e.set(n, i, r), this.isCamera ? t.lookAt(this.position, e, this.up) : t.lookAt(e, this.position, this.up), this.quaternion.setFromRotationMatrix(t)
            }
        }(),
        add: function(t) {
            if (arguments.length > 1) {
                for (var e = 0; e < arguments.length; e++) this.add(arguments[e]);
                return this
            }
            return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t), t.parent = this, t.dispatchEvent({
                type: "added"
            }), this.children.push(t)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this)
        },
        remove: function(t) {
            if (arguments.length > 1) {
                for (var e = 0; e < arguments.length; e++) this.remove(arguments[e]);
                return this
            }
            var n = this.children.indexOf(t);
            return -1 !== n && (t.parent = null, t.dispatchEvent({
                type: "removed"
            }), this.children.splice(n, 1)), this
        },
        getObjectById: function(t) {
            return this.getObjectByProperty("id", t)
        },
        getObjectByName: function(t) {
            return this.getObjectByProperty("name", t)
        },
        getObjectByProperty: function(t, e) {
            if (this[t] === e) return this;
            for (var n = 0, i = this.children.length; n < i; n++) {
                var r = this.children[n].getObjectByProperty(t, e);
                if (void 0 !== r) return r
            }
        },
        getWorldPosition: function(t) {
            return void 0 === t && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), t = new He), this.updateMatrixWorld(!0), t.setFromMatrixPosition(this.matrixWorld)
        },
        getWorldQuaternion: function() {
            var t = new He,
                e = new He;
            return function(n) {
                return void 0 === n && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), n = new Fe), this.updateMatrixWorld(!0), this.matrixWorld.decompose(t, n, e), n
            }
        }(),
        getWorldScale: function() {
            var t = new He,
                e = new Fe;
            return function(n) {
                return void 0 === n && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), n = new He), this.updateMatrixWorld(!0), this.matrixWorld.decompose(t, e, n), n
            }
        }(),
        getWorldDirection: function() {
            var t = new Fe;
            return function(e) {
                return void 0 === e && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), e = new He), this.getWorldQuaternion(t), e.set(0, 0, 1).applyQuaternion(t)
            }
        }(),
        raycast: function() {},
        traverse: function(t) {
            t(this);
            for (var e = this.children, n = 0, i = e.length; n < i; n++) e[n].traverse(t)
        },
        traverseVisible: function(t) {
            if (!1 !== this.visible) {
                t(this);
                for (var e = this.children, n = 0, i = e.length; n < i; n++) e[n].traverseVisible(t)
            }
        },
        traverseAncestors: function(t) {
            var e = this.parent;
            null !== e && (t(e), e.traverseAncestors(t))
        },
        updateMatrix: function() {
            this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0
        },
        updateMatrixWorld: function(t) {
            this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, t = !0);
            for (var e = this.children, n = 0, i = e.length; n < i; n++) e[n].updateMatrixWorld(t)
        },
        toJSON: function(t) {
            var e = void 0 === t || "string" == typeof t,
                n = {};
            e && (t = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {}
            }, n.metadata = {
                version: 4.5,
                type: "Object",
                generator: "Object3D.toJSON"
            });
            var i = {};

            function r(e, n) {
                return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid
            }
            if (i.uuid = this.uuid, i.type = this.type, "" !== this.name && (i.name = this.name), !0 === this.castShadow && (i.castShadow = !0), !0 === this.receiveShadow && (i.receiveShadow = !0), !1 === this.visible && (i.visible = !1), !1 === this.frustumCulled && (i.frustumCulled = !1), 0 !== this.renderOrder && (i.renderOrder = this.renderOrder), "{}" !== JSON.stringify(this.userData) && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1), this.isMesh || this.isLine || this.isPoints) {
                i.geometry = r(t.geometries, this.geometry);
                var a = this.geometry.parameters;
                if (void 0 !== a && void 0 !== a.shapes) {
                    var o = a.shapes;
                    if (Array.isArray(o))
                        for (var s = 0, c = o.length; s < c; s++) {
                            var l = o[s];
                            r(t.shapes, l)
                        } else r(t.shapes, o)
                }
            }
            if (void 0 !== this.material)
                if (Array.isArray(this.material)) {
                    var h = [];
                    for (s = 0, c = this.material.length; s < c; s++) h.push(r(t.materials, this.material[s]));
                    i.material = h
                } else i.material = r(t.materials, this.material);
            if (this.children.length > 0)
                for (i.children = [], s = 0; s < this.children.length; s++) i.children.push(this.children[s].toJSON(t).object);
            if (e) {
                var u = m(t.geometries),
                    p = m(t.materials),
                    d = m(t.textures),
                    f = m(t.images);
                o = m(t.shapes), u.length > 0 && (n.geometries = u), p.length > 0 && (n.materials = p), d.length > 0 && (n.textures = d), f.length > 0 && (n.images = f), o.length > 0 && (n.shapes = o)
            }
            return n.object = i, n;

            function m(t) {
                var e = [];
                for (var n in t) {
                    var i = t[n];
                    delete i.metadata, e.push(i)
                }
                return e
            }
        },
        clone: function(t) {
            return (new this.constructor).copy(this, t)
        },
        copy: function(t, e) {
            if (void 0 === e && (e = !0), this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.userData = JSON.parse(JSON.stringify(t.userData)), !0 === e)
                for (var n = 0; n < t.children.length; n++) {
                    var i = t.children[n];
                    this.add(i.clone())
                }
            return this
        }
    }), pn.prototype = Object.assign(Object.create(un.prototype), {
        constructor: pn,
        isCamera: !0,
        copy: function(t, e) {
            return un.prototype.copy.call(this, t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this
        },
        getWorldDirection: function() {
            var t = new Fe;
            return function(e) {
                return void 0 === e && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), e = new He), this.getWorldQuaternion(t), e.set(0, 0, -1).applyQuaternion(t)
            }
        }(),
        updateMatrixWorld: function(t) {
            un.prototype.updateMatrixWorld.call(this, t), this.matrixWorldInverse.getInverse(this.matrixWorld)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        }
    }), dn.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: dn,
        isOrthographicCamera: !0,
        copy: function(t, e) {
            return pn.prototype.copy.call(this, t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = null === t.view ? null : Object.assign({}, t.view), this
        },
        setViewOffset: function(t, e, n, i, r, a) {
            null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix()
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix()
        },
        updateProjectionMatrix: function() {
            var t = (this.right - this.left) / (2 * this.zoom),
                e = (this.top - this.bottom) / (2 * this.zoom),
                n = (this.right + this.left) / 2,
                i = (this.top + this.bottom) / 2,
                r = n - t,
                a = n + t,
                o = i + e,
                s = i - e;
            if (null !== this.view && this.view.enabled) {
                var c = this.zoom / (this.view.width / this.view.fullWidth),
                    l = this.zoom / (this.view.height / this.view.fullHeight),
                    h = (this.right - this.left) / this.view.width,
                    u = (this.top - this.bottom) / this.view.height;
                a = (r += h * (this.view.offsetX / c)) + h * (this.view.width / c), s = (o -= u * (this.view.offsetY / l)) - u * (this.view.height / l)
            }
            this.projectionMatrix.makeOrthographic(r, a, o, s, this.near, this.far)
        },
        toJSON: function(t) {
            var e = un.prototype.toJSON.call(this, t);
            return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, null !== this.view && (e.object.view = Object.assign({}, this.view)), e
        }
    }), Object.assign(fn.prototype, {
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            this.a = t.a, this.b = t.b, this.c = t.c, this.normal.copy(t.normal), this.color.copy(t.color), this.materialIndex = t.materialIndex;
            for (var e = 0, n = t.vertexNormals.length; e < n; e++) this.vertexNormals[e] = t.vertexNormals[e].clone();
            for (e = 0, n = t.vertexColors.length; e < n; e++) this.vertexColors[e] = t.vertexColors[e].clone();
            return this
        }
    });
    var mn = 0;

    function gn() {
        Object.defineProperty(this, "id", {
            value: mn += 2
        }), this.uuid = ke.generateUUID(), this.name = "", this.type = "Geometry", this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [
            []
        ], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.elementsNeedUpdate = !1, this.verticesNeedUpdate = !1, this.uvsNeedUpdate = !1, this.normalsNeedUpdate = !1, this.colorsNeedUpdate = !1, this.lineDistancesNeedUpdate = !1, this.groupsNeedUpdate = !1
    }

    function vn(t, e, n) {
        if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.name = "", this.array = t, this.itemSize = e, this.count = void 0 !== t ? t.length / e : 0, this.normalized = !0 === n, this.dynamic = !1, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0
    }

    function yn(t, e, n) {
        vn.call(this, new Int8Array(t), e, n)
    }

    function xn(t, e, n) {
        vn.call(this, new Uint8Array(t), e, n)
    }

    function wn(t, e, n) {
        vn.call(this, new Uint8ClampedArray(t), e, n)
    }

    function bn(t, e, n) {
        vn.call(this, new Int16Array(t), e, n)
    }

    function Mn(t, e, n) {
        vn.call(this, new Uint16Array(t), e, n)
    }

    function _n(t, e, n) {
        vn.call(this, new Int32Array(t), e, n)
    }

    function Sn(t, e, n) {
        vn.call(this, new Uint32Array(t), e, n)
    }

    function En(t, e, n) {
        vn.call(this, new Float32Array(t), e, n)
    }

    function Tn(t, e, n) {
        vn.call(this, new Float64Array(t), e, n)
    }

    function An() {
        this.vertices = [], this.normals = [], this.colors = [], this.uvs = [], this.uvs2 = [], this.groups = [], this.morphTargets = {}, this.skinWeights = [], this.skinIndices = [], this.boundingBox = null, this.boundingSphere = null, this.verticesNeedUpdate = !1, this.normalsNeedUpdate = !1, this.colorsNeedUpdate = !1, this.uvsNeedUpdate = !1, this.groupsNeedUpdate = !1
    }

    function Ln(t) {
        if (0 === t.length) return -1 / 0;
        for (var e = t[0], n = 1, i = t.length; n < i; ++n) t[n] > e && (e = t[n]);
        return e
    }
    gn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: gn,
        isGeometry: !0,
        applyMatrix: function(t) {
            for (var e = (new Ge).getNormalMatrix(t), n = 0, i = this.vertices.length; n < i; n++) this.vertices[n].applyMatrix4(t);
            for (n = 0, i = this.faces.length; n < i; n++) {
                var r = this.faces[n];
                r.normal.applyMatrix3(e).normalize();
                for (var a = 0, o = r.vertexNormals.length; a < o; a++) r.vertexNormals[a].applyMatrix3(e).normalize()
            }
            return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this.verticesNeedUpdate = !0, this.normalsNeedUpdate = !0, this
        },
        rotateX: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationX(e), this.applyMatrix(t), this
            }
        }(),
        rotateY: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationY(e), this.applyMatrix(t), this
            }
        }(),
        rotateZ: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationZ(e), this.applyMatrix(t), this
            }
        }(),
        translate: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeTranslation(e, n, i), this.applyMatrix(t), this
            }
        }(),
        scale: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeScale(e, n, i), this.applyMatrix(t), this
            }
        }(),
        lookAt: function() {
            var t = new un;
            return function(e) {
                t.lookAt(e), t.updateMatrix(), this.applyMatrix(t.matrix)
            }
        }(),
        fromBufferGeometry: function(t) {
            var e = this,
                n = null !== t.index ? t.index.array : void 0,
                i = t.attributes,
                r = i.position.array,
                a = void 0 !== i.normal ? i.normal.array : void 0,
                o = void 0 !== i.color ? i.color.array : void 0,
                s = void 0 !== i.uv ? i.uv.array : void 0,
                c = void 0 !== i.uv2 ? i.uv2.array : void 0;
            void 0 !== c && (this.faceVertexUvs[1] = []);
            for (var l = [], h = [], u = [], p = 0, d = 0; p < r.length; p += 3, d += 2) e.vertices.push(new He(r[p], r[p + 1], r[p + 2])), void 0 !== a && l.push(new He(a[p], a[p + 1], a[p + 2])), void 0 !== o && e.colors.push(new rn(o[p], o[p + 1], o[p + 2])), void 0 !== s && h.push(new Ue(s[d], s[d + 1])), void 0 !== c && u.push(new Ue(c[d], c[d + 1]));

            function f(t, n, i, r) {
                var p = new fn(t, n, i, void 0 !== a ? [l[t].clone(), l[n].clone(), l[i].clone()] : [], void 0 !== o ? [e.colors[t].clone(), e.colors[n].clone(), e.colors[i].clone()] : [], r);
                e.faces.push(p), void 0 !== s && e.faceVertexUvs[0].push([h[t].clone(), h[n].clone(), h[i].clone()]), void 0 !== c && e.faceVertexUvs[1].push([u[t].clone(), u[n].clone(), u[i].clone()])
            }
            var m = t.groups;
            if (m.length > 0)
                for (p = 0; p < m.length; p++)
                    for (var g = m[p], v = g.start, y = (d = v, v + g.count); d < y; d += 3) void 0 !== n ? f(n[d], n[d + 1], n[d + 2], g.materialIndex) : f(d, d + 1, d + 2, g.materialIndex);
            else if (void 0 !== n)
                for (p = 0; p < n.length; p += 3) f(n[p], n[p + 1], n[p + 2]);
            else
                for (p = 0; p < r.length / 3; p += 3) f(p, p + 1, p + 2);
            return this.computeFaceNormals(), null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()), null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), this
        },
        center: function() {
            var t = new He;
            return function() {
                return this.computeBoundingBox(), this.boundingBox.getCenter(t).negate(), this.translate(t.x, t.y, t.z), this
            }
        }(),
        normalize: function() {
            this.computeBoundingSphere();
            var t = this.boundingSphere.center,
                e = this.boundingSphere.radius,
                n = 0 === e ? 1 : 1 / e,
                i = new ze;
            return i.set(n, 0, 0, -n * t.x, 0, n, 0, -n * t.y, 0, 0, n, -n * t.z, 0, 0, 0, 1), this.applyMatrix(i), this
        },
        computeFaceNormals: function() {
            for (var t = new He, e = new He, n = 0, i = this.faces.length; n < i; n++) {
                var r = this.faces[n],
                    a = this.vertices[r.a],
                    o = this.vertices[r.b],
                    s = this.vertices[r.c];
                t.subVectors(s, o), e.subVectors(a, o), t.cross(e), t.normalize(), r.normal.copy(t)
            }
        },
        computeVertexNormals: function(t) {
            var e, n, i, r, a, o;
            for (void 0 === t && (t = !0), o = new Array(this.vertices.length), e = 0, n = this.vertices.length; e < n; e++) o[e] = new He;
            if (t) {
                var s, c, l, h = new He,
                    u = new He;
                for (i = 0, r = this.faces.length; i < r; i++) a = this.faces[i], s = this.vertices[a.a], c = this.vertices[a.b], l = this.vertices[a.c], h.subVectors(l, c), u.subVectors(s, c), h.cross(u), o[a.a].add(h), o[a.b].add(h), o[a.c].add(h)
            } else
                for (this.computeFaceNormals(), i = 0, r = this.faces.length; i < r; i++) o[(a = this.faces[i]).a].add(a.normal), o[a.b].add(a.normal), o[a.c].add(a.normal);
            for (e = 0, n = this.vertices.length; e < n; e++) o[e].normalize();
            for (i = 0, r = this.faces.length; i < r; i++) {
                var p = (a = this.faces[i]).vertexNormals;
                3 === p.length ? (p[0].copy(o[a.a]), p[1].copy(o[a.b]), p[2].copy(o[a.c])) : (p[0] = o[a.a].clone(), p[1] = o[a.b].clone(), p[2] = o[a.c].clone())
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0)
        },
        computeFlatVertexNormals: function() {
            var t, e, n;
            for (this.computeFaceNormals(), t = 0, e = this.faces.length; t < e; t++) {
                var i = (n = this.faces[t]).vertexNormals;
                3 === i.length ? (i[0].copy(n.normal), i[1].copy(n.normal), i[2].copy(n.normal)) : (i[0] = n.normal.clone(), i[1] = n.normal.clone(), i[2] = n.normal.clone())
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0)
        },
        computeMorphNormals: function() {
            var t, e, n, i, r;
            for (n = 0, i = this.faces.length; n < i; n++)
                for ((r = this.faces[n]).__originalFaceNormal ? r.__originalFaceNormal.copy(r.normal) : r.__originalFaceNormal = r.normal.clone(), r.__originalVertexNormals || (r.__originalVertexNormals = []), t = 0, e = r.vertexNormals.length; t < e; t++) r.__originalVertexNormals[t] ? r.__originalVertexNormals[t].copy(r.vertexNormals[t]) : r.__originalVertexNormals[t] = r.vertexNormals[t].clone();
            var a = new gn;
            for (a.faces = this.faces, t = 0, e = this.morphTargets.length; t < e; t++) {
                if (!this.morphNormals[t]) {
                    this.morphNormals[t] = {}, this.morphNormals[t].faceNormals = [], this.morphNormals[t].vertexNormals = [];
                    var o = this.morphNormals[t].faceNormals,
                        s = this.morphNormals[t].vertexNormals;
                    for (n = 0, i = this.faces.length; n < i; n++) c = new He, l = {
                        a: new He,
                        b: new He,
                        c: new He
                    }, o.push(c), s.push(l)
                }
                var c, l, h = this.morphNormals[t];
                for (a.vertices = this.morphTargets[t].vertices, a.computeFaceNormals(), a.computeVertexNormals(), n = 0, i = this.faces.length; n < i; n++) r = this.faces[n], c = h.faceNormals[n], l = h.vertexNormals[n], c.copy(r.normal), l.a.copy(r.vertexNormals[0]), l.b.copy(r.vertexNormals[1]), l.c.copy(r.vertexNormals[2])
            }
            for (n = 0, i = this.faces.length; n < i; n++)(r = this.faces[n]).normal = r.__originalFaceNormal, r.vertexNormals = r.__originalVertexNormals
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Ke), this.boundingBox.setFromPoints(this.vertices)
        },
        computeBoundingSphere: function() {
            null === this.boundingSphere && (this.boundingSphere = new Je), this.boundingSphere.setFromPoints(this.vertices)
        },
        merge: function(t, e, n) {
            if (t && t.isGeometry) {
                var i, r = this.vertices.length,
                    a = this.vertices,
                    o = t.vertices,
                    s = this.faces,
                    c = t.faces,
                    l = this.faceVertexUvs[0],
                    h = t.faceVertexUvs[0],
                    u = this.colors,
                    p = t.colors;
                void 0 === n && (n = 0), void 0 !== e && (i = (new Ge).getNormalMatrix(e));
                for (var d = 0, f = o.length; d < f; d++) {
                    var m = o[d].clone();
                    void 0 !== e && m.applyMatrix4(e), a.push(m)
                }
                for (d = 0, f = p.length; d < f; d++) u.push(p[d].clone());
                for (d = 0, f = c.length; d < f; d++) {
                    var g, v, y, x = c[d],
                        w = x.vertexNormals,
                        b = x.vertexColors;
                    (g = new fn(x.a + r, x.b + r, x.c + r)).normal.copy(x.normal), void 0 !== i && g.normal.applyMatrix3(i).normalize();
                    for (var M = 0, _ = w.length; M < _; M++) v = w[M].clone(), void 0 !== i && v.applyMatrix3(i).normalize(), g.vertexNormals.push(v);
                    for (g.color.copy(x.color), M = 0, _ = b.length; M < _; M++) y = b[M], g.vertexColors.push(y.clone());
                    g.materialIndex = x.materialIndex + n, s.push(g)
                }
                for (d = 0, f = h.length; d < f; d++) {
                    var S = h[d],
                        E = [];
                    if (void 0 !== S) {
                        for (M = 0, _ = S.length; M < _; M++) E.push(S[M].clone());
                        l.push(E)
                    }
                }
            } else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", t)
        },
        mergeMesh: function(t) {
            t && t.isMesh ? (t.matrixAutoUpdate && t.updateMatrix(), this.merge(t.geometry, t.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", t)
        },
        mergeVertices: function() {
            var t, e, n, i, r, a, o, s, c = {},
                l = [],
                h = [],
                u = Math.pow(10, 4);
            for (n = 0, i = this.vertices.length; n < i; n++) t = this.vertices[n], void 0 === c[e = Math.round(t.x * u) + "_" + Math.round(t.y * u) + "_" + Math.round(t.z * u)] ? (c[e] = n, l.push(this.vertices[n]), h[n] = l.length - 1) : h[n] = h[c[e]];
            var p = [];
            for (n = 0, i = this.faces.length; n < i; n++) {
                (r = this.faces[n]).a = h[r.a], r.b = h[r.b], r.c = h[r.c], a = [r.a, r.b, r.c];
                for (var d = 0; d < 3; d++)
                    if (a[d] === a[(d + 1) % 3]) {
                        p.push(n);
                        break
                    }
            }
            for (n = p.length - 1; n >= 0; n--) {
                var f = p[n];
                for (this.faces.splice(f, 1), o = 0, s = this.faceVertexUvs.length; o < s; o++) this.faceVertexUvs[o].splice(f, 1)
            }
            var m = this.vertices.length - l.length;
            return this.vertices = l, m
        },
        setFromPoints: function(t) {
            this.vertices = [];
            for (var e = 0, n = t.length; e < n; e++) {
                var i = t[e];
                this.vertices.push(new He(i.x, i.y, i.z || 0))
            }
            return this
        },
        sortFacesByMaterialIndex: function() {
            for (var t = this.faces, e = t.length, n = 0; n < e; n++) t[n]._id = n;
            t.sort(function(t, e) {
                return t.materialIndex - e.materialIndex
            });
            var i, r, a = this.faceVertexUvs[0],
                o = this.faceVertexUvs[1];
            for (a && a.length === e && (i = []), o && o.length === e && (r = []), n = 0; n < e; n++) {
                var s = t[n]._id;
                i && i.push(a[s]), r && r.push(o[s])
            }
            i && (this.faceVertexUvs[0] = i), r && (this.faceVertexUvs[1] = r)
        },
        toJSON: function() {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "Geometry",
                    generator: "Geometry.toJSON"
                }
            };
            if (t.uuid = this.uuid, t.type = this.type, "" !== this.name && (t.name = this.name), void 0 !== this.parameters) {
                var e = this.parameters;
                for (var n in e) void 0 !== e[n] && (t[n] = e[n]);
                return t
            }
            for (var i = [], r = 0; r < this.vertices.length; r++) {
                var a = this.vertices[r];
                i.push(a.x, a.y, a.z)
            }
            var o = [],
                s = [],
                c = {},
                l = [],
                h = {},
                u = [],
                p = {};
            for (r = 0; r < this.faces.length; r++) {
                var d = this.faces[r],
                    f = void 0 !== this.faceVertexUvs[0][r],
                    m = d.normal.length() > 0,
                    g = d.vertexNormals.length > 0,
                    v = 1 !== d.color.r || 1 !== d.color.g || 1 !== d.color.b,
                    y = d.vertexColors.length > 0,
                    x = 0;
                if (x = _(x = _(x = _(x = _(x = _(x = _(x = _(x = _(x, 0, 0), 1, !0), 2, !1), 3, f), 4, m), 5, g), 6, v), 7, y), o.push(x), o.push(d.a, d.b, d.c), o.push(d.materialIndex), f) {
                    var w = this.faceVertexUvs[0][r];
                    o.push(T(w[0]), T(w[1]), T(w[2]))
                }
                if (m && o.push(S(d.normal)), g) {
                    var b = d.vertexNormals;
                    o.push(S(b[0]), S(b[1]), S(b[2]))
                }
                if (v && o.push(E(d.color)), y) {
                    var M = d.vertexColors;
                    o.push(E(M[0]), E(M[1]), E(M[2]))
                }
            }

            function _(t, e, n) {
                return n ? t | 1 << e : t & ~(1 << e)
            }

            function S(t) {
                var e = t.x.toString() + t.y.toString() + t.z.toString();
                return void 0 !== c[e] ? c[e] : (c[e] = s.length / 3, s.push(t.x, t.y, t.z), c[e])
            }

            function E(t) {
                var e = t.r.toString() + t.g.toString() + t.b.toString();
                return void 0 !== h[e] ? h[e] : (h[e] = l.length, l.push(t.getHex()), h[e])
            }

            function T(t) {
                var e = t.x.toString() + t.y.toString();
                return void 0 !== p[e] ? p[e] : (p[e] = u.length / 2, u.push(t.x, t.y), p[e])
            }
            return t.data = {}, t.data.vertices = i, t.data.normals = s, l.length > 0 && (t.data.colors = l), u.length > 0 && (t.data.uvs = [u]), t.data.faces = o, t
        },
        clone: function() {
            return (new gn).copy(this)
        },
        copy: function(t) {
            var e, n, i, r, a, o;
            this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [
                []
            ], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.name = t.name;
            var s = t.vertices;
            for (e = 0, n = s.length; e < n; e++) this.vertices.push(s[e].clone());
            var c = t.colors;
            for (e = 0, n = c.length; e < n; e++) this.colors.push(c[e].clone());
            var l = t.faces;
            for (e = 0, n = l.length; e < n; e++) this.faces.push(l[e].clone());
            for (e = 0, n = t.faceVertexUvs.length; e < n; e++) {
                var h = t.faceVertexUvs[e];
                for (void 0 === this.faceVertexUvs[e] && (this.faceVertexUvs[e] = []), i = 0, r = h.length; i < r; i++) {
                    var u = h[i],
                        p = [];
                    for (a = 0, o = u.length; a < o; a++) {
                        var d = u[a];
                        p.push(d.clone())
                    }
                    this.faceVertexUvs[e].push(p)
                }
            }
            var f = t.morphTargets;
            for (e = 0, n = f.length; e < n; e++) {
                var m = {};
                if (m.name = f[e].name, void 0 !== f[e].vertices)
                    for (m.vertices = [], i = 0, r = f[e].vertices.length; i < r; i++) m.vertices.push(f[e].vertices[i].clone());
                if (void 0 !== f[e].normals)
                    for (m.normals = [], i = 0, r = f[e].normals.length; i < r; i++) m.normals.push(f[e].normals[i].clone());
                this.morphTargets.push(m)
            }
            var g = t.morphNormals;
            for (e = 0, n = g.length; e < n; e++) {
                var v = {};
                if (void 0 !== g[e].vertexNormals)
                    for (v.vertexNormals = [], i = 0, r = g[e].vertexNormals.length; i < r; i++) {
                        var y = g[e].vertexNormals[i],
                            x = {};
                        x.a = y.a.clone(), x.b = y.b.clone(), x.c = y.c.clone(), v.vertexNormals.push(x)
                    }
                if (void 0 !== g[e].faceNormals)
                    for (v.faceNormals = [], i = 0, r = g[e].faceNormals.length; i < r; i++) v.faceNormals.push(g[e].faceNormals[i].clone());
                this.morphNormals.push(v)
            }
            var w = t.skinWeights;
            for (e = 0, n = w.length; e < n; e++) this.skinWeights.push(w[e].clone());
            var b = t.skinIndices;
            for (e = 0, n = b.length; e < n; e++) this.skinIndices.push(b[e].clone());
            var M = t.lineDistances;
            for (e = 0, n = M.length; e < n; e++) this.lineDistances.push(M[e]);
            var _ = t.boundingBox;
            null !== _ && (this.boundingBox = _.clone());
            var S = t.boundingSphere;
            return null !== S && (this.boundingSphere = S.clone()), this.elementsNeedUpdate = t.elementsNeedUpdate, this.verticesNeedUpdate = t.verticesNeedUpdate, this.uvsNeedUpdate = t.uvsNeedUpdate, this.normalsNeedUpdate = t.normalsNeedUpdate, this.colorsNeedUpdate = t.colorsNeedUpdate, this.lineDistancesNeedUpdate = t.lineDistancesNeedUpdate, this.groupsNeedUpdate = t.groupsNeedUpdate, this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }), Object.defineProperty(vn.prototype, "needsUpdate", {
        set: function(t) {
            !0 === t && this.version++
        }
    }), Object.assign(vn.prototype, {
        isBufferAttribute: !0,
        onUploadCallback: function() {},
        setArray: function(t) {
            if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            return this.count = void 0 !== t ? t.length / this.itemSize : 0, this.array = t, this
        },
        setDynamic: function(t) {
            return this.dynamic = t, this
        },
        copy: function(t) {
            return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.dynamic = t.dynamic, this
        },
        copyAt: function(t, e, n) {
            t *= this.itemSize, n *= e.itemSize;
            for (var i = 0, r = this.itemSize; i < r; i++) this.array[t + i] = e.array[n + i];
            return this
        },
        copyArray: function(t) {
            return this.array.set(t), this
        },
        copyColorsArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var a = t[i];
                void 0 === a && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i), a = new rn), e[n++] = a.r, e[n++] = a.g, e[n++] = a.b
            }
            return this
        },
        copyVector2sArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var a = t[i];
                void 0 === a && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i), a = new Ue), e[n++] = a.x, e[n++] = a.y
            }
            return this
        },
        copyVector3sArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var a = t[i];
                void 0 === a && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i), a = new He), e[n++] = a.x, e[n++] = a.y, e[n++] = a.z
            }
            return this
        },
        copyVector4sArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var a = t[i];
                void 0 === a && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i), a = new Ye), e[n++] = a.x, e[n++] = a.y, e[n++] = a.z, e[n++] = a.w
            }
            return this
        },
        set: function(t, e) {
            return void 0 === e && (e = 0), this.array.set(t, e), this
        },
        getX: function(t) {
            return this.array[t * this.itemSize]
        },
        setX: function(t, e) {
            return this.array[t * this.itemSize] = e, this
        },
        getY: function(t) {
            return this.array[t * this.itemSize + 1]
        },
        setY: function(t, e) {
            return this.array[t * this.itemSize + 1] = e, this
        },
        getZ: function(t) {
            return this.array[t * this.itemSize + 2]
        },
        setZ: function(t, e) {
            return this.array[t * this.itemSize + 2] = e, this
        },
        getW: function(t) {
            return this.array[t * this.itemSize + 3]
        },
        setW: function(t, e) {
            return this.array[t * this.itemSize + 3] = e, this
        },
        setXY: function(t, e, n) {
            return t *= this.itemSize, this.array[t + 0] = e, this.array[t + 1] = n, this
        },
        setXYZ: function(t, e, n, i) {
            return t *= this.itemSize, this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this
        },
        setXYZW: function(t, e, n, i, r) {
            return t *= this.itemSize, this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this.array[t + 3] = r, this
        },
        onUpload: function(t) {
            return this.onUploadCallback = t, this
        },
        clone: function() {
            return new this.constructor(this.array, this.itemSize).copy(this)
        }
    }), yn.prototype = Object.create(vn.prototype), yn.prototype.constructor = yn, xn.prototype = Object.create(vn.prototype), xn.prototype.constructor = xn, wn.prototype = Object.create(vn.prototype), wn.prototype.constructor = wn, bn.prototype = Object.create(vn.prototype), bn.prototype.constructor = bn, Mn.prototype = Object.create(vn.prototype), Mn.prototype.constructor = Mn, _n.prototype = Object.create(vn.prototype), _n.prototype.constructor = _n, Sn.prototype = Object.create(vn.prototype), Sn.prototype.constructor = Sn, En.prototype = Object.create(vn.prototype), En.prototype.constructor = En, Tn.prototype = Object.create(vn.prototype), Tn.prototype.constructor = Tn, Object.assign(An.prototype, {
        computeGroups: function(t) {
            for (var e, n = [], i = void 0, r = t.faces, a = 0; a < r.length; a++) {
                var o = r[a];
                o.materialIndex !== i && (i = o.materialIndex, void 0 !== e && (e.count = 3 * a - e.start, n.push(e)), e = {
                    start: 3 * a,
                    materialIndex: i
                })
            }
            void 0 !== e && (e.count = 3 * a - e.start, n.push(e)), this.groups = n
        },
        fromGeometry: function(t) {
            var e, n = t.faces,
                i = t.vertices,
                r = t.faceVertexUvs,
                a = r[0] && r[0].length > 0,
                o = r[1] && r[1].length > 0,
                s = t.morphTargets,
                c = s.length;
            if (c > 0) {
                e = [];
                for (var l = 0; l < c; l++) e[l] = [];
                this.morphTargets.position = e
            }
            var h, u = t.morphNormals,
                p = u.length;
            if (p > 0) {
                for (h = [], l = 0; l < p; l++) h[l] = [];
                this.morphTargets.normal = h
            }
            var d = t.skinIndices,
                f = t.skinWeights,
                m = d.length === i.length,
                g = f.length === i.length;
            for (i.length > 0 && 0 === n.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported."), l = 0; l < n.length; l++) {
                var v = n[l];
                this.vertices.push(i[v.a], i[v.b], i[v.c]);
                var y = v.vertexNormals;
                if (3 === y.length) this.normals.push(y[0], y[1], y[2]);
                else {
                    var x = v.normal;
                    this.normals.push(x, x, x)
                }
                var w, b = v.vertexColors;
                if (3 === b.length) this.colors.push(b[0], b[1], b[2]);
                else {
                    var M = v.color;
                    this.colors.push(M, M, M)
                }!0 === a && (void 0 !== (w = r[0][l]) ? this.uvs.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", l), this.uvs.push(new Ue, new Ue, new Ue))), !0 === o && (void 0 !== (w = r[1][l]) ? this.uvs2.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", l), this.uvs2.push(new Ue, new Ue, new Ue)));
                for (var _ = 0; _ < c; _++) {
                    var S = s[_].vertices;
                    e[_].push(S[v.a], S[v.b], S[v.c])
                }
                for (_ = 0; _ < p; _++) {
                    var E = u[_].vertexNormals[l];
                    h[_].push(E.a, E.b, E.c)
                }
                m && this.skinIndices.push(d[v.a], d[v.b], d[v.c]), g && this.skinWeights.push(f[v.a], f[v.b], f[v.c])
            }
            return this.computeGroups(t), this.verticesNeedUpdate = t.verticesNeedUpdate, this.normalsNeedUpdate = t.normalsNeedUpdate, this.colorsNeedUpdate = t.colorsNeedUpdate, this.uvsNeedUpdate = t.uvsNeedUpdate, this.groupsNeedUpdate = t.groupsNeedUpdate, this
        }
    });
    var Rn = 1;

    function Pn() {
        Object.defineProperty(this, "id", {
            value: Rn += 2
        }), this.uuid = ke.generateUUID(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
            start: 0,
            count: 1 / 0
        }, this.userData = {}
    }

    function Cn(t, e, n, i, r, a) {
        gn.call(this), this.type = "BoxGeometry", this.parameters = {
            width: t,
            height: e,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: a
        }, this.fromBufferGeometry(new In(t, e, n, i, r, a)), this.mergeVertices()
    }

    function In(t, e, n, i, r, a) {
        Pn.call(this), this.type = "BoxBufferGeometry", this.parameters = {
            width: t,
            height: e,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: a
        };
        var o = this;
        t = t || 1, e = e || 1, n = n || 1, i = Math.floor(i) || 1, r = Math.floor(r) || 1;
        var s = [],
            c = [],
            l = [],
            h = [],
            u = 0,
            p = 0;

        function d(t, e, n, i, r, a, d, f, m, g, v) {
            var y, x, w = a / m,
                b = d / g,
                M = a / 2,
                _ = d / 2,
                S = f / 2,
                E = m + 1,
                T = g + 1,
                A = 0,
                L = 0,
                R = new He;
            for (x = 0; x < T; x++) {
                var P = x * b - _;
                for (y = 0; y < E; y++) {
                    var C = y * w - M;
                    R[t] = C * i, R[e] = P * r, R[n] = S, c.push(R.x, R.y, R.z), R[t] = 0, R[e] = 0, R[n] = f > 0 ? 1 : -1, l.push(R.x, R.y, R.z), h.push(y / m), h.push(1 - x / g), A += 1
                }
            }
            for (x = 0; x < g; x++)
                for (y = 0; y < m; y++) {
                    var I = u + y + E * x,
                        O = u + y + E * (x + 1),
                        D = u + (y + 1) + E * (x + 1),
                        B = u + (y + 1) + E * x;
                    s.push(I, O, B), s.push(O, D, B), L += 6
                }
            o.addGroup(p, L, v), p += L, u += A
        }
        d("z", "y", "x", -1, -1, n, e, t, a = Math.floor(a) || 1, r, 0), d("z", "y", "x", 1, -1, n, e, -t, a, r, 1), d("x", "z", "y", 1, 1, t, n, e, i, a, 2), d("x", "z", "y", 1, -1, t, n, -e, i, a, 3), d("x", "y", "z", 1, -1, t, e, n, i, r, 4), d("x", "y", "z", -1, -1, t, e, -n, i, r, 5), this.setIndex(s), this.addAttribute("position", new En(c, 3)), this.addAttribute("normal", new En(l, 3)), this.addAttribute("uv", new En(h, 2))
    }

    function On(t, e, n, i) {
        gn.call(this), this.type = "PlaneGeometry", this.parameters = {
            width: t,
            height: e,
            widthSegments: n,
            heightSegments: i
        }, this.fromBufferGeometry(new Dn(t, e, n, i)), this.mergeVertices()
    }

    function Dn(t, e, n, i) {
        Pn.call(this), this.type = "PlaneBufferGeometry", this.parameters = {
            width: t,
            height: e,
            widthSegments: n,
            heightSegments: i
        };
        var r, a, o = (t = t || 1) / 2,
            s = (e = e || 1) / 2,
            c = Math.floor(n) || 1,
            l = Math.floor(i) || 1,
            h = c + 1,
            u = l + 1,
            p = t / c,
            d = e / l,
            f = [],
            m = [],
            g = [],
            v = [];
        for (a = 0; a < u; a++) {
            var y = a * d - s;
            for (r = 0; r < h; r++) {
                var x = r * p - o;
                m.push(x, -y, 0), g.push(0, 0, 1), v.push(r / c), v.push(1 - a / l)
            }
        }
        for (a = 0; a < l; a++)
            for (r = 0; r < c; r++) {
                var w = r + h * a,
                    b = r + h * (a + 1),
                    M = r + 1 + h * (a + 1),
                    _ = r + 1 + h * a;
                f.push(w, b, _), f.push(b, M, _)
            }
        this.setIndex(f), this.addAttribute("position", new En(m, 3)), this.addAttribute("normal", new En(g, 3)), this.addAttribute("uv", new En(v, 2))
    }
    Pn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: Pn,
        isBufferGeometry: !0,
        getIndex: function() {
            return this.index
        },
        setIndex: function(t) {
            Array.isArray(t) ? this.index = new(Ln(t) > 65535 ? Sn : Mn)(t, 1) : this.index = t
        },
        addAttribute: function(t, e) {
            return e && e.isBufferAttribute || e && e.isInterleavedBufferAttribute ? "index" === t ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e), this) : (this.attributes[t] = e, this) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(t, new vn(arguments[1], arguments[2])))
        },
        getAttribute: function(t) {
            return this.attributes[t]
        },
        removeAttribute: function(t) {
            return delete this.attributes[t], this
        },
        addGroup: function(t, e, n) {
            this.groups.push({
                start: t,
                count: e,
                materialIndex: void 0 !== n ? n : 0
            })
        },
        clearGroups: function() {
            this.groups = []
        },
        setDrawRange: function(t, e) {
            this.drawRange.start = t, this.drawRange.count = e
        },
        applyMatrix: function(t) {
            var e = this.attributes.position;
            void 0 !== e && (t.applyToBufferAttribute(e), e.needsUpdate = !0);
            var n = this.attributes.normal;
            return void 0 !== n && ((new Ge).getNormalMatrix(t).applyToBufferAttribute(n), n.needsUpdate = !0), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this
        },
        rotateX: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationX(e), this.applyMatrix(t), this
            }
        }(),
        rotateY: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationY(e), this.applyMatrix(t), this
            }
        }(),
        rotateZ: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationZ(e), this.applyMatrix(t), this
            }
        }(),
        translate: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeTranslation(e, n, i), this.applyMatrix(t), this
            }
        }(),
        scale: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeScale(e, n, i), this.applyMatrix(t), this
            }
        }(),
        lookAt: function() {
            var t = new un;
            return function(e) {
                t.lookAt(e), t.updateMatrix(), this.applyMatrix(t.matrix)
            }
        }(),
        center: function() {
            var t = new He;
            return function() {
                return this.computeBoundingBox(), this.boundingBox.getCenter(t).negate(), this.translate(t.x, t.y, t.z), this
            }
        }(),
        setFromObject: function(t) {
            var e = t.geometry;
            if (t.isPoints || t.isLine) {
                var n = new En(3 * e.vertices.length, 3),
                    i = new En(3 * e.colors.length, 3);
                if (this.addAttribute("position", n.copyVector3sArray(e.vertices)), this.addAttribute("color", i.copyColorsArray(e.colors)), e.lineDistances && e.lineDistances.length === e.vertices.length) {
                    var r = new En(e.lineDistances.length, 1);
                    this.addAttribute("lineDistance", r.copyArray(e.lineDistances))
                }
                null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()), null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone())
            } else t.isMesh && e && e.isGeometry && this.fromGeometry(e);
            return this
        },
        setFromPoints: function(t) {
            for (var e = [], n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                e.push(r.x, r.y, r.z || 0)
            }
            return this.addAttribute("position", new En(e, 3)), this
        },
        updateFromObject: function(t) {
            var e, n = t.geometry;
            if (t.isMesh) {
                var i = n.__directGeometry;
                if (!0 === n.elementsNeedUpdate && (i = void 0, n.elementsNeedUpdate = !1), void 0 === i) return this.fromGeometry(n);
                i.verticesNeedUpdate = n.verticesNeedUpdate, i.normalsNeedUpdate = n.normalsNeedUpdate, i.colorsNeedUpdate = n.colorsNeedUpdate, i.uvsNeedUpdate = n.uvsNeedUpdate, i.groupsNeedUpdate = n.groupsNeedUpdate, n.verticesNeedUpdate = !1, n.normalsNeedUpdate = !1, n.colorsNeedUpdate = !1, n.uvsNeedUpdate = !1, n.groupsNeedUpdate = !1, n = i
            }
            return !0 === n.verticesNeedUpdate && (void 0 !== (e = this.attributes.position) && (e.copyVector3sArray(n.vertices), e.needsUpdate = !0), n.verticesNeedUpdate = !1), !0 === n.normalsNeedUpdate && (void 0 !== (e = this.attributes.normal) && (e.copyVector3sArray(n.normals), e.needsUpdate = !0), n.normalsNeedUpdate = !1), !0 === n.colorsNeedUpdate && (void 0 !== (e = this.attributes.color) && (e.copyColorsArray(n.colors), e.needsUpdate = !0), n.colorsNeedUpdate = !1), n.uvsNeedUpdate && (void 0 !== (e = this.attributes.uv) && (e.copyVector2sArray(n.uvs), e.needsUpdate = !0), n.uvsNeedUpdate = !1), n.lineDistancesNeedUpdate && (void 0 !== (e = this.attributes.lineDistance) && (e.copyArray(n.lineDistances), e.needsUpdate = !0), n.lineDistancesNeedUpdate = !1), n.groupsNeedUpdate && (n.computeGroups(t.geometry), this.groups = n.groups, n.groupsNeedUpdate = !1), this
        },
        fromGeometry: function(t) {
            return t.__directGeometry = (new An).fromGeometry(t), this.fromDirectGeometry(t.__directGeometry)
        },
        fromDirectGeometry: function(t) {
            var e = new Float32Array(3 * t.vertices.length);
            if (this.addAttribute("position", new vn(e, 3).copyVector3sArray(t.vertices)), t.normals.length > 0) {
                var n = new Float32Array(3 * t.normals.length);
                this.addAttribute("normal", new vn(n, 3).copyVector3sArray(t.normals))
            }
            if (t.colors.length > 0) {
                var i = new Float32Array(3 * t.colors.length);
                this.addAttribute("color", new vn(i, 3).copyColorsArray(t.colors))
            }
            if (t.uvs.length > 0) {
                var r = new Float32Array(2 * t.uvs.length);
                this.addAttribute("uv", new vn(r, 2).copyVector2sArray(t.uvs))
            }
            if (t.uvs2.length > 0) {
                var a = new Float32Array(2 * t.uvs2.length);
                this.addAttribute("uv2", new vn(a, 2).copyVector2sArray(t.uvs2))
            }
            for (var o in this.groups = t.groups, t.morphTargets) {
                for (var s = [], c = t.morphTargets[o], l = 0, h = c.length; l < h; l++) {
                    var u = c[l],
                        p = new En(3 * u.length, 3);
                    s.push(p.copyVector3sArray(u))
                }
                this.morphAttributes[o] = s
            }
            if (t.skinIndices.length > 0) {
                var d = new En(4 * t.skinIndices.length, 4);
                this.addAttribute("skinIndex", d.copyVector4sArray(t.skinIndices))
            }
            if (t.skinWeights.length > 0) {
                var f = new En(4 * t.skinWeights.length, 4);
                this.addAttribute("skinWeight", f.copyVector4sArray(t.skinWeights))
            }
            return null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()), this
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Ke);
            var t = this.attributes.position;
            void 0 !== t ? this.boundingBox.setFromBufferAttribute(t) : this.boundingBox.makeEmpty(), (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
        },
        computeBoundingSphere: function() {
            var t = new Ke,
                e = new He;
            return function() {
                null === this.boundingSphere && (this.boundingSphere = new Je);
                var n = this.attributes.position;
                if (n) {
                    var i = this.boundingSphere.center;
                    t.setFromBufferAttribute(n), t.getCenter(i);
                    for (var r = 0, a = 0, o = n.count; a < o; a++) e.x = n.getX(a), e.y = n.getY(a), e.z = n.getZ(a), r = Math.max(r, i.distanceToSquared(e));
                    this.boundingSphere.radius = Math.sqrt(r), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                }
            }
        }(),
        computeFaceNormals: function() {},
        computeVertexNormals: function() {
            var t = this.index,
                e = this.attributes,
                n = this.groups;
            if (e.position) {
                var i = e.position.array;
                if (void 0 === e.normal) this.addAttribute("normal", new vn(new Float32Array(i.length), 3));
                else
                    for (var r = e.normal.array, a = 0, o = r.length; a < o; a++) r[a] = 0;
                var s, c, l, h = e.normal.array,
                    u = new He,
                    p = new He,
                    d = new He,
                    f = new He,
                    m = new He;
                if (t) {
                    var g = t.array;
                    0 === n.length && this.addGroup(0, g.length);
                    for (var v = 0, y = n.length; v < y; ++v) {
                        var x = n[v],
                            w = x.start;
                        for (a = w, o = w + x.count; a < o; a += 3) s = 3 * g[a + 0], c = 3 * g[a + 1], l = 3 * g[a + 2], u.fromArray(i, s), p.fromArray(i, c), d.fromArray(i, l), f.subVectors(d, p), m.subVectors(u, p), f.cross(m), h[s] += f.x, h[s + 1] += f.y, h[s + 2] += f.z, h[c] += f.x, h[c + 1] += f.y, h[c + 2] += f.z, h[l] += f.x, h[l + 1] += f.y, h[l + 2] += f.z
                    }
                } else
                    for (a = 0, o = i.length; a < o; a += 9) u.fromArray(i, a), p.fromArray(i, a + 3), d.fromArray(i, a + 6), f.subVectors(d, p), m.subVectors(u, p), f.cross(m), h[a] = f.x, h[a + 1] = f.y, h[a + 2] = f.z, h[a + 3] = f.x, h[a + 4] = f.y, h[a + 5] = f.z, h[a + 6] = f.x, h[a + 7] = f.y, h[a + 8] = f.z;
                this.normalizeNormals(), e.normal.needsUpdate = !0
            }
        },
        merge: function(t, e) {
            if (t && t.isBufferGeometry) {
                void 0 === e && (e = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                var n = this.attributes;
                for (var i in n)
                    if (void 0 !== t.attributes[i])
                        for (var r = n[i].array, a = t.attributes[i], o = a.array, s = 0, c = a.itemSize * e; s < o.length; s++, c++) r[c] = o[s];
                return this
            }
            console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t)
        },
        normalizeNormals: function() {
            var t = new He;
            return function() {
                for (var e = this.attributes.normal, n = 0, i = e.count; n < i; n++) t.x = e.getX(n), t.y = e.getY(n), t.z = e.getZ(n), t.normalize(), e.setXYZ(n, t.x, t.y, t.z)
            }
        }(),
        toNonIndexed: function() {
            if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
            var t = new Pn,
                e = this.index.array,
                n = this.attributes;
            for (var i in n) {
                for (var r = n[i], a = r.array, o = r.itemSize, s = new a.constructor(e.length * o), c = 0, l = 0, h = 0, u = e.length; h < u; h++) {
                    c = e[h] * o;
                    for (var p = 0; p < o; p++) s[l++] = a[c++]
                }
                t.addAttribute(i, new vn(s, o))
            }
            var d = this.groups;
            for (h = 0, u = d.length; h < u; h++) {
                var f = d[h];
                t.addGroup(f.start, f.count, f.materialIndex)
            }
            return t
        },
        toJSON: function() {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "BufferGeometry",
                    generator: "BufferGeometry.toJSON"
                }
            };
            if (t.uuid = this.uuid, t.type = this.type, "" !== this.name && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), void 0 !== this.parameters) {
                var e = this.parameters;
                for (var n in e) void 0 !== e[n] && (t[n] = e[n]);
                return t
            }
            t.data = {
                attributes: {}
            };
            var i = this.index;
            if (null !== i) {
                var r = Array.prototype.slice.call(i.array);
                t.data.index = {
                    type: i.array.constructor.name,
                    array: r
                }
            }
            var a = this.attributes;
            for (var n in a) {
                var o = a[n];
                r = Array.prototype.slice.call(o.array), t.data.attributes[n] = {
                    itemSize: o.itemSize,
                    type: o.array.constructor.name,
                    array: r,
                    normalized: o.normalized
                }
            }
            var s = this.groups;
            s.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(s)));
            var c = this.boundingSphere;
            return null !== c && (t.data.boundingSphere = {
                center: c.center.toArray(),
                radius: c.radius
            }), t
        },
        clone: function() {
            return (new Pn).copy(this)
        },
        copy: function(t) {
            var e, n, i;
            this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.name = t.name;
            var r = t.index;
            null !== r && this.setIndex(r.clone());
            var a = t.attributes;
            for (e in a) {
                var o = a[e];
                this.addAttribute(e, o.clone())
            }
            var s = t.morphAttributes;
            for (e in s) {
                var c = [],
                    l = s[e];
                for (n = 0, i = l.length; n < i; n++) c.push(l[n].clone());
                this.morphAttributes[e] = c
            }
            var h = t.groups;
            for (n = 0, i = h.length; n < i; n++) {
                var u = h[n];
                this.addGroup(u.start, u.count, u.materialIndex)
            }
            var p = t.boundingBox;
            null !== p && (this.boundingBox = p.clone());
            var d = t.boundingSphere;
            return null !== d && (this.boundingSphere = d.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }), Cn.prototype = Object.create(gn.prototype), Cn.prototype.constructor = Cn, In.prototype = Object.create(Pn.prototype), In.prototype.constructor = In, On.prototype = Object.create(gn.prototype), On.prototype.constructor = On, Dn.prototype = Object.create(Pn.prototype), Dn.prototype.constructor = Dn;
    var Bn = 0;

    function Nn() {
        Object.defineProperty(this, "id", {
            value: Bn++
        }), this.uuid = ke.generateUUID(), this.name = "", this.type = "Material", this.fog = !0, this.lights = !0, this.blending = S, this.side = m, this.flatShading = !1, this.vertexColors = w, this.opacity = 1, this.transparent = !1, this.blendSrc = U, this.blendDst = z, this.blendEquation = R, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = q, this.depthTest = !0, this.depthWrite = !0, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaTest = 0, this.premultipliedAlpha = !1, this.overdraw = 0, this.visible = !0, this.userData = {}, this.needsUpdate = !0
    }

    function kn(t) {
        Nn.call(this), this.type = "MeshBasicMaterial", this.color = new rn(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = $, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.lights = !1, this.setValues(t)
    }

    function Un(t) {
        Nn.call(this), this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        }, this.defaultAttributeValues = {
            color: [1, 1, 1],
            uv: [0, 0],
            uv2: [0, 0]
        }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(t))
    }

    function zn(t, e) {
        this.origin = void 0 !== t ? t : new He, this.direction = void 0 !== e ? e : new He
    }

    function Fn(t, e, n) {
        this.a = void 0 !== t ? t : new He, this.b = void 0 !== e ? e : new He, this.c = void 0 !== n ? n : new He
    }

    function Hn(t, e) {
        un.call(this), this.type = "Mesh", this.geometry = void 0 !== t ? t : new Pn, this.material = void 0 !== e ? e : new kn({
            color: 16777215 * Math.random()
        }), this.drawMode = Me, this.updateMorphTargets()
    }

    function Gn(t, e) {
        return Math.abs(e[1]) - Math.abs(t[1])
    }

    function jn(t, e, n, i, r, a, o, s, c, l) {
        t = void 0 !== t ? t : [], e = void 0 !== e ? e : ct, We.call(this, t, e, n, i, r, a, o, s, c, l), this.flipY = !1
    }
    Nn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: Nn,
        isMaterial: !0,
        onBeforeCompile: function() {},
        setValues: function(t) {
            if (void 0 !== t)
                for (var e in t) {
                    var n = t[e];
                    if (void 0 !== n)
                        if ("shading" !== e) {
                            var i = this[e];
                            void 0 !== i ? i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[e] = "overdraw" === e ? Number(n) : n : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.")
                        } else console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = n === y;
                    else console.warn("THREE.Material: '" + e + "' parameter is undefined.")
                }
        },
        toJSON: function(t) {
            var e = void 0 === t || "string" == typeof t;
            e && (t = {
                textures: {},
                images: {}
            });
            var n = {
                metadata: {
                    version: 4.5,
                    type: "Material",
                    generator: "Material.toJSON"
                }
            };

            function i(t) {
                var e = [];
                for (var n in t) {
                    var i = t[n];
                    delete i.metadata, e.push(i)
                }
                return e
            }
            if (n.uuid = this.uuid, n.type = this.type, "" !== this.name && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), void 0 !== this.roughness && (n.roughness = this.roughness), void 0 !== this.metalness && (n.metalness = this.metalness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), void 0 !== this.shininess && (n.shininess = this.shininess), void 0 !== this.clearCoat && (n.clearCoat = this.clearCoat), void 0 !== this.clearCoatRoughness && (n.clearCoatRoughness = this.clearCoatRoughness), this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid, n.reflectivity = this.reflectivity), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid), void 0 !== this.size && (n.size = this.size), void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== S && (n.blending = this.blending), !0 === this.flatShading && (n.flatShading = this.flatShading), this.side !== m && (n.side = this.side), this.vertexColors !== w && (n.vertexColors = this.vertexColors), this.opacity < 1 && (n.opacity = this.opacity), !0 === this.transparent && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, 0 !== this.rotation && (n.rotation = this.rotation), 1 !== this.linewidth && (n.linewidth = this.linewidth), void 0 !== this.dashSize && (n.dashSize = this.dashSize), void 0 !== this.gapSize && (n.gapSize = this.gapSize), void 0 !== this.scale && (n.scale = this.scale), !0 === this.dithering && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha), !0 === this.wireframe && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin), !0 === this.morphTargets && (n.morphTargets = !0), !0 === this.skinning && (n.skinning = !0), !1 === this.visible && (n.visible = !1), "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData), e) {
                var r = i(t.textures),
                    a = i(t.images);
                r.length > 0 && (n.textures = r), a.length > 0 && (n.images = a)
            }
            return n
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            this.name = t.name, this.fog = t.fog, this.lights = t.lights, this.blending = t.blending, this.side = t.side, this.flatShading = t.flatShading, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.premultipliedAlpha = t.premultipliedAlpha, this.overdraw = t.overdraw, this.visible = t.visible, this.userData = JSON.parse(JSON.stringify(t.userData)), this.clipShadows = t.clipShadows, this.clipIntersection = t.clipIntersection;
            var e = t.clippingPlanes,
                n = null;
            if (null !== e) {
                var i = e.length;
                n = new Array(i);
                for (var r = 0; r !== i; ++r) n[r] = e[r].clone()
            }
            return this.clippingPlanes = n, this.shadowSide = t.shadowSide, this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }), kn.prototype = Object.create(Nn.prototype), kn.prototype.constructor = kn, kn.prototype.isMeshBasicMaterial = !0, kn.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this
    }, Un.prototype = Object.create(Nn.prototype), Un.prototype.constructor = Un, Un.prototype.isShaderMaterial = !0, Un.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = en.clone(t.uniforms), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.lights = t.lights, this.clipping = t.clipping, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this.extensions = t.extensions, this
    }, Un.prototype.toJSON = function(t) {
        var e = Nn.prototype.toJSON.call(this, t);
        return e.uniforms = this.uniforms, e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader, e
    }, Object.assign(zn.prototype, {
        set: function(t, e) {
            return this.origin.copy(t), this.direction.copy(e), this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.origin.copy(t.origin), this.direction.copy(t.direction), this
        },
        at: function(t, e) {
            return void 0 === e && (console.warn("THREE.Ray: .at() target is now required"), e = new He), e.copy(this.direction).multiplyScalar(t).add(this.origin)
        },
        lookAt: function(t) {
            return this.direction.copy(t).sub(this.origin).normalize(), this
        },
        recast: function() {
            var t = new He;
            return function(e) {
                return this.origin.copy(this.at(e, t)), this
            }
        }(),
        closestPointToPoint: function(t, e) {
            void 0 === e && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), e = new He), e.subVectors(t, this.origin);
            var n = e.dot(this.direction);
            return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin)
        },
        distanceToPoint: function(t) {
            return Math.sqrt(this.distanceSqToPoint(t))
        },
        distanceSqToPoint: function() {
            var t = new He;
            return function(e) {
                var n = t.subVectors(e, this.origin).dot(this.direction);
                return n < 0 ? this.origin.distanceToSquared(e) : (t.copy(this.direction).multiplyScalar(n).add(this.origin), t.distanceToSquared(e))
            }
        }(),
        distanceSqToSegment: function() {
            var t = new He,
                e = new He,
                n = new He;
            return function(i, r, a, o) {
                t.copy(i).add(r).multiplyScalar(.5), e.copy(r).sub(i).normalize(), n.copy(this.origin).sub(t);
                var s, c, l, h, u = .5 * i.distanceTo(r),
                    p = -this.direction.dot(e),
                    d = n.dot(this.direction),
                    f = -n.dot(e),
                    m = n.lengthSq(),
                    g = Math.abs(1 - p * p);
                if (g > 0)
                    if (c = p * d - f, h = u * g, (s = p * f - d) >= 0)
                        if (c >= -h)
                            if (c <= h) {
                                var v = 1 / g;
                                l = (s *= v) * (s + p * (c *= v) + 2 * d) + c * (p * s + c + 2 * f) + m
                            } else c = u, l = -(s = Math.max(0, -(p * c + d))) * s + c * (c + 2 * f) + m;
                else c = -u, l = -(s = Math.max(0, -(p * c + d))) * s + c * (c + 2 * f) + m;
                else c <= -h ? l = -(s = Math.max(0, -(-p * u + d))) * s + (c = s > 0 ? -u : Math.min(Math.max(-u, -f), u)) * (c + 2 * f) + m : c <= h ? (s = 0, l = (c = Math.min(Math.max(-u, -f), u)) * (c + 2 * f) + m) : l = -(s = Math.max(0, -(p * u + d))) * s + (c = s > 0 ? u : Math.min(Math.max(-u, -f), u)) * (c + 2 * f) + m;
                else c = p > 0 ? -u : u, l = -(s = Math.max(0, -(p * c + d))) * s + c * (c + 2 * f) + m;
                return a && a.copy(this.direction).multiplyScalar(s).add(this.origin), o && o.copy(e).multiplyScalar(c).add(t), l
            }
        }(),
        intersectSphere: function() {
            var t = new He;
            return function(e, n) {
                t.subVectors(e.center, this.origin);
                var i = t.dot(this.direction),
                    r = t.dot(t) - i * i,
                    a = e.radius * e.radius;
                if (r > a) return null;
                var o = Math.sqrt(a - r),
                    s = i - o,
                    c = i + o;
                return s < 0 && c < 0 ? null : s < 0 ? this.at(c, n) : this.at(s, n)
            }
        }(),
        intersectsSphere: function(t) {
            return this.distanceToPoint(t.center) <= t.radius
        },
        distanceToPlane: function(t) {
            var e = t.normal.dot(this.direction);
            if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null;
            var n = -(this.origin.dot(t.normal) + t.constant) / e;
            return n >= 0 ? n : null
        },
        intersectPlane: function(t, e) {
            var n = this.distanceToPlane(t);
            return null === n ? null : this.at(n, e)
        },
        intersectsPlane: function(t) {
            var e = t.distanceToPoint(this.origin);
            return 0 === e || t.normal.dot(this.direction) * e < 0
        },
        intersectBox: function(t, e) {
            var n, i, r, a, o, s, c = 1 / this.direction.x,
                l = 1 / this.direction.y,
                h = 1 / this.direction.z,
                u = this.origin;
            return c >= 0 ? (n = (t.min.x - u.x) * c, i = (t.max.x - u.x) * c) : (n = (t.max.x - u.x) * c, i = (t.min.x - u.x) * c), l >= 0 ? (r = (t.min.y - u.y) * l, a = (t.max.y - u.y) * l) : (r = (t.max.y - u.y) * l, a = (t.min.y - u.y) * l), n > a || r > i ? null : ((r > n || n != n) && (n = r), (a < i || i != i) && (i = a), h >= 0 ? (o = (t.min.z - u.z) * h, s = (t.max.z - u.z) * h) : (o = (t.max.z - u.z) * h, s = (t.min.z - u.z) * h), n > s || o > i ? null : ((o > n || n != n) && (n = o), (s < i || i != i) && (i = s), i < 0 ? null : this.at(n >= 0 ? n : i, e)))
        },
        intersectsBox: function() {
            var t = new He;
            return function(e) {
                return null !== this.intersectBox(e, t)
            }
        }(),
        intersectTriangle: function() {
            var t = new He,
                e = new He,
                n = new He,
                i = new He;
            return function(r, a, o, s, c) {
                e.subVectors(a, r), n.subVectors(o, r), i.crossVectors(e, n);
                var l, h = this.direction.dot(i);
                if (h > 0) {
                    if (s) return null;
                    l = 1
                } else {
                    if (!(h < 0)) return null;
                    l = -1, h = -h
                }
                t.subVectors(this.origin, r);
                var u = l * this.direction.dot(n.crossVectors(t, n));
                if (u < 0) return null;
                var p = l * this.direction.dot(e.cross(t));
                if (p < 0) return null;
                if (u + p > h) return null;
                var d = -l * t.dot(i);
                return d < 0 ? null : this.at(d / h, c)
            }
        }(),
        applyMatrix4: function(t) {
            return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this
        },
        equals: function(t) {
            return t.origin.equals(this.origin) && t.direction.equals(this.direction)
        }
    }), Object.assign(Fn, {
        getNormal: function() {
            var t = new He;
            return function(e, n, i, r) {
                void 0 === r && (console.warn("THREE.Triangle: .getNormal() target is now required"), r = new He), r.subVectors(i, n), t.subVectors(e, n), r.cross(t);
                var a = r.lengthSq();
                return a > 0 ? r.multiplyScalar(1 / Math.sqrt(a)) : r.set(0, 0, 0)
            }
        }(),
        getBarycoord: function() {
            var t = new He,
                e = new He,
                n = new He;
            return function(i, r, a, o, s) {
                t.subVectors(o, r), e.subVectors(a, r), n.subVectors(i, r);
                var c = t.dot(t),
                    l = t.dot(e),
                    h = t.dot(n),
                    u = e.dot(e),
                    p = e.dot(n),
                    d = c * u - l * l;
                if (void 0 === s && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), s = new He), 0 === d) return s.set(-2, -1, -1);
                var f = 1 / d,
                    m = (u * h - l * p) * f,
                    g = (c * p - l * h) * f;
                return s.set(1 - m - g, g, m)
            }
        }(),
        containsPoint: function() {
            var t = new He;
            return function(e, n, i, r) {
                return Fn.getBarycoord(e, n, i, r, t), t.x >= 0 && t.y >= 0 && t.x + t.y <= 1
            }
        }()
    }), Object.assign(Fn.prototype, {
        set: function(t, e, n) {
            return this.a.copy(t), this.b.copy(e), this.c.copy(n), this
        },
        setFromPointsAndIndices: function(t, e, n, i) {
            return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this
        },
        getArea: function() {
            var t = new He,
                e = new He;
            return function() {
                return t.subVectors(this.c, this.b), e.subVectors(this.a, this.b), .5 * t.cross(e).length()
            }
        }(),
        getMidpoint: function(t) {
            return void 0 === t && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), t = new He), t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
        },
        getNormal: function(t) {
            return Fn.getNormal(this.a, this.b, this.c, t)
        },
        getPlane: function(t) {
            return void 0 === t && (console.warn("THREE.Triangle: .getPlane() target is now required"), t = new He), t.setFromCoplanarPoints(this.a, this.b, this.c)
        },
        getBarycoord: function(t, e) {
            return Fn.getBarycoord(t, this.a, this.b, this.c, e)
        },
        containsPoint: function(t) {
            return Fn.containsPoint(t, this.a, this.b, this.c)
        },
        intersectsBox: function(t) {
            return t.intersectsTriangle(this)
        },
        closestPointToPoint: function() {
            var t = new He,
                e = new He,
                n = new He,
                i = new He,
                r = new He,
                a = new He;
            return function(o, s) {
                void 0 === s && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), s = new He);
                var c, l, h = this.a,
                    u = this.b,
                    p = this.c;
                t.subVectors(u, h), e.subVectors(p, h), i.subVectors(o, h);
                var d = t.dot(i),
                    f = e.dot(i);
                if (d <= 0 && f <= 0) return s.copy(h);
                r.subVectors(o, u);
                var m = t.dot(r),
                    g = e.dot(r);
                if (m >= 0 && g <= m) return s.copy(u);
                var v = d * g - m * f;
                if (v <= 0 && d >= 0 && m <= 0) return c = d / (d - m), s.copy(h).addScaledVector(t, c);
                a.subVectors(o, p);
                var y = t.dot(a),
                    x = e.dot(a);
                if (x >= 0 && y <= x) return s.copy(p);
                var w = y * f - d * x;
                if (w <= 0 && f >= 0 && x <= 0) return l = f / (f - x), s.copy(h).addScaledVector(e, l);
                var b = m * x - y * g;
                if (b <= 0 && g - m >= 0 && y - x >= 0) return n.subVectors(p, u), l = (g - m) / (g - m + (y - x)), s.copy(u).addScaledVector(n, l);
                var M = 1 / (b + w + v);
                return c = w * M, l = v * M, s.copy(h).addScaledVector(t, c).addScaledVector(e, l)
            }
        }(),
        equals: function(t) {
            return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
        }
    }), Hn.prototype = Object.assign(Object.create(un.prototype), {
        constructor: Hn,
        isMesh: !0,
        setDrawMode: function(t) {
            this.drawMode = t
        },
        copy: function(t) {
            return un.prototype.copy.call(this, t), this.drawMode = t.drawMode, void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this
        },
        updateMorphTargets: function() {
            var t, e, n, i = this.geometry;
            if (i.isBufferGeometry) {
                var r = i.morphAttributes,
                    a = Object.keys(r);
                if (a.length > 0) {
                    var o = r[a[0]];
                    if (void 0 !== o)
                        for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, t = 0, e = o.length; t < e; t++) n = o[t].name || String(t), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n] = t
                }
            } else {
                var s = i.morphTargets;
                if (void 0 !== s && s.length > 0)
                    for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, t = 0, e = s.length; t < e; t++) n = s[t].name || String(t), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n] = t
            }
        },
        raycast: function() {
            var t = new ze,
                e = new zn,
                n = new Je,
                i = new He,
                r = new He,
                a = new He,
                o = new He,
                s = new He,
                c = new He,
                l = new Ue,
                h = new Ue,
                u = new Ue,
                p = new He,
                d = new He,
                f = new He;

            function m(t, e, n, i, r, a, o) {
                return Fn.getBarycoord(t, e, n, i, p), r.multiplyScalar(p.x), a.multiplyScalar(p.y), o.multiplyScalar(p.z), r.add(a).add(o), r.clone()
            }

            function y(t, e, n, i, r, a, o, s) {
                if (null === (e.side === g ? i.intersectTriangle(o, a, r, !0, s) : i.intersectTriangle(r, a, o, e.side !== v, s))) return null;
                f.copy(s), f.applyMatrix4(t.matrixWorld);
                var c = n.ray.origin.distanceTo(f);
                return c < n.near || c > n.far ? null : {
                    distance: c,
                    point: f.clone(),
                    object: t
                }
            }

            function x(t, e, n, o, s, c, p, f, g) {
                i.fromBufferAttribute(s, p), r.fromBufferAttribute(s, f), a.fromBufferAttribute(s, g);
                var v = y(t, e, n, o, i, r, a, d);
                if (v) {
                    c && (l.fromBufferAttribute(c, p), h.fromBufferAttribute(c, f), u.fromBufferAttribute(c, g), v.uv = m(d, i, r, a, l, h, u));
                    var x = new fn(p, f, g);
                    Fn.getNormal(i, r, a, x.normal), v.face = x
                }
                return v
            }
            return function(p, f) {
                var g, v = this.geometry,
                    w = this.material,
                    b = this.matrixWorld;
                if (void 0 !== w && (null === v.boundingSphere && v.computeBoundingSphere(), n.copy(v.boundingSphere), n.applyMatrix4(b), !1 !== p.ray.intersectsSphere(n) && (t.getInverse(b), e.copy(p.ray).applyMatrix4(t), null === v.boundingBox || !1 !== e.intersectsBox(v.boundingBox))))
                    if (v.isBufferGeometry) {
                        var M, _, S, E, T, A, L, R, P, C = v.index,
                            I = v.attributes.position,
                            O = v.attributes.uv,
                            D = v.groups,
                            B = v.drawRange;
                        if (null !== C)
                            if (Array.isArray(w))
                                for (E = 0, A = D.length; E < A; E++)
                                    for (P = w[(R = D[E]).materialIndex], T = Math.max(R.start, B.start), L = Math.min(R.start + R.count, B.start + B.count); T < L; T += 3) M = C.getX(T), _ = C.getX(T + 1), S = C.getX(T + 2), (g = x(this, P, p, e, I, O, M, _, S)) && (g.faceIndex = Math.floor(T / 3), f.push(g));
                            else
                                for (E = Math.max(0, B.start), A = Math.min(C.count, B.start + B.count); E < A; E += 3) M = C.getX(E), _ = C.getX(E + 1), S = C.getX(E + 2), (g = x(this, w, p, e, I, O, M, _, S)) && (g.faceIndex = Math.floor(E / 3), f.push(g));
                        else if (void 0 !== I)
                            if (Array.isArray(w))
                                for (E = 0, A = D.length; E < A; E++)
                                    for (P = w[(R = D[E]).materialIndex], T = Math.max(R.start, B.start), L = Math.min(R.start + R.count, B.start + B.count); T < L; T += 3)(g = x(this, P, p, e, I, O, M = T, _ = T + 1, S = T + 2)) && (g.faceIndex = Math.floor(T / 3), f.push(g));
                            else
                                for (E = Math.max(0, B.start), A = Math.min(I.count, B.start + B.count); E < A; E += 3)(g = x(this, w, p, e, I, O, M = E, _ = E + 1, S = E + 2)) && (g.faceIndex = Math.floor(E / 3), f.push(g))
                    } else if (v.isGeometry) {
                    var N, k, U, z, F = Array.isArray(w),
                        H = v.vertices,
                        G = v.faces,
                        j = v.faceVertexUvs[0];
                    j.length > 0 && (z = j);
                    for (var V = 0, W = G.length; V < W; V++) {
                        var Y = G[V],
                            X = F ? w[Y.materialIndex] : w;
                        if (void 0 !== X) {
                            if (N = H[Y.a], k = H[Y.b], U = H[Y.c], !0 === X.morphTargets) {
                                var q = v.morphTargets,
                                    Z = this.morphTargetInfluences;
                                i.set(0, 0, 0), r.set(0, 0, 0), a.set(0, 0, 0);
                                for (var K = 0, J = q.length; K < J; K++) {
                                    var Q = Z[K];
                                    if (0 !== Q) {
                                        var $ = q[K].vertices;
                                        i.addScaledVector(o.subVectors($[Y.a], N), Q), r.addScaledVector(s.subVectors($[Y.b], k), Q), a.addScaledVector(c.subVectors($[Y.c], U), Q)
                                    }
                                }
                                i.add(N), r.add(k), a.add(U), N = i, k = r, U = a
                            }
                            if (g = y(this, X, p, e, N, k, U, d)) {
                                if (z && z[V]) {
                                    var tt = z[V];
                                    l.copy(tt[0]), h.copy(tt[1]), u.copy(tt[2]), g.uv = m(d, N, k, U, l, h, u)
                                }
                                g.face = Y, g.faceIndex = V, f.push(g)
                            }
                        }
                    }
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this)
        }
    }), jn.prototype = Object.create(We.prototype), jn.prototype.constructor = jn, jn.prototype.isCubeTexture = !0, Object.defineProperty(jn.prototype, "images", {
        get: function() {
            return this.image
        },
        set: function(t) {
            this.image = t
        }
    });
    var Vn = new We,
        Wn = new jn;

    function Yn() {
        this.seq = [], this.map = {}
    }
    var Xn = [],
        qn = [],
        Zn = new Float32Array(16),
        Kn = new Float32Array(9),
        Jn = new Float32Array(4);

    function Qn(t, e, n) {
        var i = t[0];
        if (i <= 0 || i > 0) return t;
        var r = e * n,
            a = Xn[r];
        if (void 0 === a && (a = new Float32Array(r), Xn[r] = a), 0 !== e) {
            i.toArray(a, 0);
            for (var o = 1, s = 0; o !== e; ++o) s += n, t[o].toArray(a, s)
        }
        return a
    }

    function $n(t, e) {
        if (t.length !== e.length) return !1;
        for (var n = 0, i = t.length; n < i; n++)
            if (t[n] !== e[n]) return !1;
        return !0
    }

    function ti(t, e) {
        for (var n = 0, i = e.length; n < i; n++) t[n] = e[n]
    }

    function ei(t, e) {
        var n = qn[e];
        void 0 === n && (n = new Int32Array(e), qn[e] = n);
        for (var i = 0; i !== e; ++i) n[i] = t.allocTextureUnit();
        return n
    }

    function ni(t, e) {
        var n = this.cache;
        n[0] !== e && (t.uniform1f(this.addr, e), n[0] = e)
    }

    function ii(t, e) {
        var n = this.cache;
        n[0] !== e && (t.uniform1i(this.addr, e), n[0] = e)
    }

    function ri(t, e) {
        var n = this.cache;
        if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);
        else {
            if ($n(n, e)) return;
            t.uniform2fv(this.addr, e), ti(n, e)
        }
    }

    function ai(t, e) {
        var n = this.cache;
        if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);
        else if (void 0 !== e.r) n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b), n[0] = e.r, n[1] = e.g, n[2] = e.b);
        else {
            if ($n(n, e)) return;
            t.uniform3fv(this.addr, e), ti(n, e)
        }
    }

    function oi(t, e) {
        var n = this.cache;
        if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);
        else {
            if ($n(n, e)) return;
            t.uniform4fv(this.addr, e), ti(n, e)
        }
    }

    function si(t, e) {
        var n = this.cache,
            i = e.elements;
        if (void 0 === i) {
            if ($n(n, e)) return;
            t.uniformMatrix2fv(this.addr, !1, e), ti(n, e)
        } else {
            if ($n(n, i)) return;
            Jn.set(i), t.uniformMatrix2fv(this.addr, !1, Jn), ti(n, i)
        }
    }

    function ci(t, e) {
        var n = this.cache,
            i = e.elements;
        if (void 0 === i) {
            if ($n(n, e)) return;
            t.uniformMatrix3fv(this.addr, !1, e), ti(n, e)
        } else {
            if ($n(n, i)) return;
            Kn.set(i), t.uniformMatrix3fv(this.addr, !1, Kn), ti(n, i)
        }
    }

    function li(t, e) {
        var n = this.cache,
            i = e.elements;
        if (void 0 === i) {
            if ($n(n, e)) return;
            t.uniformMatrix4fv(this.addr, !1, e), ti(n, e)
        } else {
            if ($n(n, i)) return;
            Zn.set(i), t.uniformMatrix4fv(this.addr, !1, Zn), ti(n, i)
        }
    }

    function hi(t, e, n) {
        var i = this.cache,
            r = n.allocTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture2D(e || Vn, r)
    }

    function ui(t, e, n) {
        var i = this.cache,
            r = n.allocTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTextureCube(e || Wn, r)
    }

    function pi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform2iv(this.addr, e), ti(n, e))
    }

    function di(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform3iv(this.addr, e), ti(n, e))
    }

    function fi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform4iv(this.addr, e), ti(n, e))
    }

    function mi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform1fv(this.addr, e), ti(n, e))
    }

    function gi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform1iv(this.addr, e), ti(n, e))
    }

    function vi(t, e) {
        var n = this.cache,
            i = Qn(e, this.size, 2);
        $n(n, i) || (t.uniform2fv(this.addr, i), this.updateCache(i))
    }

    function yi(t, e) {
        var n = this.cache,
            i = Qn(e, this.size, 3);
        $n(n, i) || (t.uniform3fv(this.addr, i), this.updateCache(i))
    }

    function xi(t, e) {
        var n = this.cache,
            i = Qn(e, this.size, 4);
        $n(n, i) || (t.uniform4fv(this.addr, i), this.updateCache(i))
    }

    function wi(t, e) {
        var n = this.cache,
            i = Qn(e, this.size, 4);
        $n(n, i) || (t.uniformMatrix2fv(this.addr, !1, i), this.updateCache(i))
    }

    function bi(t, e) {
        var n = this.cache,
            i = Qn(e, this.size, 9);
        $n(n, i) || (t.uniformMatrix3fv(this.addr, !1, i), this.updateCache(i))
    }

    function Mi(t, e) {
        var n = this.cache,
            i = Qn(e, this.size, 16);
        $n(n, i) || (t.uniformMatrix4fv(this.addr, !1, i), this.updateCache(i))
    }

    function _i(t, e, n) {
        var i = this.cache,
            r = e.length,
            a = ei(n, r);
        !1 === $n(i, a) && (t.uniform1iv(this.addr, a), ti(i, a));
        for (var o = 0; o !== r; ++o) n.setTexture2D(e[o] || Vn, a[o])
    }

    function Si(t, e, n) {
        var i = this.cache,
            r = e.length,
            a = ei(n, r);
        !1 === $n(i, a) && (t.uniform1iv(this.addr, a), ti(i, a));
        for (var o = 0; o !== r; ++o) n.setTextureCube(e[o] || Wn, a[o])
    }

    function Ei(t, e, n) {
        this.id = t, this.addr = n, this.cache = [], this.setValue = function(t) {
            switch (e.type) {
                case 5126:
                    return ni;
                case 35664:
                    return ri;
                case 35665:
                    return ai;
                case 35666:
                    return oi;
                case 35674:
                    return si;
                case 35675:
                    return ci;
                case 35676:
                    return li;
                case 35678:
                case 36198:
                    return hi;
                case 35680:
                    return ui;
                case 5124:
                case 35670:
                    return ii;
                case 35667:
                case 35671:
                    return pi;
                case 35668:
                case 35672:
                    return di;
                case 35669:
                case 35673:
                    return fi
            }
        }()
    }

    function Ti(t, e, n) {
        this.id = t, this.addr = n, this.cache = [], this.size = e.size, this.setValue = function(t) {
            switch (e.type) {
                case 5126:
                    return mi;
                case 35664:
                    return vi;
                case 35665:
                    return yi;
                case 35666:
                    return xi;
                case 35674:
                    return wi;
                case 35675:
                    return bi;
                case 35676:
                    return Mi;
                case 35678:
                    return _i;
                case 35680:
                    return Si;
                case 5124:
                case 35670:
                    return gi;
                case 35667:
                case 35671:
                    return pi;
                case 35668:
                case 35672:
                    return di;
                case 35669:
                case 35673:
                    return fi
            }
        }()
    }

    function Ai(t) {
        this.id = t, Yn.call(this)
    }
    Ti.prototype.updateCache = function(t) {
        var e = this.cache;
        t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)), ti(e, t)
    }, Ai.prototype.setValue = function(t, e, n) {
        for (var i = this.seq, r = 0, a = i.length; r !== a; ++r) {
            var o = i[r];
            o.setValue(t, e[o.id], n)
        }
    };
    var Li = /([\w\d_]+)(\])?(\[|\.)?/g;

    function Ri(t, e) {
        t.seq.push(e), t.map[e.id] = e
    }

    function Pi(t, e, n) {
        var i = t.name,
            r = i.length;
        for (Li.lastIndex = 0;;) {
            var a = Li.exec(i),
                o = Li.lastIndex,
                s = a[1],
                c = "]" === a[2],
                l = a[3];
            if (c && (s |= 0), void 0 === l || "[" === l && o + 2 === r) {
                Ri(n, void 0 === l ? new Ei(s, t, e) : new Ti(s, t, e));
                break
            }
            var h = n.map[s];
            void 0 === h && Ri(n, h = new Ai(s)), n = h
        }
    }

    function Ci(t, e, n) {
        Yn.call(this), this.renderer = n;
        for (var i = t.getProgramParameter(e, t.ACTIVE_UNIFORMS), r = 0; r < i; ++r) {
            var a = t.getActiveUniform(e, r);
            Pi(a, t.getUniformLocation(e, a.name), this)
        }
    }

    function Ii(t, e, n) {
        var i = t.createShader(e);
        return t.shaderSource(i, n), t.compileShader(i), !1 === t.getShaderParameter(i, t.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile."), "" !== t.getShaderInfoLog(i) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", e === t.VERTEX_SHADER ? "vertex" : "fragment", t.getShaderInfoLog(i), function(t) {
            for (var e = t.split("\n"), n = 0; n < e.length; n++) e[n] = n + 1 + ": " + e[n];
            return e.join("\n")
        }(n)), i
    }
    Ci.prototype.setValue = function(t, e, n) {
        var i = this.map[e];
        void 0 !== i && i.setValue(t, n, this.renderer)
    }, Ci.prototype.setOptional = function(t, e, n) {
        var i = e[n];
        void 0 !== i && this.setValue(t, n, i)
    }, Ci.upload = function(t, e, n, i) {
        for (var r = 0, a = e.length; r !== a; ++r) {
            var o = e[r],
                s = n[o.id];
            !1 !== s.needsUpdate && o.setValue(t, s.value, i)
        }
    }, Ci.seqWithValue = function(t, e) {
        for (var n = [], i = 0, r = t.length; i !== r; ++i) {
            var a = t[i];
            a.id in e && n.push(a)
        }
        return n
    };
    var Oi = 0;

    function Di(t) {
        switch (t) {
            case Ee:
                return ["Linear", "( value )"];
            case Te:
                return ["sRGB", "( value )"];
            case Le:
                return ["RGBE", "( value )"];
            case Pe:
                return ["RGBM", "( value, 7.0 )"];
            case Ce:
                return ["RGBM", "( value, 16.0 )"];
            case Ie:
                return ["RGBD", "( value, 256.0 )"];
            case Ae:
                return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            default:
                throw new Error("unsupported encoding: " + t)
        }
    }

    function Bi(t, e) {
        var n = Di(e);
        return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }"
    }

    function Ni(t) {
        return "" !== t
    }

    function ki(t, e) {
        return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
    }

    function Ui(t, e) {
        return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection)
    }

    function zi(t) {
        return t.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function(t, e) {
            var n = tn[e];
            if (void 0 === n) throw new Error("Can not resolve #include <" + e + ">");
            return zi(n)
        })
    }

    function Fi(t) {
        return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function(t, e, n, i) {
            for (var r = "", a = parseInt(e); a < parseInt(n); a++) r += i.replace(/\[ i \]/g, "[ " + a + " ]");
            return r
        })
    }

    function Hi(t, e, n) {
        var i = [],
            r = {
                MeshDepthMaterial: "depth",
                MeshDistanceMaterial: "distanceRGBA",
                MeshNormalMaterial: "normal",
                MeshBasicMaterial: "basic",
                MeshLambertMaterial: "lambert",
                MeshPhongMaterial: "phong",
                MeshToonMaterial: "phong",
                MeshStandardMaterial: "physical",
                MeshPhysicalMaterial: "physical",
                LineBasicMaterial: "basic",
                LineDashedMaterial: "dashed",
                PointsMaterial: "points",
                ShadowMaterial: "shadow",
                SpriteMaterial: "sprite"
            },
            a = ["precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];

        function o(t, e) {
            var n;
            return t ? t.isTexture ? n = t.encoding : t.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), n = t.texture.encoding) : n = Ee, n === Ee && e && (n = Ae), n
        }
        this.getParameters = function(e, i, a, s, c, l, h) {
            var u = r[e.type],
                p = h.isSkinnedMesh ? function(t) {
                    var e = h.skeleton.bones;
                    if (n.floatVertexTextures) return 1024;
                    var i = n.maxVertexUniforms,
                        r = Math.floor((i - 20) / 4),
                        a = Math.min(r, e.length);
                    return a < e.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + e.length + " bones. This GPU supports " + a + "."), 0) : a
                }() : 0,
                d = n.precision;
            null !== e.precision && (d = n.getMaxPrecision(e.precision)) !== e.precision && console.warn("THREE.WebGLProgram.getParameters:", e.precision, "not supported, using", d, "instead.");
            var f = t.getRenderTarget();
            return {
                shaderID: u,
                precision: d,
                supportsVertexTextures: n.vertexTextures,
                outputEncoding: o(f ? f.texture : null, t.gammaOutput),
                map: !!e.map,
                mapEncoding: o(e.map, t.gammaInput),
                envMap: !!e.envMap,
                envMapMode: e.envMap && e.envMap.mapping,
                envMapEncoding: o(e.envMap, t.gammaInput),
                envMapCubeUV: !!e.envMap && (e.envMap.mapping === dt || e.envMap.mapping === ft),
                lightMap: !!e.lightMap,
                aoMap: !!e.aoMap,
                emissiveMap: !!e.emissiveMap,
                emissiveMapEncoding: o(e.emissiveMap, t.gammaInput),
                bumpMap: !!e.bumpMap,
                normalMap: !!e.normalMap,
                objectSpaceNormalMap: e.normalMapType === Ne,
                displacementMap: !!e.displacementMap,
                roughnessMap: !!e.roughnessMap,
                metalnessMap: !!e.metalnessMap,
                specularMap: !!e.specularMap,
                alphaMap: !!e.alphaMap,
                gradientMap: !!e.gradientMap,
                combine: e.combine,
                vertexColors: e.vertexColors,
                fog: !!s,
                useFog: e.fog,
                fogExp: s && s.isFogExp2,
                flatShading: e.flatShading,
                sizeAttenuation: e.sizeAttenuation,
                logarithmicDepthBuffer: n.logarithmicDepthBuffer,
                skinning: e.skinning && p > 0,
                maxBones: p,
                useVertexTexture: n.floatVertexTextures,
                morphTargets: e.morphTargets,
                morphNormals: e.morphNormals,
                maxMorphTargets: t.maxMorphTargets,
                maxMorphNormals: t.maxMorphNormals,
                numDirLights: i.directional.length,
                numPointLights: i.point.length,
                numSpotLights: i.spot.length,
                numRectAreaLights: i.rectArea.length,
                numHemiLights: i.hemi.length,
                numClippingPlanes: c,
                numClipIntersection: l,
                dithering: e.dithering,
                shadowMapEnabled: t.shadowMap.enabled && h.receiveShadow && a.length > 0,
                shadowMapType: t.shadowMap.type,
                toneMapping: t.toneMapping,
                physicallyCorrectLights: t.physicallyCorrectLights,
                premultipliedAlpha: e.premultipliedAlpha,
                alphaTest: e.alphaTest,
                doubleSided: e.side === v,
                flipSided: e.side === g,
                depthPacking: void 0 !== e.depthPacking && e.depthPacking
            }
        }, this.getProgramCode = function(e, n) {
            var i = [];
            if (n.shaderID ? i.push(n.shaderID) : (i.push(e.fragmentShader), i.push(e.vertexShader)), void 0 !== e.defines)
                for (var r in e.defines) i.push(r), i.push(e.defines[r]);
            for (var o = 0; o < a.length; o++) i.push(n[a[o]]);
            return i.push(e.onBeforeCompile.toString()), i.push(t.gammaOutput), i.join()
        }, this.acquireProgram = function(r, a, o, s) {
            for (var c, l = 0, h = i.length; l < h; l++) {
                var u = i[l];
                if (u.code === s) {
                    ++(c = u).usedTimes;
                    break
                }
            }
            return void 0 === c && (c = new function(t, e, n, i, r, a, o) {
                var s = t.context,
                    c = i.defines,
                    l = r.vertexShader,
                    h = r.fragmentShader,
                    u = "SHADOWMAP_TYPE_BASIC";
                a.shadowMapType === d ? u = "SHADOWMAP_TYPE_PCF" : a.shadowMapType === f && (u = "SHADOWMAP_TYPE_PCF_SOFT");
                var p = "ENVMAP_TYPE_CUBE",
                    m = "ENVMAP_MODE_REFLECTION",
                    g = "ENVMAP_BLENDING_MULTIPLY";
                if (a.envMap) {
                    switch (i.envMap.mapping) {
                        case ct:
                        case lt:
                            p = "ENVMAP_TYPE_CUBE";
                            break;
                        case dt:
                        case ft:
                            p = "ENVMAP_TYPE_CUBE_UV";
                            break;
                        case ht:
                        case ut:
                            p = "ENVMAP_TYPE_EQUIREC";
                            break;
                        case pt:
                            p = "ENVMAP_TYPE_SPHERE"
                    }
                    switch (i.envMap.mapping) {
                        case lt:
                        case ut:
                            m = "ENVMAP_MODE_REFRACTION"
                    }
                    switch (i.combine) {
                        case $:
                            g = "ENVMAP_BLENDING_MULTIPLY";
                            break;
                        case tt:
                            g = "ENVMAP_BLENDING_MIX";
                            break;
                        case et:
                            g = "ENVMAP_BLENDING_ADD"
                    }
                }
                var v, y, x = t.gammaFactor > 0 ? t.gammaFactor : 1,
                    w = o.isWebGL2 ? "" : function(t, e, n) {
                        return [(t = t || {}).derivatives || e.envMapCubeUV || e.bumpMap || e.normalMap && !e.objectSpaceNormalMap || e.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (t.fragDepth || e.logarithmicDepthBuffer) && n.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", t.drawBuffers && n.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (t.shaderTextureLOD || e.envMap) && n.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Ni).join("\n")
                    }(i.extensions, a, e),
                    b = function(t) {
                        var e = [];
                        for (var n in t) {
                            var i = t[n];
                            !1 !== i && e.push("#define " + n + " " + i)
                        }
                        return e.join("\n")
                    }(c),
                    M = s.createProgram();
                if (i.isRawShaderMaterial ? ((v = [b].filter(Ni).join("\n")).length > 0 && (v += "\n"), (y = [w, b].filter(Ni).join("\n")).length > 0 && (y += "\n")) : (v = ["precision " + a.precision + " float;", "precision " + a.precision + " int;", "#define SHADER_NAME " + r.name, b, a.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + x, "#define MAX_BONES " + a.maxBones, a.useFog && a.fog ? "#define USE_FOG" : "", a.useFog && a.fogExp ? "#define FOG_EXP2" : "", a.map ? "#define USE_MAP" : "", a.envMap ? "#define USE_ENVMAP" : "", a.envMap ? "#define " + m : "", a.lightMap ? "#define USE_LIGHTMAP" : "", a.aoMap ? "#define USE_AOMAP" : "", a.emissiveMap ? "#define USE_EMISSIVEMAP" : "", a.bumpMap ? "#define USE_BUMPMAP" : "", a.normalMap ? "#define USE_NORMALMAP" : "", a.normalMap && a.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", a.displacementMap && a.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", a.specularMap ? "#define USE_SPECULARMAP" : "", a.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", a.metalnessMap ? "#define USE_METALNESSMAP" : "", a.alphaMap ? "#define USE_ALPHAMAP" : "", a.vertexColors ? "#define USE_COLOR" : "", a.flatShading ? "#define FLAT_SHADED" : "", a.skinning ? "#define USE_SKINNING" : "", a.useVertexTexture ? "#define BONE_TEXTURE" : "", a.morphTargets ? "#define USE_MORPHTARGETS" : "", a.morphNormals && !1 === a.flatShading ? "#define USE_MORPHNORMALS" : "", a.doubleSided ? "#define DOUBLE_SIDED" : "", a.flipSided ? "#define FLIP_SIDED" : "", a.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", a.shadowMapEnabled ? "#define " + u : "", a.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", a.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", a.logarithmicDepthBuffer && (o.isWebGL2 || e.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Ni).join("\n"), y = [w, "precision " + a.precision + " float;", "precision " + a.precision + " int;", "#define SHADER_NAME " + r.name, b, a.alphaTest ? "#define ALPHATEST " + a.alphaTest + (a.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + x, a.useFog && a.fog ? "#define USE_FOG" : "", a.useFog && a.fogExp ? "#define FOG_EXP2" : "", a.map ? "#define USE_MAP" : "", a.envMap ? "#define USE_ENVMAP" : "", a.envMap ? "#define " + p : "", a.envMap ? "#define " + m : "", a.envMap ? "#define " + g : "", a.lightMap ? "#define USE_LIGHTMAP" : "", a.aoMap ? "#define USE_AOMAP" : "", a.emissiveMap ? "#define USE_EMISSIVEMAP" : "", a.bumpMap ? "#define USE_BUMPMAP" : "", a.normalMap ? "#define USE_NORMALMAP" : "", a.normalMap && a.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", a.specularMap ? "#define USE_SPECULARMAP" : "", a.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", a.metalnessMap ? "#define USE_METALNESSMAP" : "", a.alphaMap ? "#define USE_ALPHAMAP" : "", a.vertexColors ? "#define USE_COLOR" : "", a.gradientMap ? "#define USE_GRADIENTMAP" : "", a.flatShading ? "#define FLAT_SHADED" : "", a.doubleSided ? "#define DOUBLE_SIDED" : "", a.flipSided ? "#define FLIP_SIDED" : "", a.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", a.shadowMapEnabled ? "#define " + u : "", a.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", a.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", a.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", a.logarithmicDepthBuffer && (o.isWebGL2 || e.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", a.envMap && (o.isWebGL2 || e.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", a.toneMapping !== nt ? "#define TONE_MAPPING" : "", a.toneMapping !== nt ? tn.tonemapping_pars_fragment : "", a.toneMapping !== nt ? function(t, e) {
                        var n;
                        switch (e) {
                            case it:
                                n = "Linear";
                                break;
                            case rt:
                                n = "Reinhard";
                                break;
                            case at:
                                n = "Uncharted2";
                                break;
                            case ot:
                                n = "OptimizedCineon";
                                break;
                            default:
                                throw new Error("unsupported toneMapping: " + e)
                        }
                        return "vec3 toneMapping( vec3 color ) { return " + n + "ToneMapping( color ); }"
                    }(0, a.toneMapping) : "", a.dithering ? "#define DITHERING" : "", a.outputEncoding || a.mapEncoding || a.envMapEncoding || a.emissiveMapEncoding ? tn.encodings_pars_fragment : "", a.mapEncoding ? Bi("mapTexelToLinear", a.mapEncoding) : "", a.envMapEncoding ? Bi("envMapTexelToLinear", a.envMapEncoding) : "", a.emissiveMapEncoding ? Bi("emissiveMapTexelToLinear", a.emissiveMapEncoding) : "", a.outputEncoding ? function(t, e) {
                        var n = Di(a.outputEncoding);
                        return "vec4 linearToOutputTexel( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }"
                    }() : "", a.depthPacking ? "#define DEPTH_PACKING " + i.depthPacking : "", "\n"].filter(Ni).join("\n")), l = Ui(l = ki(l = zi(l), a), a), h = Ui(h = ki(h = zi(h), a), a), l = Fi(l), h = Fi(h), o.isWebGL2 && !i.isRawShaderMaterial) {
                    var _ = !1,
                        S = /^\s*#version\s+300\s+es\s*\n/;
                    i.isShaderMaterial && null !== l.match(S) && null !== h.match(S) && (_ = !0, l = l.replace(S, ""), h = h.replace(S, "")), v = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + v, y = ["#version 300 es\n", "#define varying in", _ ? "" : "out highp vec4 pc_fragColor;", _ ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + y
                }
                var E = v + l,
                    T = y + h,
                    A = Ii(s, s.VERTEX_SHADER, E),
                    L = Ii(s, s.FRAGMENT_SHADER, T);
                s.attachShader(M, A), s.attachShader(M, L), void 0 !== i.index0AttributeName ? s.bindAttribLocation(M, 0, i.index0AttributeName) : !0 === a.morphTargets && s.bindAttribLocation(M, 0, "position"), s.linkProgram(M);
                var R, P, C = s.getProgramInfoLog(M).trim(),
                    I = s.getShaderInfoLog(A).trim(),
                    O = s.getShaderInfoLog(L).trim(),
                    D = !0,
                    B = !0;
                return !1 === s.getProgramParameter(M, s.LINK_STATUS) ? (D = !1, console.error("THREE.WebGLProgram: shader error: ", s.getError(), "gl.VALIDATE_STATUS", s.getProgramParameter(M, s.VALIDATE_STATUS), "gl.getProgramInfoLog", C, I, O)) : "" !== C ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", C) : "" !== I && "" !== O || (B = !1), B && (this.diagnostics = {
                    runnable: D,
                    material: i,
                    programLog: C,
                    vertexShader: {
                        log: I,
                        prefix: v
                    },
                    fragmentShader: {
                        log: O,
                        prefix: y
                    }
                }), s.deleteShader(A), s.deleteShader(L), this.getUniforms = function() {
                    return void 0 === R && (R = new Ci(s, M, t)), R
                }, this.getAttributes = function() {
                    return void 0 === P && (P = function(t, e) {
                        for (var n = {}, i = t.getProgramParameter(e, t.ACTIVE_ATTRIBUTES), r = 0; r < i; r++) {
                            var a = t.getActiveAttrib(e, r).name;
                            n[a] = t.getAttribLocation(e, a)
                        }
                        return n
                    }(s, M)), P
                }, this.destroy = function() {
                    s.deleteProgram(M), this.program = void 0
                }, Object.defineProperties(this, {
                    uniforms: {
                        get: function() {
                            return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."), this.getUniforms()
                        }
                    },
                    attributes: {
                        get: function() {
                            return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."), this.getAttributes()
                        }
                    }
                }), this.name = r.name, this.id = Oi++, this.code = n, this.usedTimes = 1, this.program = M, this.vertexShader = A, this.fragmentShader = L, this
            }(t, e, s, r, a, o, n), i.push(c)), c
        }, this.releaseProgram = function(t) {
            if (0 == --t.usedTimes) {
                var e = i.indexOf(t);
                i[e] = i[i.length - 1], i.pop(), t.destroy()
            }
        }, this.programs = i
    }

    function Gi(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.program && e.program && t.program !== e.program ? t.program.id - e.program.id : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id
    }

    function ji(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id
    }
    var Vi, Wi = 0;

    function Yi() {
        var t = new function() {
                var t = new function() {
                        var t = {};
                        return {
                            get: function(e) {
                                if (void 0 !== t[e.id]) return t[e.id];
                                var n;
                                switch (e.type) {
                                    case "DirectionalLight":
                                        n = {
                                            direction: new He,
                                            color: new rn,
                                            shadow: !1,
                                            shadowBias: 0,
                                            shadowRadius: 1,
                                            shadowMapSize: new Ue
                                        };
                                        break;
                                    case "SpotLight":
                                        n = {
                                            position: new He,
                                            direction: new He,
                                            color: new rn,
                                            distance: 0,
                                            coneCos: 0,
                                            penumbraCos: 0,
                                            decay: 0,
                                            shadow: !1,
                                            shadowBias: 0,
                                            shadowRadius: 1,
                                            shadowMapSize: new Ue
                                        };
                                        break;
                                    case "PointLight":
                                        n = {
                                            position: new He,
                                            color: new rn,
                                            distance: 0,
                                            decay: 0,
                                            shadow: !1,
                                            shadowBias: 0,
                                            shadowRadius: 1,
                                            shadowMapSize: new Ue,
                                            shadowCameraNear: 1,
                                            shadowCameraFar: 1e3
                                        };
                                        break;
                                    case "HemisphereLight":
                                        n = {
                                            direction: new He,
                                            skyColor: new rn,
                                            groundColor: new rn
                                        };
                                        break;
                                    case "RectAreaLight":
                                        n = {
                                            color: new rn,
                                            position: new He,
                                            halfWidth: new He,
                                            halfHeight: new He
                                        }
                                }
                                return t[e.id] = n, n
                            }
                        }
                    },
                    e = {
                        id: Wi++,
                        hash: {
                            stateID: -1,
                            directionalLength: -1,
                            pointLength: -1,
                            spotLength: -1,
                            rectAreaLength: -1,
                            hemiLength: -1,
                            shadowsLength: -1
                        },
                        ambient: [0, 0, 0],
                        directional: [],
                        directionalShadowMap: [],
                        directionalShadowMatrix: [],
                        spot: [],
                        spotShadowMap: [],
                        spotShadowMatrix: [],
                        rectArea: [],
                        point: [],
                        pointShadowMap: [],
                        pointShadowMatrix: [],
                        hemi: []
                    },
                    n = new He,
                    i = new ze,
                    r = new ze;
                return {
                    setup: function(a, o, s) {
                        for (var c = 0, l = 0, h = 0, u = 0, p = 0, d = 0, f = 0, m = 0, g = s.matrixWorldInverse, v = 0, y = a.length; v < y; v++) {
                            var x = a[v],
                                w = x.color,
                                b = x.intensity,
                                M = x.distance,
                                _ = x.shadow && x.shadow.map ? x.shadow.map.texture : null;
                            if (x.isAmbientLight) c += w.r * b, l += w.g * b, h += w.b * b;
                            else if (x.isDirectionalLight) {
                                if ((E = t.get(x)).color.copy(x.color).multiplyScalar(x.intensity), E.direction.setFromMatrixPosition(x.matrixWorld), n.setFromMatrixPosition(x.target.matrixWorld), E.direction.sub(n), E.direction.transformDirection(g), E.shadow = x.castShadow, x.castShadow) {
                                    var S = x.shadow;
                                    E.shadowBias = S.bias, E.shadowRadius = S.radius, E.shadowMapSize = S.mapSize
                                }
                                e.directionalShadowMap[u] = _, e.directionalShadowMatrix[u] = x.shadow.matrix, e.directional[u] = E, u++
                            } else if (x.isSpotLight)(E = t.get(x)).position.setFromMatrixPosition(x.matrixWorld), E.position.applyMatrix4(g), E.color.copy(w).multiplyScalar(b), E.distance = M, E.direction.setFromMatrixPosition(x.matrixWorld), n.setFromMatrixPosition(x.target.matrixWorld), E.direction.sub(n), E.direction.transformDirection(g), E.coneCos = Math.cos(x.angle), E.penumbraCos = Math.cos(x.angle * (1 - x.penumbra)), E.decay = 0 === x.distance ? 0 : x.decay, E.shadow = x.castShadow, x.castShadow && (S = x.shadow, E.shadowBias = S.bias, E.shadowRadius = S.radius, E.shadowMapSize = S.mapSize), e.spotShadowMap[d] = _, e.spotShadowMatrix[d] = x.shadow.matrix, e.spot[d] = E, d++;
                            else if (x.isRectAreaLight)(E = t.get(x)).color.copy(w).multiplyScalar(b), E.position.setFromMatrixPosition(x.matrixWorld), E.position.applyMatrix4(g), r.identity(), i.copy(x.matrixWorld), i.premultiply(g), r.extractRotation(i), E.halfWidth.set(.5 * x.width, 0, 0), E.halfHeight.set(0, .5 * x.height, 0), E.halfWidth.applyMatrix4(r), E.halfHeight.applyMatrix4(r), e.rectArea[f] = E, f++;
                            else if (x.isPointLight)(E = t.get(x)).position.setFromMatrixPosition(x.matrixWorld), E.position.applyMatrix4(g), E.color.copy(x.color).multiplyScalar(x.intensity), E.distance = x.distance, E.decay = 0 === x.distance ? 0 : x.decay, E.shadow = x.castShadow, x.castShadow && (S = x.shadow, E.shadowBias = S.bias, E.shadowRadius = S.radius, E.shadowMapSize = S.mapSize, E.shadowCameraNear = S.camera.near, E.shadowCameraFar = S.camera.far), e.pointShadowMap[p] = _, e.pointShadowMatrix[p] = x.shadow.matrix, e.point[p] = E, p++;
                            else if (x.isHemisphereLight) {
                                var E;
                                (E = t.get(x)).direction.setFromMatrixPosition(x.matrixWorld), E.direction.transformDirection(g), E.direction.normalize(), E.skyColor.copy(x.color).multiplyScalar(b), E.groundColor.copy(x.groundColor).multiplyScalar(b), e.hemi[m] = E, m++
                            }
                        }
                        e.ambient[0] = c, e.ambient[1] = l, e.ambient[2] = h, e.directional.length = u, e.spot.length = d, e.rectArea.length = f, e.point.length = p, e.hemi.length = m, e.hash.stateID = e.id, e.hash.directionalLength = u, e.hash.pointLength = p, e.hash.spotLength = d, e.hash.rectAreaLength = f, e.hash.hemiLength = m, e.hash.shadowsLength = o.length
                    },
                    state: e
                }
            },
            e = [],
            n = [];
        return {
            init: function() {
                e.length = 0, n.length = 0
            },
            state: {
                lightsArray: e,
                shadowsArray: n,
                lights: t
            },
            setupLights: function(i) {
                t.setup(e, n, i)
            },
            pushLight: function(t) {
                e.push(t)
            },
            pushShadow: function(t) {
                n.push(t)
            }
        }
    }

    function Xi(t) {
        Nn.call(this), this.type = "MeshDepthMaterial", this.depthPacking = Oe, this.skinning = !1, this.morphTargets = !1, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.setValues(t)
    }

    function qi(t) {
        Nn.call(this), this.type = "MeshDistanceMaterial", this.referencePosition = new He, this.nearDistance = 1, this.farDistance = 1e3, this.skinning = !1, this.morphTargets = !1, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = !1, this.lights = !1, this.setValues(t)
    }

    function Zi(t, e, n) {
        for (var i = new $e, r = new ze, a = new Ue, o = new Ue(n, n), s = new He, c = new He, l = 1, h = 2, u = 1 + (l | h), p = new Array(u), f = new Array(u), y = {}, x = {
                0: g,
                1: m,
                2: v
            }, w = [new He(1, 0, 0), new He(-1, 0, 0), new He(0, 0, 1), new He(0, 0, -1), new He(0, 1, 0), new He(0, -1, 0)], b = [new He(0, 1, 0), new He(0, 1, 0), new He(0, 1, 0), new He(0, 1, 0), new He(0, 0, 1), new He(0, 0, -1)], M = [new Ye, new Ye, new Ye, new Ye, new Ye, new Ye], _ = 0; _ !== u; ++_) {
            var S = 0 != (_ & l),
                E = 0 != (_ & h),
                T = new Xi({
                    depthPacking: De,
                    morphTargets: S,
                    skinning: E
                });
            p[_] = T;
            var A = new qi({
                morphTargets: S,
                skinning: E
            });
            f[_] = A
        }
        var L = this;

        function R(e, n, i, r, a, o) {
            var s = e.geometry,
                c = null,
                u = p,
                d = e.customDepthMaterial;
            if (i && (u = f, d = e.customDistanceMaterial), d) c = d;
            else {
                var m = !1;
                n.morphTargets && (s && s.isBufferGeometry ? m = s.morphAttributes && s.morphAttributes.position && s.morphAttributes.position.length > 0 : s && s.isGeometry && (m = s.morphTargets && s.morphTargets.length > 0)), e.isSkinnedMesh && !1 === n.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", e);
                var g = e.isSkinnedMesh && n.skinning,
                    v = 0;
                m && (v |= l), g && (v |= h), c = u[v]
            }
            if (t.localClippingEnabled && !0 === n.clipShadows && 0 !== n.clippingPlanes.length) {
                var w = c.uuid,
                    b = n.uuid,
                    M = y[w];
                void 0 === M && (M = {}, y[w] = M);
                var _ = M[b];
                void 0 === _ && (_ = c.clone(), M[b] = _), c = _
            }
            return c.visible = n.visible, c.wireframe = n.wireframe, c.side = null != n.shadowSide ? n.shadowSide : x[n.side], c.clipShadows = n.clipShadows, c.clippingPlanes = n.clippingPlanes, c.clipIntersection = n.clipIntersection, c.wireframeLinewidth = n.wireframeLinewidth, c.linewidth = n.linewidth, i && c.isMeshDistanceMaterial && (c.referencePosition.copy(r), c.nearDistance = a, c.farDistance = o), c
        }

        function P(n, r, a, o) {
            if (!1 !== n.visible) {
                if (n.layers.test(r.layers) && (n.isMesh || n.isLine || n.isPoints) && n.castShadow && (!n.frustumCulled || i.intersectsObject(n))) {
                    n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse, n.matrixWorld);
                    var s = e.update(n),
                        l = n.material;
                    if (Array.isArray(l))
                        for (var h = s.groups, u = 0, p = h.length; u < p; u++) {
                            var d = h[u],
                                f = l[d.materialIndex];
                            if (f && f.visible) {
                                var m = R(n, f, o, c, a.near, a.far);
                                t.renderBufferDirect(a, null, s, m, n, d)
                            }
                        } else l.visible && (m = R(n, l, o, c, a.near, a.far), t.renderBufferDirect(a, null, s, m, n, null))
                }
                for (var g = n.children, v = 0, y = g.length; v < y; v++) P(g[v], r, a, o)
            }
        }
        this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = d, this.render = function(e, n, l) {
            if (!1 !== L.enabled && (!1 !== L.autoUpdate || !1 !== L.needsUpdate) && 0 !== e.length) {
                var h, u = t.context,
                    p = t.state;
                p.disable(u.BLEND), p.buffers.color.setClear(1, 1, 1, 1), p.buffers.depth.setTest(!0), p.setScissorTest(!1);
                for (var d = 0, f = e.length; d < f; d++) {
                    var m = e[d],
                        g = m.shadow,
                        v = m && m.isPointLight;
                    if (void 0 !== g) {
                        var y = g.camera;
                        if (a.copy(g.mapSize), a.min(o), v) {
                            var x = a.x,
                                _ = a.y;
                            M[0].set(2 * x, _, x, _), M[1].set(0, _, x, _), M[2].set(3 * x, _, x, _), M[3].set(x, _, x, _), M[4].set(3 * x, 0, x, _), M[5].set(x, 0, x, _), a.x *= 4, a.y *= 2
                        }
                        if (null === g.map) {
                            var S = {
                                minFilter: yt,
                                magFilter: yt,
                                format: Ut
                            };
                            g.map = new Xe(a.x, a.y, S), g.map.texture.name = m.name + ".shadowMap", y.updateProjectionMatrix()
                        }
                        g.isSpotLightShadow && g.update(m);
                        var E = g.map,
                            T = g.matrix;
                        c.setFromMatrixPosition(m.matrixWorld), y.position.copy(c), v ? (h = 6, T.makeTranslation(-c.x, -c.y, -c.z)) : (h = 1, s.setFromMatrixPosition(m.target.matrixWorld), y.lookAt(s), y.updateMatrixWorld(), T.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), T.multiply(y.projectionMatrix), T.multiply(y.matrixWorldInverse)), t.setRenderTarget(E), t.clear();
                        for (var A = 0; A < h; A++) {
                            if (v) {
                                s.copy(y.position), s.add(w[A]), y.up.copy(b[A]), y.lookAt(s), y.updateMatrixWorld();
                                var R = M[A];
                                p.viewport(R)
                            }
                            r.multiplyMatrices(y.projectionMatrix, y.matrixWorldInverse), i.setFromMatrix(r), P(n, l, y, v)
                        }
                    } else console.warn("THREE.WebGLShadowMap:", m, "has no shadow.")
                }
                L.needsUpdate = !1
            }
        }
    }

    function Ki(t, e, n, i, r, a, o) {
        var s, c = {};

        function l(t, e) {
            if (t.width > e || t.height > e) {
                if ("data" in t) return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big (" + t.width + "x" + t.height + ").");
                var n = e / Math.max(t.width, t.height),
                    i = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                return i.width = Math.floor(t.width * n), i.height = Math.floor(t.height * n), i.getContext("2d").drawImage(t, 0, 0, t.width, t.height, 0, 0, i.width, i.height), console.warn("THREE.WebGLRenderer: image is too big (" + t.width + "x" + t.height + "). Resized to " + i.width + "x" + i.height), i
            }
            return t
        }

        function h(t) {
            return ke.isPowerOfTwo(t.width) && ke.isPowerOfTwo(t.height)
        }

        function u(t, e) {
            return t.generateMipmaps && e && t.minFilter !== yt && t.minFilter !== bt
        }

        function p(e, n, r, a) {
            t.generateMipmap(e), i.get(n).__maxMipLevel = Math.log(Math.max(r, a)) * Math.LOG2E
        }

        function d(e, n) {
            if (!r.isWebGL2) return e;
            if (e === t.RGB) {
                if (n === t.FLOAT) return t.RGB32F;
                if (n === t.HALF_FLOAT) return t.RGB16F;
                if (n === t.UNSIGNED_BYTE) return t.RGB8
            }
            if (e === t.RGBA) {
                if (n === t.FLOAT) return t.RGBA32F;
                if (n === t.HALF_FLOAT) return t.RGBA16F;
                if (n === t.UNSIGNED_BYTE) return t.RGBA8
            }
            return e
        }

        function f(e) {
            return e === yt || e === xt || e === wt ? t.NEAREST : t.LINEAR
        }

        function m(e) {
            var n = e.target;
            n.removeEventListener("dispose", m),
                function(e) {
                    var n = i.get(e);
                    if (e.image && n.__image__webglTextureCube) t.deleteTexture(n.__image__webglTextureCube);
                    else {
                        if (void 0 === n.__webglInit) return;
                        t.deleteTexture(n.__webglTexture)
                    }
                    i.remove(e)
                }(n), n.isVideoTexture && delete c[n.id], o.memory.textures--
        }

        function g(e) {
            var n = e.target;
            n.removeEventListener("dispose", g),
                function(e) {
                    var n = i.get(e),
                        r = i.get(e.texture);
                    if (e) {
                        if (void 0 !== r.__webglTexture && t.deleteTexture(r.__webglTexture), e.depthTexture && e.depthTexture.dispose(), e.isWebGLRenderTargetCube)
                            for (var a = 0; a < 6; a++) t.deleteFramebuffer(n.__webglFramebuffer[a]), n.__webglDepthbuffer && t.deleteRenderbuffer(n.__webglDepthbuffer[a]);
                        else t.deleteFramebuffer(n.__webglFramebuffer), n.__webglDepthbuffer && t.deleteRenderbuffer(n.__webglDepthbuffer);
                        i.remove(e.texture), i.remove(e)
                    }
                }(n), o.memory.textures--
        }

        function v(e, f) {
            var g = i.get(e);
            if (e.isVideoTexture && function(t) {
                    var e = t.id,
                        n = o.render.frame;
                    c[e] !== n && (c[e] = n, t.update())
                }(e), e.version > 0 && g.__version !== e.version) {
                var v = e.image;
                if (void 0 === v) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                else {
                    if (!1 !== v.complete) return void
                    function(e, i, c) {
                        void 0 === e.__webglInit && (e.__webglInit = !0, i.addEventListener("dispose", m), e.__webglTexture = t.createTexture(), o.memory.textures++), n.activeTexture(t.TEXTURE0 + c), n.bindTexture(t.TEXTURE_2D, e.__webglTexture), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i.flipY), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, i.premultiplyAlpha), t.pixelStorei(t.UNPACK_ALIGNMENT, i.unpackAlignment);
                        var f = l(i.image, r.maxTextureSize);
                        (function(t) {
                            return !r.isWebGL2 && (t.wrapS !== gt || t.wrapT !== gt || t.minFilter !== yt && t.minFilter !== bt)
                        })(i) && !1 === h(f) && (f = function(t) {
                            return t instanceof HTMLImageElement || t instanceof HTMLCanvasElement || t instanceof ImageBitmap ? (void 0 === s && (s = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), s.width = ke.floorPowerOfTwo(t.width), s.height = ke.floorPowerOfTwo(t.height), s.getContext("2d").drawImage(t, 0, 0, s.width, s.height), console.warn("THREE.WebGLRenderer: image is not power of two (" + t.width + "x" + t.height + "). Resized to " + s.width + "x" + s.height), s) : t
                        }(f));
                        var g = h(f),
                            v = a.convert(i.format),
                            x = a.convert(i.type),
                            w = d(v, x);
                        y(t.TEXTURE_2D, i, g);
                        var b, M = i.mipmaps;
                        if (i.isDepthTexture) {
                            if (w = t.DEPTH_COMPONENT, i.type === Pt) {
                                if (!r.isWebGL2) throw new Error("Float Depth Texture only supported in WebGL2.0");
                                w = t.DEPTH_COMPONENT32F
                            } else r.isWebGL2 && (w = t.DEPTH_COMPONENT16);
                            i.format === Gt && w === t.DEPTH_COMPONENT && i.type !== At && i.type !== Rt && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), i.type = At, x = a.convert(i.type)), i.format === jt && (w = t.DEPTH_STENCIL, i.type !== Bt && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), i.type = Bt, x = a.convert(i.type))), n.texImage2D(t.TEXTURE_2D, 0, w, f.width, f.height, 0, v, x, null)
                        } else if (i.isDataTexture)
                            if (M.length > 0 && g) {
                                for (var _ = 0, S = M.length; _ < S; _++) b = M[_], n.texImage2D(t.TEXTURE_2D, _, w, b.width, b.height, 0, v, x, b.data);
                                i.generateMipmaps = !1, e.__maxMipLevel = M.length - 1
                            } else n.texImage2D(t.TEXTURE_2D, 0, w, f.width, f.height, 0, v, x, f.data), e.__maxMipLevel = 0;
                        else if (i.isCompressedTexture) {
                            for (_ = 0, S = M.length; _ < S; _++) b = M[_], i.format !== Ut && i.format !== kt ? n.getCompressedTextureFormats().indexOf(v) > -1 ? n.compressedTexImage2D(t.TEXTURE_2D, _, w, b.width, b.height, 0, b.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n.texImage2D(t.TEXTURE_2D, _, w, b.width, b.height, 0, v, x, b.data);
                            e.__maxMipLevel = M.length - 1
                        } else if (M.length > 0 && g) {
                            for (_ = 0, S = M.length; _ < S; _++) b = M[_], n.texImage2D(t.TEXTURE_2D, _, w, v, x, b);
                            i.generateMipmaps = !1, e.__maxMipLevel = M.length - 1
                        } else n.texImage2D(t.TEXTURE_2D, 0, w, v, x, f), e.__maxMipLevel = 0;
                        u(i, g) && p(t.TEXTURE_2D, i, f.width, f.height), e.__version = i.version, i.onUpdate && i.onUpdate(i)
                    }(g, e, f);
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")
                }
            }
            n.activeTexture(t.TEXTURE0 + f), n.bindTexture(t.TEXTURE_2D, g.__webglTexture)
        }

        function y(n, o, s) {
            var c;
            if (s ? (t.texParameteri(n, t.TEXTURE_WRAP_S, a.convert(o.wrapS)), t.texParameteri(n, t.TEXTURE_WRAP_T, a.convert(o.wrapT)), t.texParameteri(n, t.TEXTURE_MAG_FILTER, a.convert(o.magFilter)), t.texParameteri(n, t.TEXTURE_MIN_FILTER, a.convert(o.minFilter))) : (t.texParameteri(n, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(n, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), o.wrapS === gt && o.wrapT === gt || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), t.texParameteri(n, t.TEXTURE_MAG_FILTER, f(o.magFilter)), t.texParameteri(n, t.TEXTURE_MIN_FILTER, f(o.minFilter)), o.minFilter !== yt && o.minFilter !== bt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), c = e.get("EXT_texture_filter_anisotropic")) {
                if (o.type === Pt && null === e.get("OES_texture_float_linear")) return;
                if (o.type === Ct && null === (r.isWebGL2 || e.get("OES_texture_half_float_linear"))) return;
                (o.anisotropy > 1 || i.get(o).__currentAnisotropy) && (t.texParameterf(n, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(o.anisotropy, r.getMaxAnisotropy())), i.get(o).__currentAnisotropy = o.anisotropy)
            }
        }

        function x(e, r, o, s) {
            var c = a.convert(r.texture.format),
                l = a.convert(r.texture.type),
                h = d(c, l);
            n.texImage2D(s, 0, h, r.width, r.height, 0, c, l, null), t.bindFramebuffer(t.FRAMEBUFFER, e), t.framebufferTexture2D(t.FRAMEBUFFER, o, s, i.get(r.texture).__webglTexture, 0), t.bindFramebuffer(t.FRAMEBUFFER, null)
        }

        function w(e, n) {
            t.bindRenderbuffer(t.RENDERBUFFER, e), n.depthBuffer && !n.stencilBuffer ? (t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_COMPONENT16, n.width, n.height), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.RENDERBUFFER, e)) : n.depthBuffer && n.stencilBuffer ? (t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_STENCIL, n.width, n.height), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.RENDERBUFFER, e)) : t.renderbufferStorage(t.RENDERBUFFER, t.RGBA4, n.width, n.height), t.bindRenderbuffer(t.RENDERBUFFER, null)
        }
        this.setTexture2D = v, this.setTextureCube = function(e, s) {
            var c = i.get(e);
            if (6 === e.image.length)
                if (e.version > 0 && c.__version !== e.version) {
                    c.__image__webglTextureCube || (e.addEventListener("dispose", m), c.__image__webglTextureCube = t.createTexture(), o.memory.textures++), n.activeTexture(t.TEXTURE0 + s), n.bindTexture(t.TEXTURE_CUBE_MAP, c.__image__webglTextureCube), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, e.flipY);
                    for (var f = e && e.isCompressedTexture, g = e.image[0] && e.image[0].isDataTexture, v = [], x = 0; x < 6; x++) v[x] = f || g ? g ? e.image[x].image : e.image[x] : l(e.image[x], r.maxCubemapSize);
                    var w = v[0],
                        b = h(w),
                        M = a.convert(e.format),
                        _ = a.convert(e.type),
                        S = d(M, _);
                    for (y(t.TEXTURE_CUBE_MAP, e, b), x = 0; x < 6; x++)
                        if (f)
                            for (var E, T = v[x].mipmaps, A = 0, L = T.length; A < L; A++) E = T[A], e.format !== Ut && e.format !== kt ? n.getCompressedTextureFormats().indexOf(M) > -1 ? n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, A, S, E.width, E.height, 0, E.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, A, S, E.width, E.height, 0, M, _, E.data);
                        else g ? n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, 0, S, v[x].width, v[x].height, 0, M, _, v[x].data) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, 0, S, M, _, v[x]);
                    c.__maxMipLevel = f ? T.length - 1 : 0, u(e, b) && p(t.TEXTURE_CUBE_MAP, e, w.width, w.height), c.__version = e.version, e.onUpdate && e.onUpdate(e)
                } else n.activeTexture(t.TEXTURE0 + s), n.bindTexture(t.TEXTURE_CUBE_MAP, c.__image__webglTextureCube)
        }, this.setTextureCubeDynamic = function(e, r) {
            n.activeTexture(t.TEXTURE0 + r), n.bindTexture(t.TEXTURE_CUBE_MAP, i.get(e).__webglTexture)
        }, this.setupRenderTarget = function(e) {
            var r = i.get(e),
                a = i.get(e.texture);
            e.addEventListener("dispose", g), a.__webglTexture = t.createTexture(), o.memory.textures++;
            var s = !0 === e.isWebGLRenderTargetCube,
                c = h(e);
            if (s) {
                r.__webglFramebuffer = [];
                for (var l = 0; l < 6; l++) r.__webglFramebuffer[l] = t.createFramebuffer()
            } else r.__webglFramebuffer = t.createFramebuffer();
            if (s) {
                for (n.bindTexture(t.TEXTURE_CUBE_MAP, a.__webglTexture), y(t.TEXTURE_CUBE_MAP, e.texture, c), l = 0; l < 6; l++) x(r.__webglFramebuffer[l], e, t.COLOR_ATTACHMENT0, t.TEXTURE_CUBE_MAP_POSITIVE_X + l);
                u(e.texture, c) && p(t.TEXTURE_CUBE_MAP, e.texture, e.width, e.height), n.bindTexture(t.TEXTURE_CUBE_MAP, null)
            } else n.bindTexture(t.TEXTURE_2D, a.__webglTexture), y(t.TEXTURE_2D, e.texture, c), x(r.__webglFramebuffer, e, t.COLOR_ATTACHMENT0, t.TEXTURE_2D), u(e.texture, c) && p(t.TEXTURE_2D, e.texture, e.width, e.height), n.bindTexture(t.TEXTURE_2D, null);
            e.depthBuffer && function(e) {
                var n = i.get(e),
                    r = !0 === e.isWebGLRenderTargetCube;
                if (e.depthTexture) {
                    if (r) throw new Error("target.depthTexture not supported in Cube render targets");
                    ! function(e, n) {
                        if (n && n.isWebGLRenderTargetCube) throw new Error("Depth Texture with cube render targets is not supported");
                        if (t.bindFramebuffer(t.FRAMEBUFFER, e), !n.depthTexture || !n.depthTexture.isDepthTexture) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                        i.get(n.depthTexture).__webglTexture && n.depthTexture.image.width === n.width && n.depthTexture.image.height === n.height || (n.depthTexture.image.width = n.width, n.depthTexture.image.height = n.height, n.depthTexture.needsUpdate = !0), v(n.depthTexture, 0);
                        var r = i.get(n.depthTexture).__webglTexture;
                        if (n.depthTexture.format === Gt) t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.TEXTURE_2D, r, 0);
                        else {
                            if (n.depthTexture.format !== jt) throw new Error("Unknown depthTexture format");
                            t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.TEXTURE_2D, r, 0)
                        }
                    }(n.__webglFramebuffer, e)
                } else if (r) {
                    n.__webglDepthbuffer = [];
                    for (var a = 0; a < 6; a++) t.bindFramebuffer(t.FRAMEBUFFER, n.__webglFramebuffer[a]), n.__webglDepthbuffer[a] = t.createRenderbuffer(), w(n.__webglDepthbuffer[a], e)
                } else t.bindFramebuffer(t.FRAMEBUFFER, n.__webglFramebuffer), n.__webglDepthbuffer = t.createRenderbuffer(), w(n.__webglDepthbuffer, e);
                t.bindFramebuffer(t.FRAMEBUFFER, null)
            }(e)
        }, this.updateRenderTargetMipmap = function(e) {
            var r = e.texture;
            if (u(r, h(e))) {
                var a = e.isWebGLRenderTargetCube ? t.TEXTURE_CUBE_MAP : t.TEXTURE_2D,
                    o = i.get(r).__webglTexture;
                n.bindTexture(a, o), p(a, r, e.width, e.height), n.bindTexture(a, null)
            }
        }
    }

    function Ji(t, e, n) {
        return {
            convert: function(i) {
                var r;
                if (i === mt) return t.REPEAT;
                if (i === gt) return t.CLAMP_TO_EDGE;
                if (i === vt) return t.MIRRORED_REPEAT;
                if (i === yt) return t.NEAREST;
                if (i === xt) return t.NEAREST_MIPMAP_NEAREST;
                if (i === wt) return t.NEAREST_MIPMAP_LINEAR;
                if (i === bt) return t.LINEAR;
                if (i === Mt) return t.LINEAR_MIPMAP_NEAREST;
                if (i === _t) return t.LINEAR_MIPMAP_LINEAR;
                if (i === St) return t.UNSIGNED_BYTE;
                if (i === It) return t.UNSIGNED_SHORT_4_4_4_4;
                if (i === Ot) return t.UNSIGNED_SHORT_5_5_5_1;
                if (i === Dt) return t.UNSIGNED_SHORT_5_6_5;
                if (i === Et) return t.BYTE;
                if (i === Tt) return t.SHORT;
                if (i === At) return t.UNSIGNED_SHORT;
                if (i === Lt) return t.INT;
                if (i === Rt) return t.UNSIGNED_INT;
                if (i === Pt) return t.FLOAT;
                if (i === Ct) {
                    if (n.isWebGL2) return t.HALF_FLOAT;
                    if (null !== (r = e.get("OES_texture_half_float"))) return r.HALF_FLOAT_OES
                }
                if (i === Nt) return t.ALPHA;
                if (i === kt) return t.RGB;
                if (i === Ut) return t.RGBA;
                if (i === zt) return t.LUMINANCE;
                if (i === Ft) return t.LUMINANCE_ALPHA;
                if (i === Gt) return t.DEPTH_COMPONENT;
                if (i === jt) return t.DEPTH_STENCIL;
                if (i === R) return t.FUNC_ADD;
                if (i === P) return t.FUNC_SUBTRACT;
                if (i === C) return t.FUNC_REVERSE_SUBTRACT;
                if (i === D) return t.ZERO;
                if (i === B) return t.ONE;
                if (i === N) return t.SRC_COLOR;
                if (i === k) return t.ONE_MINUS_SRC_COLOR;
                if (i === U) return t.SRC_ALPHA;
                if (i === z) return t.ONE_MINUS_SRC_ALPHA;
                if (i === F) return t.DST_ALPHA;
                if (i === H) return t.ONE_MINUS_DST_ALPHA;
                if (i === G) return t.DST_COLOR;
                if (i === j) return t.ONE_MINUS_DST_COLOR;
                if (i === V) return t.SRC_ALPHA_SATURATE;
                if ((i === Vt || i === Wt || i === Yt || i === Xt) && null !== (r = e.get("WEBGL_compressed_texture_s3tc"))) {
                    if (i === Vt) return r.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    if (i === Wt) return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    if (i === Yt) return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    if (i === Xt) return r.COMPRESSED_RGBA_S3TC_DXT5_EXT
                }
                if ((i === qt || i === Zt || i === Kt || i === Jt) && null !== (r = e.get("WEBGL_compressed_texture_pvrtc"))) {
                    if (i === qt) return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                    if (i === Zt) return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                    if (i === Kt) return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                    if (i === Jt) return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                }
                if (i === Qt && null !== (r = e.get("WEBGL_compressed_texture_etc1"))) return r.COMPRESSED_RGB_ETC1_WEBGL;
                if ((i === $t || i === te || i === ee || i === ne || i === ie || i === re || i === ae || i === oe || i === se || i === ce || i === le || i === he || i === ue || i === pe) && null !== (r = e.get("WEBGL_compressed_texture_astc"))) return i;
                if (i === I || i === O) {
                    if (n.isWebGL2) {
                        if (i === I) return t.MIN;
                        if (i === O) return t.MAX
                    }
                    if (null !== (r = e.get("EXT_blend_minmax"))) {
                        if (i === I) return r.MIN_EXT;
                        if (i === O) return r.MAX_EXT
                    }
                }
                if (i === Bt) {
                    if (n.isWebGL2) return t.UNSIGNED_INT_24_8;
                    if (null !== (r = e.get("WEBGL_depth_texture"))) return r.UNSIGNED_INT_24_8_WEBGL
                }
                return 0
            }
        }
    }

    function Qi() {
        un.call(this), this.type = "Group"
    }

    function $i(t, e, n, i) {
        pn.call(this), this.type = "PerspectiveCamera", this.fov = void 0 !== t ? t : 50, this.zoom = 1, this.near = void 0 !== n ? n : .1, this.far = void 0 !== i ? i : 2e3, this.focus = 10, this.aspect = void 0 !== e ? e : 1, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix()
    }

    function tr(t) {
        $i.call(this), this.cameras = t || []
    }

    function er(t) {
        var e = this,
            n = null,
            i = null,
            r = null,
            a = [],
            o = new ze,
            s = new ze;
        "undefined" != typeof window && "VRFrameData" in window && (i = new window.VRFrameData, window.addEventListener("vrdisplaypresentchange", v, !1));
        var c = new ze,
            l = new Fe,
            h = new He,
            u = new $i;
        u.bounds = new Ye(0, 0, .5, 1), u.layers.enable(1);
        var p = new $i;
        p.bounds = new Ye(.5, 0, .5, 1), p.layers.enable(2);
        var d, f, m = new tr([u, p]);

        function g() {
            return null !== n && !0 === n.isPresenting
        }

        function v() {
            if (g()) {
                var i = n.getEyeParameters("left"),
                    r = i.renderWidth,
                    a = i.renderHeight;
                f = t.getPixelRatio(), d = t.getSize(), t.setDrawingBufferSize(2 * r, a, 1), w.start()
            } else e.enabled && (t.setDrawingBufferSize(d.width, d.height, f), w.stop())
        }
        m.layers.enable(1), m.layers.enable(2);
        var y = [];

        function x(t) {
            for (var e = navigator.getGamepads && navigator.getGamepads(), n = 0, i = 0, r = e.length; n < r; n++) {
                var a = e[n];
                if (a && ("Daydream Controller" === a.id || "Gear VR Controller" === a.id || "Oculus Go Controller" === a.id || "OpenVR Gamepad" === a.id || a.id.startsWith("Oculus Touch") || a.id.startsWith("Spatial Controller"))) {
                    if (i === t) return a;
                    i++
                }
            }
        }
        this.enabled = !1, this.userHeight = 1.6, this.getController = function(t) {
            var e = a[t];
            return void 0 === e && ((e = new Qi).matrixAutoUpdate = !1, e.visible = !1, a[t] = e), e
        }, this.getDevice = function() {
            return n
        }, this.setDevice = function(t) {
            void 0 !== t && (n = t), w.setContext(t)
        }, this.setPoseTarget = function(t) {
            void 0 !== t && (r = t)
        }, this.getCamera = function(t) {
            if (null === n) return t.position.set(0, e.userHeight, 0), t;
            n.depthNear = t.near, n.depthFar = t.far, n.getFrameData(i);
            var d = n.stageParameters;
            d ? o.fromArray(d.sittingToStandingTransform) : o.makeTranslation(0, e.userHeight, 0);
            var f = i.pose,
                g = null !== r ? r : t;
            if (g.matrix.copy(o), g.matrix.decompose(g.position, g.quaternion, g.scale), null !== f.orientation && (l.fromArray(f.orientation), g.quaternion.multiply(l)), null !== f.position && (l.setFromRotationMatrix(o), h.fromArray(f.position), h.applyQuaternion(l), g.position.add(h)), g.updateMatrixWorld(), !1 === n.isPresenting) return t;
            u.near = t.near, p.near = t.near, u.far = t.far, p.far = t.far, m.matrixWorld.copy(t.matrixWorld), m.matrixWorldInverse.copy(t.matrixWorldInverse), u.matrixWorldInverse.fromArray(i.leftViewMatrix), p.matrixWorldInverse.fromArray(i.rightViewMatrix), s.getInverse(o), u.matrixWorldInverse.multiply(s), p.matrixWorldInverse.multiply(s);
            var v = g.parent;
            null !== v && (c.getInverse(v.matrixWorld), u.matrixWorldInverse.multiply(c), p.matrixWorldInverse.multiply(c)), u.matrixWorld.getInverse(u.matrixWorldInverse), p.matrixWorld.getInverse(p.matrixWorldInverse), u.projectionMatrix.fromArray(i.leftProjectionMatrix), p.projectionMatrix.fromArray(i.rightProjectionMatrix), m.projectionMatrix.copy(u.projectionMatrix);
            var w = n.getLayers();
            if (w.length) {
                var b = w[0];
                null !== b.leftBounds && 4 === b.leftBounds.length && u.bounds.fromArray(b.leftBounds), null !== b.rightBounds && 4 === b.rightBounds.length && p.bounds.fromArray(b.rightBounds)
            }
            return function() {
                for (var t = 0; t < a.length; t++) {
                    var e = a[t],
                        n = x(t);
                    if (void 0 !== n && void 0 !== n.pose) {
                        if (null === n.pose) return;
                        var i = n.pose;
                        !1 === i.hasPosition && e.position.set(.2, -.6, -.05), null !== i.position && e.position.fromArray(i.position), null !== i.orientation && e.quaternion.fromArray(i.orientation), e.matrix.compose(e.position, e.quaternion, e.scale), e.matrix.premultiply(o), e.matrix.decompose(e.position, e.quaternion, e.scale), e.matrixWorldNeedsUpdate = !0, e.visible = !0;
                        var r = "Daydream Controller" === n.id ? 0 : 1;
                        y[t] !== n.buttons[r].pressed && (y[t] = n.buttons[r].pressed, !0 === y[t] ? e.dispatchEvent({
                            type: "selectstart"
                        }) : (e.dispatchEvent({
                            type: "selectend"
                        }), e.dispatchEvent({
                            type: "select"
                        })))
                    } else e.visible = !1
                }
            }(), m
        }, this.getStandingMatrix = function() {
            return o
        }, this.isPresenting = g;
        var w = new sn;
        this.setAnimationLoop = function(t) {
            w.setAnimationLoop(t)
        }, this.submitFrame = function() {
            g() && n.submitFrame()
        }, this.dispose = function() {
            "undefined" != typeof window && window.removeEventListener("vrdisplaypresentchange", v)
        }
    }

    function nr(t) {
        console.log("THREE.WebGLRenderer", r);
        var e = void 0 !== (t = t || {}).canvas ? t.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
            n = void 0 !== t.context ? t.context : null,
            i = void 0 !== t.alpha && t.alpha,
            a = void 0 === t.depth || t.depth,
            l = void 0 === t.stencil || t.stencil,
            h = void 0 !== t.antialias && t.antialias,
            u = void 0 === t.premultipliedAlpha || t.premultipliedAlpha,
            p = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer,
            d = void 0 !== t.powerPreference ? t.powerPreference : "default",
            f = null,
            m = null;
        this.domElement = e, this.context = null, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.gammaFactor = 2, this.gammaInput = !1, this.gammaOutput = !1, this.physicallyCorrectLights = !1, this.toneMapping = it, this.toneMappingExposure = 1, this.toneMappingWhitePoint = 1, this.maxMorphTargets = 8, this.maxMorphNormals = 4;
        var y, x, w, b, M, R, P, C, I, O, D, B, N, k, U, z, F, H, G = this,
            j = !1,
            V = null,
            $ = null,
            tt = null,
            et = -1,
            nt = {
                geometry: null,
                program: null,
                wireframe: !1
            },
            rt = null,
            at = null,
            ot = new Ye,
            st = new Ye,
            ct = null,
            lt = 0,
            ht = e.width,
            ut = e.height,
            pt = 1,
            dt = new Ye(0, 0, ht, ut),
            ft = new Ye(0, 0, ht, ut),
            mt = !1,
            gt = new $e,
            vt = new function() {
                var t = this,
                    e = null,
                    n = 0,
                    i = !1,
                    r = !1,
                    a = new Qe,
                    o = new Ge,
                    s = {
                        value: null,
                        needsUpdate: !1
                    };

                function c() {
                    s.value !== e && (s.value = e, s.needsUpdate = n > 0), t.numPlanes = n, t.numIntersection = 0
                }

                function l(e, n, i, r) {
                    var c = null !== e ? e.length : 0,
                        l = null;
                    if (0 !== c) {
                        if (l = s.value, !0 !== r || null === l) {
                            var h = i + 4 * c,
                                u = n.matrixWorldInverse;
                            o.getNormalMatrix(u), (null === l || l.length < h) && (l = new Float32Array(h));
                            for (var p = 0, d = i; p !== c; ++p, d += 4) a.copy(e[p]).applyMatrix4(u, o), a.normal.toArray(l, d), l[d + 3] = a.constant
                        }
                        s.value = l, s.needsUpdate = !0
                    }
                    return t.numPlanes = c, l
                }
                this.uniform = s, this.numPlanes = 0, this.numIntersection = 0, this.init = function(t, r, a) {
                    var o = 0 !== t.length || r || 0 !== n || i;
                    return i = r, e = l(t, a, 0), n = t.length, o
                }, this.beginShadows = function() {
                    r = !0, l(null)
                }, this.endShadows = function() {
                    r = !1, c()
                }, this.setState = function(t, a, o, h, u, p) {
                    if (!i || null === t || 0 === t.length || r && !o) r ? l(null) : c();
                    else {
                        var d = r ? 0 : n,
                            f = 4 * d,
                            m = u.clippingState || null;
                        s.value = m, m = l(t, h, f, p);
                        for (var g = 0; g !== f; ++g) m[g] = e[g];
                        u.clippingState = m, this.numIntersection = a ? this.numPlanes : 0, this.numPlanes += d
                    }
                }
            },
            yt = !1,
            xt = !1,
            wt = new ze,
            bt = new He;

        function Mt() {
            return null === $ ? pt : 1
        }
        try {
            var _t = {
                alpha: i,
                depth: a,
                stencil: l,
                antialias: h,
                premultipliedAlpha: u,
                preserveDrawingBuffer: p,
                powerPreference: d
            };
            if (e.addEventListener("webglcontextlost", Lt, !1), e.addEventListener("webglcontextrestored", Rt, !1), null === (y = n || e.getContext("webgl", _t) || e.getContext("experimental-webgl", _t))) throw null !== e.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            void 0 === y.getShaderPrecisionFormat && (y.getShaderPrecisionFormat = function() {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                }
            })
        } catch (t) {
            console.error("THREE.WebGLRenderer: " + t.message)
        }

        function Et() {
            x = new function(t) {
                var e = {};
                return {
                    get: function(n) {
                        if (void 0 !== e[n]) return e[n];
                        var i;
                        switch (n) {
                            case "WEBGL_depth_texture":
                                i = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                                break;
                            case "EXT_texture_filter_anisotropic":
                                i = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                                break;
                            case "WEBGL_compressed_texture_s3tc":
                                i = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                                break;
                            case "WEBGL_compressed_texture_pvrtc":
                                i = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                                break;
                            default:
                                i = t.getExtension(n)
                        }
                        return null === i && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), e[n] = i, i
                    }
                }
            }(y), (w = new function(t, e, n) {
                var i;

                function r(e) {
                    if ("highp" === e) {
                        if (t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT).precision > 0) return "highp";
                        e = "mediump"
                    }
                    return "mediump" === e && t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp"
                }
                var a = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext,
                    o = void 0 !== n.precision ? n.precision : "highp",
                    s = r(o);
                s !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", s, "instead."), o = s);
                var c = !0 === n.logarithmicDepthBuffer,
                    l = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),
                    h = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
                    u = t.getParameter(t.MAX_TEXTURE_SIZE),
                    p = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),
                    d = t.getParameter(t.MAX_VERTEX_ATTRIBS),
                    f = t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),
                    m = t.getParameter(t.MAX_VARYING_VECTORS),
                    g = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),
                    v = h > 0,
                    y = a || !!e.get("OES_texture_float");
                return {
                    isWebGL2: a,
                    getMaxAnisotropy: function() {
                        if (void 0 !== i) return i;
                        var n = e.get("EXT_texture_filter_anisotropic");
                        return i = null !== n ? t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0
                    },
                    getMaxPrecision: r,
                    precision: o,
                    logarithmicDepthBuffer: c,
                    maxTextures: l,
                    maxVertexTextures: h,
                    maxTextureSize: u,
                    maxCubemapSize: p,
                    maxAttributes: d,
                    maxVertexUniforms: f,
                    maxVaryings: m,
                    maxFragmentUniforms: g,
                    vertexTextures: v,
                    floatFragmentTextures: y,
                    floatVertexTextures: v && y
                }
            }(y, x, t)).isWebGL2 || (x.get("WEBGL_depth_texture"), x.get("OES_texture_float"), x.get("OES_texture_half_float"), x.get("OES_texture_half_float_linear"), x.get("OES_standard_derivatives"), x.get("OES_element_index_uint"), x.get("ANGLE_instanced_arrays")), x.get("OES_texture_float_linear"), H = new Ji(y, x, w), (b = new function(t, e, n, i) {
                var r = new function() {
                        var e = !1,
                            n = new Ye,
                            i = null,
                            r = new Ye(0, 0, 0, 0);
                        return {
                            setMask: function(n) {
                                i === n || e || (t.colorMask(n, n, n, n), i = n)
                            },
                            setLocked: function(t) {
                                e = t
                            },
                            setClear: function(e, i, a, o, s) {
                                !0 === s && (e *= o, i *= o, a *= o), n.set(e, i, a, o), !1 === r.equals(n) && (t.clearColor(e, i, a, o), r.copy(n))
                            },
                            reset: function() {
                                e = !1, i = null, r.set(-1, 0, 0, 0)
                            }
                        }
                    },
                    a = new function() {
                        var e = !1,
                            n = null,
                            i = null,
                            r = null;
                        return {
                            setTest: function(e) {
                                e ? it(t.DEPTH_TEST) : rt(t.DEPTH_TEST)
                            },
                            setMask: function(i) {
                                n === i || e || (t.depthMask(i), n = i)
                            },
                            setFunc: function(e) {
                                if (i !== e) {
                                    if (e) switch (e) {
                                        case W:
                                            t.depthFunc(t.NEVER);
                                            break;
                                        case Y:
                                            t.depthFunc(t.ALWAYS);
                                            break;
                                        case X:
                                            t.depthFunc(t.LESS);
                                            break;
                                        case q:
                                            t.depthFunc(t.LEQUAL);
                                            break;
                                        case Z:
                                            t.depthFunc(t.EQUAL);
                                            break;
                                        case K:
                                            t.depthFunc(t.GEQUAL);
                                            break;
                                        case J:
                                            t.depthFunc(t.GREATER);
                                            break;
                                        case Q:
                                            t.depthFunc(t.NOTEQUAL);
                                            break;
                                        default:
                                            t.depthFunc(t.LEQUAL)
                                    } else t.depthFunc(t.LEQUAL);
                                    i = e
                                }
                            },
                            setLocked: function(t) {
                                e = t
                            },
                            setClear: function(e) {
                                r !== e && (t.clearDepth(e), r = e)
                            },
                            reset: function() {
                                e = !1, n = null, i = null, r = null
                            }
                        }
                    },
                    l = new function() {
                        var e = !1,
                            n = null,
                            i = null,
                            r = null,
                            a = null,
                            o = null,
                            s = null,
                            c = null,
                            l = null;
                        return {
                            setTest: function(e) {
                                e ? it(t.STENCIL_TEST) : rt(t.STENCIL_TEST)
                            },
                            setMask: function(i) {
                                n === i || e || (t.stencilMask(i), n = i)
                            },
                            setFunc: function(e, n, o) {
                                i === e && r === n && a === o || (t.stencilFunc(e, n, o), i = e, r = n, a = o)
                            },
                            setOp: function(e, n, i) {
                                o === e && s === n && c === i || (t.stencilOp(e, n, i), o = e, s = n, c = i)
                            },
                            setLocked: function(t) {
                                e = t
                            },
                            setClear: function(e) {
                                l !== e && (t.clearStencil(e), l = e)
                            },
                            reset: function() {
                                e = !1, n = null, i = null, r = null, a = null, o = null, s = null, c = null, l = null
                            }
                        }
                    },
                    h = t.getParameter(t.MAX_VERTEX_ATTRIBS),
                    u = new Uint8Array(h),
                    p = new Uint8Array(h),
                    d = new Uint8Array(h),
                    f = {},
                    m = null,
                    y = null,
                    x = null,
                    w = null,
                    b = null,
                    M = null,
                    R = null,
                    P = null,
                    C = null,
                    I = !1,
                    O = null,
                    D = null,
                    B = null,
                    N = null,
                    k = null,
                    U = t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS),
                    z = !1,
                    F = 0,
                    H = t.getParameter(t.VERSION); - 1 !== H.indexOf("WebGL") ? (F = parseFloat(/^WebGL\ ([0-9])/.exec(H)[1]), z = F >= 1) : -1 !== H.indexOf("OpenGL ES") && (F = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(H)[1]), z = F >= 2);
                var G = null,
                    j = {},
                    V = new Ye,
                    $ = new Ye;

                function tt(e, n, i) {
                    var r = new Uint8Array(4),
                        a = t.createTexture();
                    t.bindTexture(e, a), t.texParameteri(e, t.TEXTURE_MIN_FILTER, t.NEAREST), t.texParameteri(e, t.TEXTURE_MAG_FILTER, t.NEAREST);
                    for (var o = 0; o < i; o++) t.texImage2D(n + o, 0, t.RGBA, 1, 1, 0, t.RGBA, t.UNSIGNED_BYTE, r);
                    return a
                }
                var et = {};

                function nt(n, r) {
                    u[n] = 1, 0 === p[n] && (t.enableVertexAttribArray(n), p[n] = 1), d[n] !== r && ((i.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[i.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, r), d[n] = r)
                }

                function it(e) {
                    !0 !== f[e] && (t.enable(e), f[e] = !0)
                }

                function rt(e) {
                    !1 !== f[e] && (t.disable(e), f[e] = !1)
                }

                function at(e, i, r, a, o, s, c, l) {
                    if (e !== _ ? it(t.BLEND) : rt(t.BLEND), e !== L) {
                        if (e !== x || l !== I) switch (e) {
                            case E:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD), t.blendFuncSeparate(t.ONE, t.ONE, t.ONE, t.ONE)) : (t.blendEquation(t.FUNC_ADD), t.blendFunc(t.SRC_ALPHA, t.ONE));
                                break;
                            case T:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD), t.blendFuncSeparate(t.ZERO, t.ZERO, t.ONE_MINUS_SRC_COLOR, t.ONE_MINUS_SRC_ALPHA)) : (t.blendEquation(t.FUNC_ADD), t.blendFunc(t.ZERO, t.ONE_MINUS_SRC_COLOR));
                                break;
                            case A:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD), t.blendFuncSeparate(t.ZERO, t.SRC_COLOR, t.ZERO, t.SRC_ALPHA)) : (t.blendEquation(t.FUNC_ADD), t.blendFunc(t.ZERO, t.SRC_COLOR));
                                break;
                            default:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD), t.blendFuncSeparate(t.ONE, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA)) : (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD), t.blendFuncSeparate(t.SRC_ALPHA, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA))
                        }
                        w = null, b = null, M = null, R = null, P = null, C = null
                    } else o = o || i, s = s || r, c = c || a, i === w && o === R || (t.blendEquationSeparate(n.convert(i), n.convert(o)), w = i, R = o), r === b && a === M && s === P && c === C || (t.blendFuncSeparate(n.convert(r), n.convert(a), n.convert(s), n.convert(c)), b = r, M = a, P = s, C = c);
                    x = e, I = l
                }

                function ot(e) {
                    O !== e && (e ? t.frontFace(t.CW) : t.frontFace(t.CCW), O = e)
                }

                function st(e) {
                    e !== o ? (it(t.CULL_FACE), e !== D && (e === s ? t.cullFace(t.BACK) : e === c ? t.cullFace(t.FRONT) : t.cullFace(t.FRONT_AND_BACK))) : rt(t.CULL_FACE), D = e
                }

                function ct(e, n, i) {
                    e ? (it(t.POLYGON_OFFSET_FILL), N === n && k === i || (t.polygonOffset(n, i), N = n, k = i)) : rt(t.POLYGON_OFFSET_FILL)
                }

                function lt(e) {
                    void 0 === e && (e = t.TEXTURE0 + U - 1), G !== e && (t.activeTexture(e), G = e)
                }
                return et[t.TEXTURE_2D] = tt(t.TEXTURE_2D, t.TEXTURE_2D, 1), et[t.TEXTURE_CUBE_MAP] = tt(t.TEXTURE_CUBE_MAP, t.TEXTURE_CUBE_MAP_POSITIVE_X, 6), r.setClear(0, 0, 0, 1), a.setClear(1), l.setClear(0), it(t.DEPTH_TEST), a.setFunc(q), ot(!1), st(s), it(t.CULL_FACE), it(t.BLEND), at(S), {
                    buffers: {
                        color: r,
                        depth: a,
                        stencil: l
                    },
                    initAttributes: function() {
                        for (var t = 0, e = u.length; t < e; t++) u[t] = 0
                    },
                    enableAttribute: function(t) {
                        nt(t, 0)
                    },
                    enableAttributeAndDivisor: nt,
                    disableUnusedAttributes: function() {
                        for (var e = 0, n = p.length; e !== n; ++e) p[e] !== u[e] && (t.disableVertexAttribArray(e), p[e] = 0)
                    },
                    enable: it,
                    disable: rt,
                    getCompressedTextureFormats: function() {
                        if (null === m && (m = [], e.get("WEBGL_compressed_texture_pvrtc") || e.get("WEBGL_compressed_texture_s3tc") || e.get("WEBGL_compressed_texture_etc1") || e.get("WEBGL_compressed_texture_astc")))
                            for (var n = t.getParameter(t.COMPRESSED_TEXTURE_FORMATS), i = 0; i < n.length; i++) m.push(n[i]);
                        return m
                    },
                    useProgram: function(e) {
                        return y !== e && (t.useProgram(e), y = e, !0)
                    },
                    setBlending: at,
                    setMaterial: function(e, n) {
                        e.side === v ? rt(t.CULL_FACE) : it(t.CULL_FACE);
                        var i = e.side === g;
                        n && (i = !i), ot(i), e.blending === S && !1 === e.transparent ? at(_) : at(e.blending, e.blendEquation, e.blendSrc, e.blendDst, e.blendEquationAlpha, e.blendSrcAlpha, e.blendDstAlpha, e.premultipliedAlpha), a.setFunc(e.depthFunc), a.setTest(e.depthTest), a.setMask(e.depthWrite), r.setMask(e.colorWrite), ct(e.polygonOffset, e.polygonOffsetFactor, e.polygonOffsetUnits)
                    },
                    setFlipSided: ot,
                    setCullFace: st,
                    setLineWidth: function(e) {
                        e !== B && (z && t.lineWidth(e), B = e)
                    },
                    setPolygonOffset: ct,
                    setScissorTest: function(e) {
                        e ? it(t.SCISSOR_TEST) : rt(t.SCISSOR_TEST)
                    },
                    activeTexture: lt,
                    bindTexture: function(e, n) {
                        null === G && lt();
                        var i = j[G];
                        void 0 === i && (i = {
                            type: void 0,
                            texture: void 0
                        }, j[G] = i), i.type === e && i.texture === n || (t.bindTexture(e, n || et[e]), i.type = e, i.texture = n)
                    },
                    compressedTexImage2D: function() {
                        try {
                            t.compressedTexImage2D.apply(t, arguments)
                        } catch (t) {
                            console.error("THREE.WebGLState:", t)
                        }
                    },
                    texImage2D: function() {
                        try {
                            t.texImage2D.apply(t, arguments)
                        } catch (t) {
                            console.error("THREE.WebGLState:", t)
                        }
                    },
                    scissor: function(e) {
                        !1 === V.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), V.copy(e))
                    },
                    viewport: function(e) {
                        !1 === $.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), $.copy(e))
                    },
                    reset: function() {
                        for (var e = 0; e < p.length; e++) 1 === p[e] && (t.disableVertexAttribArray(e), p[e] = 0);
                        f = {}, m = null, G = null, j = {}, y = null, x = null, O = null, D = null, r.reset(), a.reset(), l.reset()
                    }
                }
            }(y, x, H, w)).scissor(st.copy(ft).multiplyScalar(pt)), b.viewport(ot.copy(dt).multiplyScalar(pt)), M = new function(t) {
                var e = {
                    frame: 0,
                    calls: 0,
                    triangles: 0,
                    points: 0,
                    lines: 0
                };
                return {
                    memory: {
                        geometries: 0,
                        textures: 0
                    },
                    render: e,
                    programs: null,
                    autoReset: !0,
                    reset: function() {
                        e.frame++, e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0
                    },
                    update: function(n, i, r) {
                        switch (r = r || 1, e.calls++, i) {
                            case t.TRIANGLES:
                                e.triangles += r * (n / 3);
                                break;
                            case t.TRIANGLE_STRIP:
                            case t.TRIANGLE_FAN:
                                e.triangles += r * (n - 2);
                                break;
                            case t.LINES:
                                e.lines += r * (n / 2);
                                break;
                            case t.LINE_STRIP:
                                e.lines += r * (n - 1);
                                break;
                            case t.LINE_LOOP:
                                e.lines += r * n;
                                break;
                            case t.POINTS:
                                e.points += r * n;
                                break;
                            default:
                                console.error("THREE.WebGLInfo: Unknown draw mode:", i)
                        }
                    }
                }
            }(y), R = new function() {
                var t = new WeakMap;
                return {
                    get: function(e) {
                        var n = t.get(e);
                        return void 0 === n && (n = {}, t.set(e, n)), n
                    },
                    remove: function(e) {
                        t.delete(e)
                    },
                    update: function(e, n, i) {
                        t.get(e)[n] = i
                    },
                    dispose: function() {
                        t = new WeakMap
                    }
                }
            }, P = new Ki(y, x, b, R, w, H, M), C = new function(t) {
                var e = new WeakMap;
                return {
                    get: function(t) {
                        return t.isInterleavedBufferAttribute && (t = t.data), e.get(t)
                    },
                    remove: function(n) {
                        n.isInterleavedBufferAttribute && (n = n.data);
                        var i = e.get(n);
                        i && (t.deleteBuffer(i.buffer), e.delete(n))
                    },
                    update: function(n, i) {
                        n.isInterleavedBufferAttribute && (n = n.data);
                        var r = e.get(n);
                        void 0 === r ? e.set(n, function(e, n) {
                            var i = e.array,
                                r = e.dynamic ? t.DYNAMIC_DRAW : t.STATIC_DRAW,
                                a = t.createBuffer();
                            t.bindBuffer(n, a), t.bufferData(n, i, r), e.onUploadCallback();
                            var o = t.FLOAT;
                            return i instanceof Float32Array ? o = t.FLOAT : i instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : i instanceof Uint16Array ? o = t.UNSIGNED_SHORT : i instanceof Int16Array ? o = t.SHORT : i instanceof Uint32Array ? o = t.UNSIGNED_INT : i instanceof Int32Array ? o = t.INT : i instanceof Int8Array ? o = t.BYTE : i instanceof Uint8Array && (o = t.UNSIGNED_BYTE), {
                                buffer: a,
                                type: o,
                                bytesPerElement: i.BYTES_PER_ELEMENT,
                                version: e.version
                            }
                        }(n, i)) : r.version < n.version && (function(e, n, i) {
                            var r = n.array,
                                a = n.updateRange;
                            t.bindBuffer(i, e), !1 === n.dynamic ? t.bufferData(i, r, t.STATIC_DRAW) : -1 === a.count ? t.bufferSubData(i, 0, r) : 0 === a.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (t.bufferSubData(i, a.offset * r.BYTES_PER_ELEMENT, r.subarray(a.offset, a.offset + a.count)), a.count = -1)
                        }(r.buffer, n, i), r.version = n.version)
                    }
                }
            }(y), I = new function(t, e, n) {
                var i = {},
                    r = {};

                function a(t) {
                    var o = t.target,
                        s = i[o.id];
                    for (var c in null !== s.index && e.remove(s.index), s.attributes) e.remove(s.attributes[c]);
                    o.removeEventListener("dispose", a), delete i[o.id];
                    var l = r[s.id];
                    l && (e.remove(l), delete r[s.id]), n.memory.geometries--
                }
                return {
                    get: function(t, e) {
                        var r = i[e.id];
                        return r || (e.addEventListener("dispose", a), e.isBufferGeometry ? r = e : e.isGeometry && (void 0 === e._bufferGeometry && (e._bufferGeometry = (new Pn).setFromObject(t)), r = e._bufferGeometry), i[e.id] = r, n.memory.geometries++, r)
                    },
                    update: function(n) {
                        var i = n.index,
                            r = n.attributes;
                        for (var a in null !== i && e.update(i, t.ELEMENT_ARRAY_BUFFER), r) e.update(r[a], t.ARRAY_BUFFER);
                        var o = n.morphAttributes;
                        for (var a in o)
                            for (var s = o[a], c = 0, l = s.length; c < l; c++) e.update(s[c], t.ARRAY_BUFFER)
                    },
                    getWireframeAttribute: function(n) {
                        var i = r[n.id];
                        if (i) return i;
                        var a, o = [],
                            s = n.index,
                            c = n.attributes;
                        if (null !== s)
                            for (var l = 0, h = (a = s.array).length; l < h; l += 3) {
                                var u = a[l + 0],
                                    p = a[l + 1],
                                    d = a[l + 2];
                                o.push(u, p, p, d, d, u)
                            } else
                                for (l = 0, h = (a = c.position.array).length / 3 - 1; l < h; l += 3) u = l + 0, p = l + 1, d = l + 2, o.push(u, p, p, d, d, u);
                        return i = new(Ln(o) > 65535 ? Sn : Mn)(o, 1), e.update(i, t.ELEMENT_ARRAY_BUFFER), r[n.id] = i, i
                    }
                }
            }(y, C, M), O = new function(t, e) {
                var n = {};
                return {
                    update: function(i) {
                        var r = e.render.frame,
                            a = i.geometry,
                            o = t.get(i, a);
                        return n[o.id] !== r && (a.isGeometry && o.updateFromObject(i), t.update(o), n[o.id] = r), o
                    },
                    dispose: function() {
                        n = {}
                    }
                }
            }(I, M), U = new function(t) {
                var e = {},
                    n = new Float32Array(8);
                return {
                    update: function(i, r, a, o) {
                        var s = i.morphTargetInfluences,
                            c = s.length,
                            l = e[r.id];
                        if (void 0 === l) {
                            l = [];
                            for (var h = 0; h < c; h++) l[h] = [h, 0];
                            e[r.id] = l
                        }
                        var u = a.morphTargets && r.morphAttributes.position,
                            p = a.morphNormals && r.morphAttributes.normal;
                        for (h = 0; h < c; h++) 0 !== (d = l[h])[1] && (u && r.removeAttribute("morphTarget" + h), p && r.removeAttribute("morphNormal" + h));
                        for (h = 0; h < c; h++)(d = l[h])[0] = h, d[1] = s[h];
                        for (l.sort(Gn), h = 0; h < 8; h++) {
                            var d;
                            if (d = l[h]) {
                                var f = d[0],
                                    m = d[1];
                                if (m) {
                                    u && r.addAttribute("morphTarget" + h, u[f]), p && r.addAttribute("morphNormal" + h, p[f]), n[h] = m;
                                    continue
                                }
                            }
                            n[h] = 0
                        }
                        o.getUniforms().setValue(t, "morphTargetInfluences", n)
                    }
                }
            }(y), D = new Hi(G, x, w), B = new function() {
                var t = {};
                return {
                    get: function(e, n) {
                        var i = e.id + "," + n.id,
                            r = t[i];
                        return void 0 === r && (r = new function() {
                            var t = [],
                                e = 0,
                                n = [],
                                i = [];
                            return {
                                opaque: n,
                                transparent: i,
                                init: function() {
                                    e = 0, n.length = 0, i.length = 0
                                },
                                push: function(r, a, o, s, c) {
                                    var l = t[e];
                                    void 0 === l ? (l = {
                                        id: r.id,
                                        object: r,
                                        geometry: a,
                                        material: o,
                                        program: o.program,
                                        renderOrder: r.renderOrder,
                                        z: s,
                                        group: c
                                    }, t[e] = l) : (l.id = r.id, l.object = r, l.geometry = a, l.material = o, l.program = o.program, l.renderOrder = r.renderOrder, l.z = s, l.group = c), (!0 === o.transparent ? i : n).push(l), e++
                                },
                                sort: function() {
                                    n.length > 1 && n.sort(Gi), i.length > 1 && i.sort(ji)
                                }
                            }
                        }, t[i] = r), r
                    },
                    dispose: function() {
                        t = {}
                    }
                }
            }, N = new function() {
                var t = {};
                return {
                    get: function(e, n) {
                        var i;
                        return void 0 === t[e.id] ? (i = new Yi, t[e.id] = {}, t[e.id][n.id] = i) : void 0 === t[e.id][n.id] ? (i = new Yi, t[e.id][n.id] = i) : i = t[e.id][n.id], i
                    },
                    dispose: function() {
                        t = {}
                    }
                }
            }, k = new function(t, e, n, i) {
                var r, a, o, s = new rn(0),
                    c = 0;

                function l(t, n) {
                    e.buffers.color.setClear(t.r, t.g, t.b, n, i)
                }
                return {
                    getClearColor: function() {
                        return s
                    },
                    setClearColor: function(t, e) {
                        s.set(t), l(s, c = void 0 !== e ? e : 1)
                    },
                    getClearAlpha: function() {
                        return c
                    },
                    setClearAlpha: function(t) {
                        l(s, c = t)
                    },
                    render: function(e, i, h, u) {
                        var p = i.background;
                        null === p ? l(s, c) : p && p.isColor && (l(p, 1), u = !0), (t.autoClear || u) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), p && p.isCubeTexture ? (void 0 === o && ((o = new Hn(new In(1, 1, 1), new Un({
                            uniforms: on.cube.uniforms,
                            vertexShader: on.cube.vertexShader,
                            fragmentShader: on.cube.fragmentShader,
                            side: g,
                            depthTest: !0,
                            depthWrite: !1,
                            fog: !1
                        }))).geometry.removeAttribute("normal"), o.geometry.removeAttribute("uv"), o.onBeforeRender = function(t, e, n) {
                            this.matrixWorld.copyPosition(n.matrixWorld)
                        }, n.update(o)), o.material.uniforms.tCube.value = p, e.push(o, o.geometry, o.material, 0, null)) : p && p.isTexture && (void 0 === r && (r = new dn(-1, 1, 1, -1, 0, 1), a = new Hn(new Dn(2, 2), new kn({
                            depthTest: !1,
                            depthWrite: !1,
                            fog: !1
                        })), n.update(a)), a.material.map = p, t.renderBufferDirect(r, null, a.geometry, a.material, a, null))
                    }
                }
            }(G, b, O, u), z = new function(t, e, n, i) {
                var r;
                this.setMode = function(t) {
                    r = t
                }, this.render = function(e, i) {
                    t.drawArrays(r, e, i), n.update(i, r)
                }, this.renderInstances = function(a, o, s) {
                    var c;
                    if (i.isWebGL2) c = t;
                    else if (null === (c = e.get("ANGLE_instanced_arrays"))) return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                    c[i.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](r, o, s, a.maxInstancedCount), n.update(s, r, a.maxInstancedCount)
                }
            }(y, x, M, w), F = new function(t, e, n, i) {
                var r, a, o;
                this.setMode = function(t) {
                    r = t
                }, this.setIndex = function(t) {
                    a = t.type, o = t.bytesPerElement
                }, this.render = function(e, i) {
                    t.drawElements(r, i, a, e * o), n.update(i, r)
                }, this.renderInstances = function(s, c, l) {
                    var h;
                    if (i.isWebGL2) h = t;
                    else if (null === (h = e.get("ANGLE_instanced_arrays"))) return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                    h[i.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](r, l, a, c * o, s.maxInstancedCount), n.update(l, r, s.maxInstancedCount)
                }
            }(y, x, M, w), M.programs = D.programs, G.context = y, G.capabilities = w, G.extensions = x, G.properties = R, G.renderLists = B, G.state = b, G.info = M
        }
        Et();
        var Tt = "xr" in navigator ? new function(t) {
            var e = t.context,
                n = null,
                i = null,
                r = null,
                a = null,
                o = [],
                s = [];

            function c() {
                return null !== i && null !== r
            }
            var l = new $i;
            l.layers.enable(1), l.viewport = new Ye;
            var h = new $i;
            h.layers.enable(2), h.viewport = new Ye;
            var u = new tr([l, h]);

            function p(t) {
                var e = o[s.indexOf(t.inputSource)];
                e && e.dispatchEvent({
                    type: t.type
                })
            }

            function d() {
                t.setFramebuffer(null), g.stop()
            }

            function f(t, e) {
                null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix), t.matrixWorldInverse.getInverse(t.matrixWorld)
            }
            u.layers.enable(1), u.layers.enable(2), this.enabled = !1, this.getController = function(t) {
                var e = o[t];
                return void 0 === e && ((e = new Qi).matrixAutoUpdate = !1, e.visible = !1, o[t] = e), e
            }, this.getDevice = function() {
                return n
            }, this.setDevice = function(t) {
                void 0 !== t && (n = t), t instanceof XRDevice && e.setCompatibleXRDevice(t)
            }, this.setSession = function(n, a) {
                null !== (i = n) && (i.addEventListener("select", p), i.addEventListener("selectstart", p), i.addEventListener("selectend", p), i.addEventListener("end", d), i.baseLayer = new XRWebGLLayer(i, e), i.requestFrameOfReference(a.frameOfReferenceType).then(function(e) {
                    r = e, t.setFramebuffer(i.baseLayer.framebuffer), g.setContext(i), g.start()
                }), s = i.getInputSources(), i.addEventListener("inputsourceschange", function() {
                    s = i.getInputSources(), console.log(s)
                }))
            }, this.getCamera = function(t) {
                if (c()) {
                    var e = t.parent,
                        n = u.cameras;
                    f(u, e);
                    for (var i = 0; i < n.length; i++) f(n[i], e);
                    t.matrixWorld.copy(u.matrixWorld);
                    for (var r = t.children, a = (i = 0, r.length); i < a; i++) r[i].updateMatrixWorld(!0);
                    return u
                }
                return t
            }, this.isPresenting = c;
            var m = null,
                g = new sn;
            g.setAnimationLoop(function(t, e) {
                if (null !== (a = e.getDevicePose(r)))
                    for (var n = i.baseLayer, c = e.views, l = 0; l < c.length; l++) {
                        var h = c[l],
                            p = n.getViewport(h),
                            d = a.getViewMatrix(h),
                            f = u.cameras[l];
                        f.matrix.fromArray(d).getInverse(f.matrix), f.projectionMatrix.fromArray(h.projectionMatrix), f.viewport.set(p.x, p.y, p.width, p.height), 0 === l && (u.matrix.copy(f.matrix), u.projectionMatrix.copy(f.projectionMatrix))
                    }
                for (l = 0; l < o.length; l++) {
                    var g = o[l],
                        v = s[l];
                    if (v) {
                        var y = e.getInputPose(v, r);
                        if (null !== y) {
                            g.matrix.elements = y.pointerMatrix, g.matrix.decompose(g.position, g.rotation, g.scale), g.visible = !0;
                            continue
                        }
                    }
                    g.visible = !1
                }
                m && m(t)
            }), this.setAnimationLoop = function(t) {
                m = t
            }, this.dispose = function() {}, this.getStandingMatrix = function() {
                return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."), new THREE.Matrix4
            }, this.submitFrame = function() {}
        }(G) : new er(G);
        this.vr = Tt;
        var At = new Zi(G, O, w.maxTextureSize);

        function Lt(t) {
            t.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), j = !0
        }

        function Rt() {
            console.log("THREE.WebGLRenderer: Context Restored."), j = !1, Et()
        }

        function It(t) {
            var e = t.target;
            e.removeEventListener("dispose", It),
                function(t) {
                    Ot(t), R.remove(t)
                }(e)
        }

        function Ot(t) {
            var e = R.get(t).program;
            t.program = void 0, void 0 !== e && D.releaseProgram(e)
        }
        this.shadowMap = At, this.getContext = function() {
            return y
        }, this.getContextAttributes = function() {
            return y.getContextAttributes()
        }, this.forceContextLoss = function() {
            var t = x.get("WEBGL_lose_context");
            t && t.loseContext()
        }, this.forceContextRestore = function() {
            var t = x.get("WEBGL_lose_context");
            t && t.restoreContext()
        }, this.getPixelRatio = function() {
            return pt
        }, this.setPixelRatio = function(t) {
            void 0 !== t && (pt = t, this.setSize(ht, ut, !1))
        }, this.getSize = function() {
            return {
                width: ht,
                height: ut
            }
        }, this.setSize = function(t, n, i) {
            Tt.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (ht = t, ut = n, e.width = t * pt, e.height = n * pt, !1 !== i && (e.style.width = t + "px", e.style.height = n + "px"), this.setViewport(0, 0, t, n))
        }, this.getDrawingBufferSize = function() {
            return {
                width: ht * pt,
                height: ut * pt
            }
        }, this.setDrawingBufferSize = function(t, n, i) {
            ht = t, ut = n, pt = i, e.width = t * i, e.height = n * i, this.setViewport(0, 0, t, n)
        }, this.getCurrentViewport = function() {
            return ot
        }, this.setViewport = function(t, e, n, i) {
            dt.set(t, ut - e - i, n, i), b.viewport(ot.copy(dt).multiplyScalar(pt))
        }, this.setScissor = function(t, e, n, i) {
            ft.set(t, ut - e - i, n, i), b.scissor(st.copy(ft).multiplyScalar(pt))
        }, this.setScissorTest = function(t) {
            b.setScissorTest(mt = t)
        }, this.getClearColor = function() {
            return k.getClearColor()
        }, this.setClearColor = function() {
            k.setClearColor.apply(k, arguments)
        }, this.getClearAlpha = function() {
            return k.getClearAlpha()
        }, this.setClearAlpha = function() {
            k.setClearAlpha.apply(k, arguments)
        }, this.clear = function(t, e, n) {
            var i = 0;
            (void 0 === t || t) && (i |= y.COLOR_BUFFER_BIT), (void 0 === e || e) && (i |= y.DEPTH_BUFFER_BIT), (void 0 === n || n) && (i |= y.STENCIL_BUFFER_BIT), y.clear(i)
        }, this.clearColor = function() {
            this.clear(!0, !1, !1)
        }, this.clearDepth = function() {
            this.clear(!1, !0, !1)
        }, this.clearStencil = function() {
            this.clear(!1, !1, !0)
        }, this.clearTarget = function(t, e, n, i) {
            this.setRenderTarget(t), this.clear(e, n, i)
        }, this.dispose = function() {
            e.removeEventListener("webglcontextlost", Lt, !1), e.removeEventListener("webglcontextrestored", Rt, !1), B.dispose(), N.dispose(), R.dispose(), O.dispose(), Tt.dispose(), Bt.stop()
        }, this.renderBufferImmediate = function(t, e) {
            b.initAttributes();
            var n = R.get(t);
            t.hasPositions && !n.position && (n.position = y.createBuffer()), t.hasNormals && !n.normal && (n.normal = y.createBuffer()), t.hasUvs && !n.uv && (n.uv = y.createBuffer()), t.hasColors && !n.color && (n.color = y.createBuffer());
            var i = e.getAttributes();
            t.hasPositions && (y.bindBuffer(y.ARRAY_BUFFER, n.position), y.bufferData(y.ARRAY_BUFFER, t.positionArray, y.DYNAMIC_DRAW), b.enableAttribute(i.position), y.vertexAttribPointer(i.position, 3, y.FLOAT, !1, 0, 0)), t.hasNormals && (y.bindBuffer(y.ARRAY_BUFFER, n.normal), y.bufferData(y.ARRAY_BUFFER, t.normalArray, y.DYNAMIC_DRAW), b.enableAttribute(i.normal), y.vertexAttribPointer(i.normal, 3, y.FLOAT, !1, 0, 0)), t.hasUvs && (y.bindBuffer(y.ARRAY_BUFFER, n.uv), y.bufferData(y.ARRAY_BUFFER, t.uvArray, y.DYNAMIC_DRAW), b.enableAttribute(i.uv), y.vertexAttribPointer(i.uv, 2, y.FLOAT, !1, 0, 0)), t.hasColors && (y.bindBuffer(y.ARRAY_BUFFER, n.color), y.bufferData(y.ARRAY_BUFFER, t.colorArray, y.DYNAMIC_DRAW), b.enableAttribute(i.color), y.vertexAttribPointer(i.color, 3, y.FLOAT, !1, 0, 0)), b.disableUnusedAttributes(), y.drawArrays(y.TRIANGLES, 0, t.count), t.count = 0
        }, this.renderBufferDirect = function(t, e, n, i, r, a) {
            var o = r.isMesh && r.normalMatrix.determinant() < 0;
            b.setMaterial(i, o);
            var s = Ft(t, e, i, r),
                c = !1;
            nt.geometry === n.id && nt.program === s.id && nt.wireframe === (!0 === i.wireframe) || (nt.geometry = n.id, nt.program = s.id, nt.wireframe = !0 === i.wireframe, c = !0), r.morphTargetInfluences && (U.update(r, n, i, s), c = !0);
            var l, h = n.index,
                u = n.attributes.position,
                p = 1;
            !0 === i.wireframe && (h = I.getWireframeAttribute(n), p = 2);
            var d = z;
            null !== h && (l = C.get(h), (d = F).setIndex(l)), c && (function(t, e, n) {
                if (n && n.isInstancedBufferGeometry & !w.isWebGL2 && null === x.get("ANGLE_instanced_arrays")) console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                else {
                    b.initAttributes();
                    var i = n.attributes,
                        r = e.getAttributes(),
                        a = t.defaultAttributeValues;
                    for (var o in r) {
                        var s = r[o];
                        if (s >= 0) {
                            var c = i[o];
                            if (void 0 !== c) {
                                var l = c.normalized,
                                    h = c.itemSize,
                                    u = C.get(c);
                                if (void 0 === u) continue;
                                var p = u.buffer,
                                    d = u.type,
                                    f = u.bytesPerElement;
                                if (c.isInterleavedBufferAttribute) {
                                    var m = c.data,
                                        g = m.stride,
                                        v = c.offset;
                                    m && m.isInstancedInterleavedBuffer ? (b.enableAttributeAndDivisor(s, m.meshPerAttribute), void 0 === n.maxInstancedCount && (n.maxInstancedCount = m.meshPerAttribute * m.count)) : b.enableAttribute(s), y.bindBuffer(y.ARRAY_BUFFER, p), y.vertexAttribPointer(s, h, d, l, g * f, v * f)
                                } else c.isInstancedBufferAttribute ? (b.enableAttributeAndDivisor(s, c.meshPerAttribute), void 0 === n.maxInstancedCount && (n.maxInstancedCount = c.meshPerAttribute * c.count)) : b.enableAttribute(s), y.bindBuffer(y.ARRAY_BUFFER, p), y.vertexAttribPointer(s, h, d, l, 0, 0)
                            } else if (void 0 !== a) {
                                var M = a[o];
                                if (void 0 !== M) switch (M.length) {
                                    case 2:
                                        y.vertexAttrib2fv(s, M);
                                        break;
                                    case 3:
                                        y.vertexAttrib3fv(s, M);
                                        break;
                                    case 4:
                                        y.vertexAttrib4fv(s, M);
                                        break;
                                    default:
                                        y.vertexAttrib1fv(s, M)
                                }
                            }
                        }
                    }
                    b.disableUnusedAttributes()
                }
            }(i, s, n), null !== h && y.bindBuffer(y.ELEMENT_ARRAY_BUFFER, l.buffer));
            var f = 1 / 0;
            null !== h ? f = h.count : void 0 !== u && (f = u.count);
            var m = n.drawRange.start * p,
                g = n.drawRange.count * p,
                v = null !== a ? a.start * p : 0,
                M = null !== a ? a.count * p : 1 / 0,
                _ = Math.max(m, v),
                S = Math.min(f, m + g, v + M) - 1,
                E = Math.max(0, S - _ + 1);
            if (0 !== E) {
                if (r.isMesh)
                    if (!0 === i.wireframe) b.setLineWidth(i.wireframeLinewidth * Mt()), d.setMode(y.LINES);
                    else switch (r.drawMode) {
                        case Me:
                            d.setMode(y.TRIANGLES);
                            break;
                        case _e:
                            d.setMode(y.TRIANGLE_STRIP);
                            break;
                        case Se:
                            d.setMode(y.TRIANGLE_FAN)
                    } else if (r.isLine) {
                        var T = i.linewidth;
                        void 0 === T && (T = 1), b.setLineWidth(T * Mt()), r.isLineSegments ? d.setMode(y.LINES) : r.isLineLoop ? d.setMode(y.LINE_LOOP) : d.setMode(y.LINE_STRIP)
                    } else r.isPoints ? d.setMode(y.POINTS) : r.isSprite && d.setMode(y.TRIANGLES);
                n && n.isInstancedBufferGeometry ? n.maxInstancedCount > 0 && d.renderInstances(n, _, E) : d.render(_, E)
            }
        }, this.compile = function(t, e) {
            (m = N.get(t, e)).init(), t.traverse(function(t) {
                t.isLight && (m.pushLight(t), t.castShadow && m.pushShadow(t))
            }), m.setupLights(e), t.traverse(function(e) {
                if (e.material)
                    if (Array.isArray(e.material))
                        for (var n = 0; n < e.material.length; n++) zt(e.material[n], t.fog, e);
                    else zt(e.material, t.fog, e)
            })
        };
        var Dt = null,
            Bt = new sn;

        function Nt(t, e, n, i) {
            for (var r = 0, a = t.length; r < a; r++) {
                var o = t[r],
                    s = o.object,
                    c = o.geometry,
                    l = void 0 === i ? o.material : i,
                    h = o.group;
                if (n.isArrayCamera) {
                    at = n;
                    for (var u = n.cameras, p = 0, d = u.length; p < d; p++) {
                        var f = u[p];
                        if (s.layers.test(f.layers)) {
                            if ("viewport" in f) b.viewport(ot.copy(f.viewport));
                            else {
                                var m = f.bounds,
                                    g = m.x * ht,
                                    v = m.y * ut,
                                    y = m.z * ht,
                                    x = m.w * ut;
                                b.viewport(ot.set(g, v, y, x).multiplyScalar(pt))
                            }
                            kt(s, e, f, c, l, h)
                        }
                    }
                } else at = null, kt(s, e, n, c, l, h)
            }
        }

        function kt(t, e, n, i, r, a) {
            if (t.onBeforeRender(G, e, n, i, r, a), m = N.get(e, at || n), t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld), t.normalMatrix.getNormalMatrix(t.modelViewMatrix), t.isImmediateRenderObject) {
                b.setMaterial(r);
                var o = Ft(n, e.fog, r, t);
                nt.geometry = null, nt.program = null, nt.wireframe = !1,
                    function(t, e) {
                        t.render(function(t) {
                            G.renderBufferImmediate(t, e)
                        })
                    }(t, o)
            } else G.renderBufferDirect(n, e.fog, i, r, t, a);
            t.onAfterRender(G, e, n, i, r, a), m = N.get(e, at || n)
        }

        function zt(t, e, n) {
            var i = R.get(t),
                r = m.state.lights,
                a = m.state.shadowsArray,
                o = i.lightsHash,
                s = r.state.hash,
                c = D.getParameters(t, r.state, a, e, vt.numPlanes, vt.numIntersection, n),
                l = D.getProgramCode(t, c),
                h = i.program,
                u = !0;
            if (void 0 === h) t.addEventListener("dispose", It);
            else if (h.code !== l) Ot(t);
            else if (o.stateID !== s.stateID || o.directionalLength !== s.directionalLength || o.pointLength !== s.pointLength || o.spotLength !== s.spotLength || o.rectAreaLength !== s.rectAreaLength || o.hemiLength !== s.hemiLength || o.shadowsLength !== s.shadowsLength) o.stateID = s.stateID, o.directionalLength = s.directionalLength, o.pointLength = s.pointLength, o.spotLength = s.spotLength, o.rectAreaLength = s.rectAreaLength, o.hemiLength = s.hemiLength, o.shadowsLength = s.shadowsLength, u = !1;
            else {
                if (void 0 !== c.shaderID) return;
                u = !1
            }
            if (u) {
                if (c.shaderID) {
                    var p = on[c.shaderID];
                    i.shader = {
                        name: t.type,
                        uniforms: en.clone(p.uniforms),
                        vertexShader: p.vertexShader,
                        fragmentShader: p.fragmentShader
                    }
                } else i.shader = {
                    name: t.type,
                    uniforms: t.uniforms,
                    vertexShader: t.vertexShader,
                    fragmentShader: t.fragmentShader
                };
                t.onBeforeCompile(i.shader, G), l = D.getProgramCode(t, c), h = D.acquireProgram(t, i.shader, c, l), i.program = h, t.program = h
            }
            var d = h.getAttributes();
            if (t.morphTargets) {
                t.numSupportedMorphTargets = 0;
                for (var f = 0; f < G.maxMorphTargets; f++) d["morphTarget" + f] >= 0 && t.numSupportedMorphTargets++
            }
            if (t.morphNormals)
                for (t.numSupportedMorphNormals = 0, f = 0; f < G.maxMorphNormals; f++) d["morphNormal" + f] >= 0 && t.numSupportedMorphNormals++;
            var g = i.shader.uniforms;
            (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (i.numClippingPlanes = vt.numPlanes, i.numIntersection = vt.numIntersection, g.clippingPlanes = vt.uniform), i.fog = e, void 0 === o && (i.lightsHash = o = {}), o.stateID = s.stateID, o.directionalLength = s.directionalLength, o.pointLength = s.pointLength, o.spotLength = s.spotLength, o.rectAreaLength = s.rectAreaLength, o.hemiLength = s.hemiLength, o.shadowsLength = s.shadowsLength, t.lights && (g.ambientLightColor.value = r.state.ambient, g.directionalLights.value = r.state.directional, g.spotLights.value = r.state.spot, g.rectAreaLights.value = r.state.rectArea, g.pointLights.value = r.state.point, g.hemisphereLights.value = r.state.hemi, g.directionalShadowMap.value = r.state.directionalShadowMap, g.directionalShadowMatrix.value = r.state.directionalShadowMatrix, g.spotShadowMap.value = r.state.spotShadowMap, g.spotShadowMatrix.value = r.state.spotShadowMatrix, g.pointShadowMap.value = r.state.pointShadowMap, g.pointShadowMatrix.value = r.state.pointShadowMatrix);
            var v = i.program.getUniforms(),
                y = Ci.seqWithValue(v.seq, g);
            i.uniformsList = y
        }

        function Ft(t, e, n, i) {
            lt = 0;
            var r = R.get(n),
                a = m.state.lights,
                o = r.lightsHash,
                s = a.state.hash;
            if (yt && (xt || t !== rt)) {
                var c = t === rt && n.id === et;
                vt.setState(n.clippingPlanes, n.clipIntersection, n.clipShadows, t, r, c)
            }!1 === n.needsUpdate && (void 0 === r.program ? n.needsUpdate = !0 : n.fog && r.fog !== e ? n.needsUpdate = !0 : (!n.lights || o.stateID === s.stateID && o.directionalLength === s.directionalLength && o.pointLength === s.pointLength && o.spotLength === s.spotLength && o.rectAreaLength === s.rectAreaLength && o.hemiLength === s.hemiLength && o.shadowsLength === s.shadowsLength) && (void 0 === r.numClippingPlanes || r.numClippingPlanes === vt.numPlanes && r.numIntersection === vt.numIntersection) || (n.needsUpdate = !0)), n.needsUpdate && (zt(n, e, i), n.needsUpdate = !1);
            var l = !1,
                h = !1,
                u = !1,
                p = r.program,
                d = p.getUniforms(),
                f = r.shader.uniforms;
            if (b.useProgram(p.program) && (l = !0, h = !0, u = !0), n.id !== et && (et = n.id, h = !0), l || t !== rt) {
                if (d.setValue(y, "projectionMatrix", t.projectionMatrix), w.logarithmicDepthBuffer && d.setValue(y, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)), rt !== (at || t) && (rt = at || t, h = !0, u = !0), n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshStandardMaterial || n.envMap) {
                    var v = d.map.cameraPosition;
                    void 0 !== v && v.setValue(y, bt.setFromMatrixPosition(t.matrixWorld))
                }(n.isMeshPhongMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.skinning) && d.setValue(y, "viewMatrix", t.matrixWorldInverse)
            }
            if (n.skinning) {
                d.setOptional(y, i, "bindMatrix"), d.setOptional(y, i, "bindMatrixInverse");
                var x = i.skeleton;
                if (x) {
                    var M = x.bones;
                    if (w.floatVertexTextures) {
                        if (void 0 === x.boneTexture) {
                            var _ = Math.sqrt(4 * M.length);
                            _ = ke.ceilPowerOfTwo(_), _ = Math.max(_, 4);
                            var S = new Float32Array(_ * _ * 4);
                            S.set(x.boneMatrices);
                            var E = new Ze(S, _, _, Ut, Pt);
                            E.needsUpdate = !0, x.boneMatrices = S, x.boneTexture = E, x.boneTextureSize = _
                        }
                        d.setValue(y, "boneTexture", x.boneTexture), d.setValue(y, "boneTextureSize", x.boneTextureSize)
                    } else d.setOptional(y, x, "boneMatrices")
                }
            }
            return h && (d.setValue(y, "toneMappingExposure", G.toneMappingExposure), d.setValue(y, "toneMappingWhitePoint", G.toneMappingWhitePoint), n.lights && function(t, e) {
                t.ambientLightColor.needsUpdate = e, t.directionalLights.needsUpdate = e, t.pointLights.needsUpdate = e, t.spotLights.needsUpdate = e, t.rectAreaLights.needsUpdate = e, t.hemisphereLights.needsUpdate = e
            }(f, u), e && n.fog && function(t, e) {
                t.fogColor.value = e.color, e.isFog ? (t.fogNear.value = e.near, t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density)
            }(f, e), n.isMeshBasicMaterial ? Ht(f, n) : n.isMeshLambertMaterial ? (Ht(f, n), function(t, e) {
                e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
            }(f, n)) : n.isMeshPhongMaterial ? (Ht(f, n), n.isMeshToonMaterial ? function(t, e) {
                Gt(t, e), e.gradientMap && (t.gradientMap.value = e.gradientMap)
            }(f, n) : Gt(f, n)) : n.isMeshStandardMaterial ? (Ht(f, n), n.isMeshPhysicalMaterial ? function(t, e) {
                jt(t, e), t.reflectivity.value = e.reflectivity, t.clearCoat.value = e.clearCoat, t.clearCoatRoughness.value = e.clearCoatRoughness
            }(f, n) : jt(f, n)) : n.isMeshDepthMaterial ? (Ht(f, n), function(t, e) {
                e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias)
            }(f, n)) : n.isMeshDistanceMaterial ? (Ht(f, n), function(t, e) {
                e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias), t.referencePosition.value.copy(e.referencePosition), t.nearDistance.value = e.nearDistance, t.farDistance.value = e.farDistance
            }(f, n)) : n.isMeshNormalMaterial ? (Ht(f, n), function(t, e) {
                e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === g && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === g && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias)
            }(f, n)) : n.isLineBasicMaterial ? (function(t, e) {
                t.diffuse.value = e.color, t.opacity.value = e.opacity
            }(f, n), n.isLineDashedMaterial && function(t, e) {
                t.dashSize.value = e.dashSize, t.totalSize.value = e.dashSize + e.gapSize, t.scale.value = e.scale
            }(f, n)) : n.isPointsMaterial ? function(t, e) {
                t.diffuse.value = e.color, t.opacity.value = e.opacity, t.size.value = e.size * pt, t.scale.value = .5 * ut, t.map.value = e.map, null !== e.map && (!0 === e.map.matrixAutoUpdate && e.map.updateMatrix(), t.uvTransform.value.copy(e.map.matrix))
            }(f, n) : n.isSpriteMaterial ? function(t, e) {
                t.diffuse.value = e.color, t.opacity.value = e.opacity, t.rotation.value = e.rotation, t.map.value = e.map, null !== e.map && (!0 === e.map.matrixAutoUpdate && e.map.updateMatrix(), t.uvTransform.value.copy(e.map.matrix))
            }(f, n) : n.isShadowMaterial && (f.color.value = n.color, f.opacity.value = n.opacity), void 0 !== f.ltc_1 && (f.ltc_1.value = an.LTC_1), void 0 !== f.ltc_2 && (f.ltc_2.value = an.LTC_2), Ci.upload(y, r.uniformsList, f, G)), n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (Ci.upload(y, r.uniformsList, f, G), n.uniformsNeedUpdate = !1), n.isSpriteMaterial && d.setValue(y, "center", i.center), d.setValue(y, "modelViewMatrix", i.modelViewMatrix), d.setValue(y, "normalMatrix", i.normalMatrix), d.setValue(y, "modelMatrix", i.matrixWorld), p
        }

        function Ht(t, e) {
            var n;
            t.opacity.value = e.opacity, e.color && (t.diffuse.value = e.color), e.emissive && t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity), e.map && (t.map.value = e.map), e.alphaMap && (t.alphaMap.value = e.alphaMap), e.specularMap && (t.specularMap.value = e.specularMap), e.envMap && (t.envMap.value = e.envMap, t.flipEnvMap.value = e.envMap && e.envMap.isCubeTexture ? -1 : 1, t.reflectivity.value = e.reflectivity, t.refractionRatio.value = e.refractionRatio, t.maxMipLevel.value = R.get(e.envMap).__maxMipLevel), e.lightMap && (t.lightMap.value = e.lightMap, t.lightMapIntensity.value = e.lightMapIntensity), e.aoMap && (t.aoMap.value = e.aoMap, t.aoMapIntensity.value = e.aoMapIntensity), e.map ? n = e.map : e.specularMap ? n = e.specularMap : e.displacementMap ? n = e.displacementMap : e.normalMap ? n = e.normalMap : e.bumpMap ? n = e.bumpMap : e.roughnessMap ? n = e.roughnessMap : e.metalnessMap ? n = e.metalnessMap : e.alphaMap ? n = e.alphaMap : e.emissiveMap && (n = e.emissiveMap), void 0 !== n && (n.isWebGLRenderTarget && (n = n.texture), !0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix))
        }

        function Gt(t, e) {
            t.specular.value = e.specular, t.shininess.value = Math.max(e.shininess, 1e-4), e.emissiveMap && (t.emissiveMap.value = e.emissiveMap), e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === g && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === g && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias)
        }

        function jt(t, e) {
            t.roughness.value = e.roughness, t.metalness.value = e.metalness, e.roughnessMap && (t.roughnessMap.value = e.roughnessMap), e.metalnessMap && (t.metalnessMap.value = e.metalnessMap), e.emissiveMap && (t.emissiveMap.value = e.emissiveMap), e.bumpMap && (t.bumpMap.value = e.bumpMap, t.bumpScale.value = e.bumpScale, e.side === g && (t.bumpScale.value *= -1)), e.normalMap && (t.normalMap.value = e.normalMap, t.normalScale.value.copy(e.normalScale), e.side === g && t.normalScale.value.negate()), e.displacementMap && (t.displacementMap.value = e.displacementMap, t.displacementScale.value = e.displacementScale, t.displacementBias.value = e.displacementBias), e.envMap && (t.envMapIntensity.value = e.envMapIntensity)
        }
        Bt.setAnimationLoop(function(t) {
            Tt.isPresenting() || Dt && Dt(t)
        }), "undefined" != typeof window && Bt.setContext(window), this.setAnimationLoop = function(t) {
            Dt = t, Tt.setAnimationLoop(t), Bt.start()
        }, this.render = function(t, e, n, i) {
            if (e && e.isCamera) {
                if (!j) {
                    nt.geometry = null, nt.program = null, nt.wireframe = !1, et = -1, rt = null, !0 === t.autoUpdate && t.updateMatrixWorld(), null === e.parent && e.updateMatrixWorld(), Tt.enabled && (e = Tt.getCamera(e)), (m = N.get(t, e)).init(), t.onBeforeRender(G, t, e, n), wt.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), gt.setFromMatrix(wt), xt = this.localClippingEnabled, yt = vt.init(this.clippingPlanes, xt, e), (f = B.get(t, e)).init(),
                        function t(e, n, i) {
                            if (!1 !== e.visible) {
                                if (e.layers.test(n.layers))
                                    if (e.isLight) m.pushLight(e), e.castShadow && m.pushShadow(e);
                                    else if (e.isSprite) {
                                    if (!e.frustumCulled || gt.intersectsSprite(e)) {
                                        i && bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt);
                                        var r = O.update(e),
                                            a = e.material;
                                        f.push(e, r, a, bt.z, null)
                                    }
                                } else if (e.isImmediateRenderObject) i && bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt), f.push(e, null, e.material, bt.z, null);
                                else if ((e.isMesh || e.isLine || e.isPoints) && (e.isSkinnedMesh && e.skeleton.update(), !e.frustumCulled || gt.intersectsObject(e))) {
                                    i && bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt);
                                    r = O.update(e), a = e.material;
                                    if (Array.isArray(a))
                                        for (var o = r.groups, s = 0, c = o.length; s < c; s++) {
                                            var l = o[s],
                                                h = a[l.materialIndex];
                                            h && h.visible && f.push(e, r, h, bt.z, l)
                                        } else a.visible && f.push(e, r, a, bt.z, null)
                                }
                                var u = e.children;
                                for (s = 0, c = u.length; s < c; s++) t(u[s], n, i)
                            }
                        }(t, e, G.sortObjects), !0 === G.sortObjects && f.sort(), yt && vt.beginShadows();
                    var r = m.state.shadowsArray;
                    At.render(r, t, e), m.setupLights(e), yt && vt.endShadows(), this.info.autoReset && this.info.reset(), void 0 === n && (n = null), this.setRenderTarget(n), k.render(f, t, e, i);
                    var a = f.opaque,
                        o = f.transparent;
                    if (t.overrideMaterial) {
                        var s = t.overrideMaterial;
                        a.length && Nt(a, t, e, s), o.length && Nt(o, t, e, s)
                    } else a.length && Nt(a, t, e), o.length && Nt(o, t, e);
                    n && P.updateRenderTargetMipmap(n), b.buffers.depth.setTest(!0), b.buffers.depth.setMask(!0), b.buffers.color.setMask(!0), b.setPolygonOffset(!1), t.onAfterRender(G, t, e), Tt.enabled && Tt.submitFrame(), f = null, m = null
                }
            } else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")
        }, this.allocTextureUnit = function() {
            var t = lt;
            return t >= w.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + t + " texture units while this GPU supports only " + w.maxTextures), lt += 1, t
        }, this.setTexture2D = function() {
            var t = !1;
            return function(e, n) {
                e && e.isWebGLRenderTarget && (t || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), t = !0), e = e.texture), P.setTexture2D(e, n)
            }
        }(), this.setTexture = function() {
            var t = !1;
            return function(e, n) {
                t || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), t = !0), P.setTexture2D(e, n)
            }
        }(), this.setTextureCube = function() {
            var t = !1;
            return function(e, n) {
                e && e.isWebGLRenderTargetCube && (t || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), t = !0), e = e.texture), e && e.isCubeTexture || Array.isArray(e.image) && 6 === e.image.length ? P.setTextureCube(e, n) : P.setTextureCubeDynamic(e, n)
            }
        }(), this.setFramebuffer = function(t) {
            V = t
        }, this.getRenderTarget = function() {
            return $
        }, this.setRenderTarget = function(t) {
            $ = t, t && void 0 === R.get(t).__webglFramebuffer && P.setupRenderTarget(t);
            var e = V,
                n = !1;
            if (t) {
                var i = R.get(t).__webglFramebuffer;
                t.isWebGLRenderTargetCube ? (e = i[t.activeCubeFace], n = !0) : e = i, ot.copy(t.viewport), st.copy(t.scissor), ct = t.scissorTest
            } else ot.copy(dt).multiplyScalar(pt), st.copy(ft).multiplyScalar(pt), ct = mt;
            if (tt !== e && (y.bindFramebuffer(y.FRAMEBUFFER, e), tt = e), b.viewport(ot), b.scissor(st), b.setScissorTest(ct), n) {
                var r = R.get(t.texture);
                y.framebufferTexture2D(y.FRAMEBUFFER, y.COLOR_ATTACHMENT0, y.TEXTURE_CUBE_MAP_POSITIVE_X + t.activeCubeFace, r.__webglTexture, t.activeMipMapLevel)
            }
        }, this.readRenderTargetPixels = function(t, e, n, i, r, a) {
            if (t && t.isWebGLRenderTarget) {
                var o = R.get(t).__webglFramebuffer;
                if (o) {
                    var s = !1;
                    o !== tt && (y.bindFramebuffer(y.FRAMEBUFFER, o), s = !0);
                    try {
                        var c = t.texture,
                            l = c.format,
                            h = c.type;
                        if (l !== Ut && H.convert(l) !== y.getParameter(y.IMPLEMENTATION_COLOR_READ_FORMAT)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        if (!(h === St || H.convert(h) === y.getParameter(y.IMPLEMENTATION_COLOR_READ_TYPE) || h === Pt && (w.isWebGL2 || x.get("OES_texture_float") || x.get("WEBGL_color_buffer_float")) || h === Ct && (w.isWebGL2 ? x.get("EXT_color_buffer_float") : x.get("EXT_color_buffer_half_float")))) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        y.checkFramebufferStatus(y.FRAMEBUFFER) === y.FRAMEBUFFER_COMPLETE ? e >= 0 && e <= t.width - i && n >= 0 && n <= t.height - r && y.readPixels(e, n, i, r, H.convert(l), H.convert(h), a) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                    } finally {
                        s && y.bindFramebuffer(y.FRAMEBUFFER, tt)
                    }
                }
            } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")
        }, this.copyFramebufferToTexture = function(t, e, n) {
            var i = e.image.width,
                r = e.image.height,
                a = H.convert(e.format);
            this.setTexture2D(e, 0), y.copyTexImage2D(y.TEXTURE_2D, n || 0, a, t.x, t.y, i, r, 0)
        }, this.copyTextureToTexture = function(t, e, n, i) {
            var r = e.image.width,
                a = e.image.height,
                o = H.convert(n.format),
                s = H.convert(n.type);
            this.setTexture2D(n, 0), e.isDataTexture ? y.texSubImage2D(y.TEXTURE_2D, i || 0, t.x, t.y, r, a, o, s, e.image.data) : y.texSubImage2D(y.TEXTURE_2D, i || 0, t.x, t.y, o, s, e.image)
        }
    }

    function ir(t, e) {
        this.name = "", this.color = new rn(t), this.density = void 0 !== e ? e : 25e-5
    }

    function rr(t, e, n) {
        this.name = "", this.color = new rn(t), this.near = void 0 !== e ? e : 1, this.far = void 0 !== n ? n : 1e3
    }

    function ar() {
        un.call(this), this.type = "Scene", this.background = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = !0
    }

    function or(t, e) {
        this.array = t, this.stride = e, this.count = void 0 !== t ? t.length / e : 0, this.dynamic = !1, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0
    }

    function sr(t, e, n, i) {
        this.data = t, this.itemSize = e, this.offset = n, this.normalized = !0 === i
    }

    function cr(t) {
        Nn.call(this), this.type = "SpriteMaterial", this.color = new rn(16777215), this.map = null, this.rotation = 0, this.lights = !1, this.transparent = !0, this.setValues(t)
    }

    function lr(t) {
        if (un.call(this), this.type = "Sprite", void 0 === Vi) {
            Vi = new Pn;
            var e = new or(new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]), 5);
            Vi.setIndex([0, 1, 2, 0, 2, 3]), Vi.addAttribute("position", new sr(e, 3, 0, !1)), Vi.addAttribute("uv", new sr(e, 2, 3, !1))
        }
        this.geometry = Vi, this.material = void 0 !== t ? t : new cr, this.center = new Ue(.5, .5)
    }

    function hr() {
        un.call(this), this.type = "LOD", Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            }
        })
    }

    function ur(t, e) {
        if (t = t || [], this.bones = t.slice(0), this.boneMatrices = new Float32Array(16 * this.bones.length), void 0 === e) this.calculateInverses();
        else if (this.bones.length === e.length) this.boneInverses = e.slice(0);
        else {
            console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [];
            for (var n = 0, i = this.bones.length; n < i; n++) this.boneInverses.push(new ze)
        }
    }

    function pr() {
        un.call(this), this.type = "Bone"
    }

    function dr(t, e) {
        Hn.call(this, t, e), this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new ze, this.bindMatrixInverse = new ze;
        var n = new ur(this.initBones());
        this.bind(n, this.matrixWorld), this.normalizeSkinWeights()
    }

    function fr(t) {
        Nn.call(this), this.type = "LineBasicMaterial", this.color = new rn(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.lights = !1, this.setValues(t)
    }

    function mr(t, e, n) {
        1 === n && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."), un.call(this), this.type = "Line", this.geometry = void 0 !== t ? t : new Pn, this.material = void 0 !== e ? e : new fr({
            color: 16777215 * Math.random()
        })
    }

    function gr(t, e) {
        mr.call(this, t, e), this.type = "LineSegments"
    }

    function vr(t, e) {
        mr.call(this, t, e), this.type = "LineLoop"
    }

    function yr(t) {
        Nn.call(this), this.type = "PointsMaterial", this.color = new rn(16777215), this.map = null, this.size = 1, this.sizeAttenuation = !0, this.morphTargets = !1, this.lights = !1, this.setValues(t)
    }

    function xr(t, e) {
        un.call(this), this.type = "Points", this.geometry = void 0 !== t ? t : new Pn, this.material = void 0 !== e ? e : new yr({
            color: 16777215 * Math.random()
        })
    }

    function wr(t, e, n, i, r, a, o, s, c) {
        We.call(this, t, e, n, i, r, a, o, s, c), this.generateMipmaps = !1
    }

    function br(t, e, n, i, r, a, o, s, c, l, h, u) {
        We.call(this, null, a, o, s, c, l, i, r, h, u), this.image = {
            width: e,
            height: n
        }, this.mipmaps = t, this.flipY = !1, this.generateMipmaps = !1
    }

    function Mr(t, e, n, i, r, a, o, s, c) {
        We.call(this, t, e, n, i, r, a, o, s, c), this.needsUpdate = !0
    }

    function _r(t, e, n, i, r, a, o, s, c, l) {
        if ((l = void 0 !== l ? l : Gt) !== Gt && l !== jt) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        void 0 === n && l === Gt && (n = At), void 0 === n && l === jt && (n = Bt), We.call(this, null, i, r, a, o, s, l, n, c), this.image = {
            width: t,
            height: e
        }, this.magFilter = void 0 !== o ? o : yt, this.minFilter = void 0 !== s ? s : yt, this.flipY = !1, this.generateMipmaps = !1
    }

    function Sr(t) {
        Pn.call(this), this.type = "WireframeGeometry";
        var e, n, i, r, a, o, s, c, l, h, u = [],
            p = [0, 0],
            d = {},
            f = ["a", "b", "c"];
        if (t && t.isGeometry) {
            var m = t.faces;
            for (e = 0, i = m.length; e < i; e++) {
                var g = m[e];
                for (n = 0; n < 3; n++) s = g[f[n]], c = g[f[(n + 1) % 3]], p[0] = Math.min(s, c), p[1] = Math.max(s, c), void 0 === d[l = p[0] + "," + p[1]] && (d[l] = {
                    index1: p[0],
                    index2: p[1]
                })
            }
            for (l in d) o = d[l], h = t.vertices[o.index1], u.push(h.x, h.y, h.z), h = t.vertices[o.index2], u.push(h.x, h.y, h.z)
        } else if (t && t.isBufferGeometry) {
            var v, y, x, w, b, M, _;
            if (h = new He, null !== t.index) {
                for (v = t.attributes.position, y = t.index, 0 === (x = t.groups).length && (x = [{
                        start: 0,
                        count: y.count,
                        materialIndex: 0
                    }]), r = 0, a = x.length; r < a; ++r)
                    for (e = b = (w = x[r]).start, i = b + w.count; e < i; e += 3)
                        for (n = 0; n < 3; n++) s = y.getX(e + n), c = y.getX(e + (n + 1) % 3), p[0] = Math.min(s, c), p[1] = Math.max(s, c), void 0 === d[l = p[0] + "," + p[1]] && (d[l] = {
                            index1: p[0],
                            index2: p[1]
                        });
                for (l in d) o = d[l], h.fromBufferAttribute(v, o.index1), u.push(h.x, h.y, h.z), h.fromBufferAttribute(v, o.index2), u.push(h.x, h.y, h.z)
            } else
                for (e = 0, i = (v = t.attributes.position).count / 3; e < i; e++)
                    for (n = 0; n < 3; n++) M = 3 * e + n, h.fromBufferAttribute(v, M), u.push(h.x, h.y, h.z), _ = 3 * e + (n + 1) % 3, h.fromBufferAttribute(v, _), u.push(h.x, h.y, h.z)
        }
        this.addAttribute("position", new En(u, 3))
    }

    function Er(t, e, n) {
        gn.call(this), this.type = "ParametricGeometry", this.parameters = {
            func: t,
            slices: e,
            stacks: n
        }, this.fromBufferGeometry(new Tr(t, e, n)), this.mergeVertices()
    }

    function Tr(t, e, n) {
        Pn.call(this), this.type = "ParametricBufferGeometry", this.parameters = {
            func: t,
            slices: e,
            stacks: n
        };
        var i, r, a = [],
            o = [],
            s = [],
            c = [],
            l = new He,
            h = new He,
            u = new He,
            p = new He,
            d = new He;
        t.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
        var f = e + 1;
        for (i = 0; i <= n; i++) {
            var m = i / n;
            for (r = 0; r <= e; r++) {
                var g = r / e;
                t(g, m, h), o.push(h.x, h.y, h.z), g - 1e-5 >= 0 ? (t(g - 1e-5, m, u), p.subVectors(h, u)) : (t(g + 1e-5, m, u), p.subVectors(u, h)), m - 1e-5 >= 0 ? (t(g, m - 1e-5, u), d.subVectors(h, u)) : (t(g, m + 1e-5, u), d.subVectors(u, h)), l.crossVectors(p, d).normalize(), s.push(l.x, l.y, l.z), c.push(g, m)
            }
        }
        for (i = 0; i < n; i++)
            for (r = 0; r < e; r++) {
                var v = i * f + r,
                    y = i * f + r + 1,
                    x = (i + 1) * f + r + 1,
                    w = (i + 1) * f + r;
                a.push(v, y, w), a.push(y, x, w)
            }
        this.setIndex(a), this.addAttribute("position", new En(o, 3)), this.addAttribute("normal", new En(s, 3)), this.addAttribute("uv", new En(c, 2))
    }

    function Ar(t, e, n, i) {
        gn.call(this), this.type = "PolyhedronGeometry", this.parameters = {
            vertices: t,
            indices: e,
            radius: n,
            detail: i
        }, this.fromBufferGeometry(new Lr(t, e, n, i)), this.mergeVertices()
    }

    function Lr(t, e, n, i) {
        Pn.call(this), this.type = "PolyhedronBufferGeometry", this.parameters = {
            vertices: t,
            indices: e,
            radius: n,
            detail: i
        }, n = n || 1;
        var r = [],
            a = [];

        function o(t, e, n, i) {
            var r, a, o = Math.pow(2, i),
                c = [];
            for (r = 0; r <= o; r++) {
                c[r] = [];
                var l = t.clone().lerp(n, r / o),
                    h = e.clone().lerp(n, r / o),
                    u = o - r;
                for (a = 0; a <= u; a++) c[r][a] = 0 === a && r === o ? l : l.clone().lerp(h, a / u)
            }
            for (r = 0; r < o; r++)
                for (a = 0; a < 2 * (o - r) - 1; a++) {
                    var p = Math.floor(a / 2);
                    a % 2 == 0 ? (s(c[r][p + 1]), s(c[r + 1][p]), s(c[r][p])) : (s(c[r][p + 1]), s(c[r + 1][p + 1]), s(c[r + 1][p]))
                }
        }

        function s(t) {
            r.push(t.x, t.y, t.z)
        }

        function c(e, n) {
            var i = 3 * e;
            n.x = t[i + 0], n.y = t[i + 1], n.z = t[i + 2]
        }

        function l(t, e, n, i) {
            i < 0 && 1 === t.x && (a[e] = t.x - 1), 0 === n.x && 0 === n.z && (a[e] = i / 2 / Math.PI + .5)
        }

        function h(t) {
            return Math.atan2(t.z, -t.x)
        }

        function u(t) {
            return Math.atan2(-t.y, Math.sqrt(t.x * t.x + t.z * t.z))
        }! function(t) {
            for (var n = new He, i = new He, r = new He, a = 0; a < e.length; a += 3) c(e[a + 0], n), c(e[a + 1], i), c(e[a + 2], r), o(n, i, r, t)
        }(i = i || 0),
        function(t) {
            for (var e = new He, n = 0; n < r.length; n += 3) e.x = r[n + 0], e.y = r[n + 1], e.z = r[n + 2], e.normalize().multiplyScalar(t), r[n + 0] = e.x, r[n + 1] = e.y, r[n + 2] = e.z
        }(n),
        function() {
            for (var t = new He, e = 0; e < r.length; e += 3) {
                t.x = r[e + 0], t.y = r[e + 1], t.z = r[e + 2];
                var n = h(t) / 2 / Math.PI + .5,
                    i = u(t) / Math.PI + .5;
                a.push(n, 1 - i)
            }(function() {
                for (var t = new He, e = new He, n = new He, i = new He, o = new Ue, s = new Ue, c = new Ue, u = 0, p = 0; u < r.length; u += 9, p += 6) {
                    t.set(r[u + 0], r[u + 1], r[u + 2]), e.set(r[u + 3], r[u + 4], r[u + 5]), n.set(r[u + 6], r[u + 7], r[u + 8]), o.set(a[p + 0], a[p + 1]), s.set(a[p + 2], a[p + 3]), c.set(a[p + 4], a[p + 5]), i.copy(t).add(e).add(n).divideScalar(3);
                    var d = h(i);
                    l(o, p + 0, t, d), l(s, p + 2, e, d), l(c, p + 4, n, d)
                }
            })(),
            function() {
                for (var t = 0; t < a.length; t += 6) {
                    var e = a[t + 0],
                        n = a[t + 2],
                        i = a[t + 4],
                        r = Math.max(e, n, i),
                        o = Math.min(e, n, i);
                    r > .9 && o < .1 && (e < .2 && (a[t + 0] += 1), n < .2 && (a[t + 2] += 1), i < .2 && (a[t + 4] += 1))
                }
            }()
        }(), this.addAttribute("position", new En(r, 3)), this.addAttribute("normal", new En(r.slice(), 3)), this.addAttribute("uv", new En(a, 2)), 0 === i ? this.computeVertexNormals() : this.normalizeNormals()
    }

    function Rr(t, e) {
        gn.call(this), this.type = "TetrahedronGeometry", this.parameters = {
            radius: t,
            detail: e
        }, this.fromBufferGeometry(new Pr(t, e)), this.mergeVertices()
    }

    function Pr(t, e) {
        Lr.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t, e), this.type = "TetrahedronBufferGeometry", this.parameters = {
            radius: t,
            detail: e
        }
    }

    function Cr(t, e) {
        gn.call(this), this.type = "OctahedronGeometry", this.parameters = {
            radius: t,
            detail: e
        }, this.fromBufferGeometry(new Ir(t, e)), this.mergeVertices()
    }

    function Ir(t, e) {
        Lr.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t, e), this.type = "OctahedronBufferGeometry", this.parameters = {
            radius: t,
            detail: e
        }
    }

    function Or(t, e) {
        gn.call(this), this.type = "IcosahedronGeometry", this.parameters = {
            radius: t,
            detail: e
        }, this.fromBufferGeometry(new Dr(t, e)), this.mergeVertices()
    }

    function Dr(t, e) {
        var n = (1 + Math.sqrt(5)) / 2,
            i = [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1];
        Lr.call(this, i, [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t, e), this.type = "IcosahedronBufferGeometry", this.parameters = {
            radius: t,
            detail: e
        }
    }

    function Br(t, e) {
        gn.call(this), this.type = "DodecahedronGeometry", this.parameters = {
            radius: t,
            detail: e
        }, this.fromBufferGeometry(new Nr(t, e)), this.mergeVertices()
    }

    function Nr(t, e) {
        var n = (1 + Math.sqrt(5)) / 2,
            i = 1 / n,
            r = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, 0, -n, 0, -i, n, 0, -i, -n, 0, i, n, 0, i];
        Lr.call(this, r, [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], t, e), this.type = "DodecahedronBufferGeometry", this.parameters = {
            radius: t,
            detail: e
        }
    }

    function kr(t, e, n, i, r, a) {
        gn.call(this), this.type = "TubeGeometry", this.parameters = {
            path: t,
            tubularSegments: e,
            radius: n,
            radialSegments: i,
            closed: r
        }, void 0 !== a && console.warn("THREE.TubeGeometry: taper has been removed.");
        var o = new Ur(t, e, n, i, r);
        this.tangents = o.tangents, this.normals = o.normals, this.binormals = o.binormals, this.fromBufferGeometry(o), this.mergeVertices()
    }

    function Ur(t, e, n, i, r) {
        Pn.call(this), this.type = "TubeBufferGeometry", this.parameters = {
            path: t,
            tubularSegments: e,
            radius: n,
            radialSegments: i,
            closed: r
        }, e = e || 64, n = n || 1, i = i || 8, r = r || !1;
        var a = t.computeFrenetFrames(e, r);
        this.tangents = a.tangents, this.normals = a.normals, this.binormals = a.binormals;
        var o, s, c = new He,
            l = new He,
            h = new Ue,
            u = new He,
            p = [],
            d = [],
            f = [],
            m = [];

        function g(r) {
            u = t.getPointAt(r / e, u);
            var o = a.normals[r],
                h = a.binormals[r];
            for (s = 0; s <= i; s++) {
                var f = s / i * Math.PI * 2,
                    m = Math.sin(f),
                    g = -Math.cos(f);
                l.x = g * o.x + m * h.x, l.y = g * o.y + m * h.y, l.z = g * o.z + m * h.z, l.normalize(), d.push(l.x, l.y, l.z), c.x = u.x + n * l.x, c.y = u.y + n * l.y, c.z = u.z + n * l.z, p.push(c.x, c.y, c.z)
            }
        }! function() {
            for (o = 0; o < e; o++) g(o);
            g(!1 === r ? e : 0),
                function() {
                    for (o = 0; o <= e; o++)
                        for (s = 0; s <= i; s++) h.x = o / e, h.y = s / i, f.push(h.x, h.y)
                }(),
                function() {
                    for (s = 1; s <= e; s++)
                        for (o = 1; o <= i; o++) {
                            var t = (i + 1) * (s - 1) + (o - 1),
                                n = (i + 1) * s + (o - 1),
                                r = (i + 1) * s + o,
                                a = (i + 1) * (s - 1) + o;
                            m.push(t, n, a), m.push(n, r, a)
                        }
                }()
        }(), this.setIndex(m), this.addAttribute("position", new En(p, 3)), this.addAttribute("normal", new En(d, 3)), this.addAttribute("uv", new En(f, 2))
    }

    function zr(t, e, n, i, r, a, o) {
        gn.call(this), this.type = "TorusKnotGeometry", this.parameters = {
            radius: t,
            tube: e,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: a
        }, void 0 !== o && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."), this.fromBufferGeometry(new Fr(t, e, n, i, r, a)), this.mergeVertices()
    }

    function Fr(t, e, n, i, r, a) {
        Pn.call(this), this.type = "TorusKnotBufferGeometry", this.parameters = {
            radius: t,
            tube: e,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: a
        }, t = t || 1, e = e || .4, n = Math.floor(n) || 64, i = Math.floor(i) || 8, r = r || 2, a = a || 3;
        var o, s, c = [],
            l = [],
            h = [],
            u = [],
            p = new He,
            d = new He,
            f = new He,
            m = new He,
            g = new He,
            v = new He,
            y = new He;
        for (o = 0; o <= n; ++o) {
            var x = o / n * r * Math.PI * 2;
            for (A(x, r, a, t, f), A(x + .01, r, a, t, m), v.subVectors(m, f), y.addVectors(m, f), g.crossVectors(v, y), y.crossVectors(g, v), g.normalize(), y.normalize(), s = 0; s <= i; ++s) {
                var w = s / i * Math.PI * 2,
                    b = -e * Math.cos(w),
                    M = e * Math.sin(w);
                p.x = f.x + (b * y.x + M * g.x), p.y = f.y + (b * y.y + M * g.y), p.z = f.z + (b * y.z + M * g.z), l.push(p.x, p.y, p.z), d.subVectors(p, f).normalize(), h.push(d.x, d.y, d.z), u.push(o / n), u.push(s / i)
            }
        }
        for (s = 1; s <= n; s++)
            for (o = 1; o <= i; o++) {
                var _ = (i + 1) * (s - 1) + (o - 1),
                    S = (i + 1) * s + (o - 1),
                    E = (i + 1) * s + o,
                    T = (i + 1) * (s - 1) + o;
                c.push(_, S, T), c.push(S, E, T)
            }

        function A(t, e, n, i, r) {
            var a = Math.cos(t),
                o = Math.sin(t),
                s = n / e * t,
                c = Math.cos(s);
            r.x = i * (2 + c) * .5 * a, r.y = i * (2 + c) * o * .5, r.z = i * Math.sin(s) * .5
        }
        this.setIndex(c), this.addAttribute("position", new En(l, 3)), this.addAttribute("normal", new En(h, 3)), this.addAttribute("uv", new En(u, 2))
    }

    function Hr(t, e, n, i, r) {
        gn.call(this), this.type = "TorusGeometry", this.parameters = {
            radius: t,
            tube: e,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        }, this.fromBufferGeometry(new Gr(t, e, n, i, r)), this.mergeVertices()
    }

    function Gr(t, e, n, i, r) {
        Pn.call(this), this.type = "TorusBufferGeometry", this.parameters = {
            radius: t,
            tube: e,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        }, t = t || 1, e = e || .4, n = Math.floor(n) || 8, i = Math.floor(i) || 6, r = r || 2 * Math.PI;
        var a, o, s = [],
            c = [],
            l = [],
            h = [],
            u = new He,
            p = new He,
            d = new He;
        for (a = 0; a <= n; a++)
            for (o = 0; o <= i; o++) {
                var f = o / i * r,
                    m = a / n * Math.PI * 2;
                p.x = (t + e * Math.cos(m)) * Math.cos(f), p.y = (t + e * Math.cos(m)) * Math.sin(f), p.z = e * Math.sin(m), c.push(p.x, p.y, p.z), u.x = t * Math.cos(f), u.y = t * Math.sin(f), d.subVectors(p, u).normalize(), l.push(d.x, d.y, d.z), h.push(o / i), h.push(a / n)
            }
        for (a = 1; a <= n; a++)
            for (o = 1; o <= i; o++) {
                var g = (i + 1) * a + o - 1,
                    v = (i + 1) * (a - 1) + o - 1,
                    y = (i + 1) * (a - 1) + o,
                    x = (i + 1) * a + o;
                s.push(g, v, x), s.push(v, y, x)
            }
        this.setIndex(s), this.addAttribute("position", new En(c, 3)), this.addAttribute("normal", new En(l, 3)), this.addAttribute("uv", new En(h, 2))
    }
    Xi.prototype = Object.create(Nn.prototype), Xi.prototype.constructor = Xi, Xi.prototype.isMeshDepthMaterial = !0, Xi.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.depthPacking = t.depthPacking, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this
    }, qi.prototype = Object.create(Nn.prototype), qi.prototype.constructor = qi, qi.prototype.isMeshDistanceMaterial = !0, qi.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.referencePosition.copy(t.referencePosition), this.nearDistance = t.nearDistance, this.farDistance = t.farDistance, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this
    }, Qi.prototype = Object.assign(Object.create(un.prototype), {
        constructor: Qi,
        isGroup: !0
    }), $i.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: $i,
        isPerspectiveCamera: !0,
        copy: function(t, e) {
            return pn.prototype.copy.call(this, t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = null === t.view ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this
        },
        setFocalLength: function(t) {
            var e = .5 * this.getFilmHeight() / t;
            this.fov = 2 * ke.RAD2DEG * Math.atan(e), this.updateProjectionMatrix()
        },
        getFocalLength: function() {
            var t = Math.tan(.5 * ke.DEG2RAD * this.fov);
            return .5 * this.getFilmHeight() / t
        },
        getEffectiveFOV: function() {
            return 2 * ke.RAD2DEG * Math.atan(Math.tan(.5 * ke.DEG2RAD * this.fov) / this.zoom)
        },
        getFilmWidth: function() {
            return this.filmGauge * Math.min(this.aspect, 1)
        },
        getFilmHeight: function() {
            return this.filmGauge / Math.max(this.aspect, 1)
        },
        setViewOffset: function(t, e, n, i, r, a) {
            this.aspect = t / e, null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix()
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix()
        },
        updateProjectionMatrix: function() {
            var t = this.near,
                e = t * Math.tan(.5 * ke.DEG2RAD * this.fov) / this.zoom,
                n = 2 * e,
                i = this.aspect * n,
                r = -.5 * i,
                a = this.view;
            if (null !== this.view && this.view.enabled) {
                var o = a.fullWidth,
                    s = a.fullHeight;
                r += a.offsetX * i / o, e -= a.offsetY * n / s, i *= a.width / o, n *= a.height / s
            }
            var c = this.filmOffset;
            0 !== c && (r += t * c / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, e, e - n, t, this.far)
        },
        toJSON: function(t) {
            var e = un.prototype.toJSON.call(this, t);
            return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, null !== this.view && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e
        }
    }), tr.prototype = Object.assign(Object.create($i.prototype), {
        constructor: tr,
        isArrayCamera: !0
    }), ir.prototype.isFogExp2 = !0, ir.prototype.clone = function() {
        return new ir(this.color, this.density)
    }, ir.prototype.toJSON = function() {
        return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
        }
    }, rr.prototype.isFog = !0, rr.prototype.clone = function() {
        return new rr(this.color, this.near, this.far)
    }, rr.prototype.toJSON = function() {
        return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        }
    }, ar.prototype = Object.assign(Object.create(un.prototype), {
        constructor: ar,
        copy: function(t, e) {
            return un.prototype.copy.call(this, t, e), null !== t.background && (this.background = t.background.clone()), null !== t.fog && (this.fog = t.fog.clone()), null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()), this.autoUpdate = t.autoUpdate, this.matrixAutoUpdate = t.matrixAutoUpdate, this
        },
        toJSON: function(t) {
            var e = un.prototype.toJSON.call(this, t);
            return null !== this.background && (e.object.background = this.background.toJSON(t)), null !== this.fog && (e.object.fog = this.fog.toJSON()), e
        }
    }), Object.defineProperty(or.prototype, "needsUpdate", {
        set: function(t) {
            !0 === t && this.version++
        }
    }), Object.assign(or.prototype, {
        isInterleavedBuffer: !0,
        onUploadCallback: function() {},
        setArray: function(t) {
            if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            return this.count = void 0 !== t ? t.length / this.stride : 0, this.array = t, this
        },
        setDynamic: function(t) {
            return this.dynamic = t, this
        },
        copy: function(t) {
            return this.array = new t.array.constructor(t.array), this.count = t.count, this.stride = t.stride, this.dynamic = t.dynamic, this
        },
        copyAt: function(t, e, n) {
            t *= this.stride, n *= e.stride;
            for (var i = 0, r = this.stride; i < r; i++) this.array[t + i] = e.array[n + i];
            return this
        },
        set: function(t, e) {
            return void 0 === e && (e = 0), this.array.set(t, e), this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        onUpload: function(t) {
            return this.onUploadCallback = t, this
        }
    }), Object.defineProperties(sr.prototype, {
        count: {
            get: function() {
                return this.data.count
            }
        },
        array: {
            get: function() {
                return this.data.array
            }
        }
    }), Object.assign(sr.prototype, {
        isInterleavedBufferAttribute: !0,
        setX: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset] = e, this
        },
        setY: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset + 1] = e, this
        },
        setZ: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset + 2] = e, this
        },
        setW: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset + 3] = e, this
        },
        getX: function(t) {
            return this.data.array[t * this.data.stride + this.offset]
        },
        getY: function(t) {
            return this.data.array[t * this.data.stride + this.offset + 1]
        },
        getZ: function(t) {
            return this.data.array[t * this.data.stride + this.offset + 2]
        },
        getW: function(t) {
            return this.data.array[t * this.data.stride + this.offset + 3]
        },
        setXY: function(t, e, n) {
            return t = t * this.data.stride + this.offset, this.data.array[t + 0] = e, this.data.array[t + 1] = n, this
        },
        setXYZ: function(t, e, n, i) {
            return t = t * this.data.stride + this.offset, this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = i, this
        },
        setXYZW: function(t, e, n, i, r) {
            return t = t * this.data.stride + this.offset, this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = i, this.data.array[t + 3] = r, this
        }
    }), cr.prototype = Object.create(Nn.prototype), cr.prototype.constructor = cr, cr.prototype.isSpriteMaterial = !0, cr.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this.map = t.map, this.rotation = t.rotation, this
    }, lr.prototype = Object.assign(Object.create(un.prototype), {
        constructor: lr,
        isSprite: !0,
        raycast: function() {
            var t = new He,
                e = new He,
                n = new He,
                i = new Ue,
                r = new Ue,
                a = new ze,
                o = new He,
                s = new He,
                c = new He;

            function l(t, e, n, o, s, c) {
                i.subVectors(t, n).addScalar(.5).multiply(o), void 0 !== s ? (r.x = c * i.x - s * i.y, r.y = s * i.x + c * i.y) : r.copy(i), t.copy(e), t.x += r.x, t.y += r.y, t.applyMatrix4(a)
            }
            return function(i, r) {
                e.setFromMatrixScale(this.matrixWorld), a.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld), n.setFromMatrixPosition(this.modelViewMatrix);
                var h, u, p = this.material.rotation;
                0 !== p && (u = Math.cos(p), h = Math.sin(p));
                var d = this.center;
                l(o.set(-.5, -.5, 0), n, d, e, h, u), l(s.set(.5, -.5, 0), n, d, e, h, u), l(c.set(.5, .5, 0), n, d, e, h, u);
                var f = i.ray.intersectTriangle(o, s, c, !1, t);
                if (null !== f || (l(s.set(-.5, .5, 0), n, d, e, h, u), null !== (f = i.ray.intersectTriangle(o, c, s, !1, t)))) {
                    var m = i.ray.origin.distanceTo(t);
                    m < i.near || m > i.far || r.push({
                        distance: m,
                        point: t.clone(),
                        face: null,
                        object: this
                    })
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.material).copy(this)
        },
        copy: function(t) {
            return un.prototype.copy.call(this, t), void 0 !== t.center && this.center.copy(t.center), this
        }
    }), hr.prototype = Object.assign(Object.create(un.prototype), {
        constructor: hr,
        copy: function(t) {
            un.prototype.copy.call(this, t, !1);
            for (var e = t.levels, n = 0, i = e.length; n < i; n++) {
                var r = e[n];
                this.addLevel(r.object.clone(), r.distance)
            }
            return this
        },
        addLevel: function(t, e) {
            void 0 === e && (e = 0), e = Math.abs(e);
            for (var n = this.levels, i = 0; i < n.length && !(e < n[i].distance); i++);
            n.splice(i, 0, {
                distance: e,
                object: t
            }), this.add(t)
        },
        getObjectForDistance: function(t) {
            for (var e = this.levels, n = 1, i = e.length; n < i && !(t < e[n].distance); n++);
            return e[n - 1].object
        },
        raycast: function() {
            var t = new He;
            return function(e, n) {
                t.setFromMatrixPosition(this.matrixWorld);
                var i = e.ray.origin.distanceTo(t);
                this.getObjectForDistance(i).raycast(e, n)
            }
        }(),
        update: function() {
            var t = new He,
                e = new He;
            return function(n) {
                var i = this.levels;
                if (i.length > 1) {
                    t.setFromMatrixPosition(n.matrixWorld), e.setFromMatrixPosition(this.matrixWorld);
                    var r = t.distanceTo(e);
                    i[0].object.visible = !0;
                    for (var a = 1, o = i.length; a < o && r >= i[a].distance; a++) i[a - 1].object.visible = !1, i[a].object.visible = !0;
                    for (; a < o; a++) i[a].object.visible = !1
                }
            }
        }(),
        toJSON: function(t) {
            var e = un.prototype.toJSON.call(this, t);
            e.object.levels = [];
            for (var n = this.levels, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                e.object.levels.push({
                    object: a.object.uuid,
                    distance: a.distance
                })
            }
            return e
        }
    }), Object.assign(ur.prototype, {
        calculateInverses: function() {
            this.boneInverses = [];
            for (var t = 0, e = this.bones.length; t < e; t++) {
                var n = new ze;
                this.bones[t] && n.getInverse(this.bones[t].matrixWorld), this.boneInverses.push(n)
            }
        },
        pose: function() {
            var t, e, n;
            for (e = 0, n = this.bones.length; e < n; e++)(t = this.bones[e]) && t.matrixWorld.getInverse(this.boneInverses[e]);
            for (e = 0, n = this.bones.length; e < n; e++)(t = this.bones[e]) && (t.parent && t.parent.isBone ? (t.matrix.getInverse(t.parent.matrixWorld), t.matrix.multiply(t.matrixWorld)) : t.matrix.copy(t.matrixWorld), t.matrix.decompose(t.position, t.quaternion, t.scale))
        },
        update: function() {
            var t = new ze,
                e = new ze;
            return function() {
                for (var n = this.bones, i = this.boneInverses, r = this.boneMatrices, a = this.boneTexture, o = 0, s = n.length; o < s; o++) {
                    var c = n[o] ? n[o].matrixWorld : e;
                    t.multiplyMatrices(c, i[o]), t.toArray(r, 16 * o)
                }
                void 0 !== a && (a.needsUpdate = !0)
            }
        }(),
        clone: function() {
            return new ur(this.bones, this.boneInverses)
        },
        getBoneByName: function(t) {
            for (var e = 0, n = this.bones.length; e < n; e++) {
                var i = this.bones[e];
                if (i.name === t) return i
            }
        }
    }), pr.prototype = Object.assign(Object.create(un.prototype), {
        constructor: pr,
        isBone: !0
    }), dr.prototype = Object.assign(Object.create(Hn.prototype), {
        constructor: dr,
        isSkinnedMesh: !0,
        initBones: function() {
            var t, e, n, i, r = [];
            if (this.geometry && void 0 !== this.geometry.bones) {
                for (n = 0, i = this.geometry.bones.length; n < i; n++) e = this.geometry.bones[n], t = new pr, r.push(t), t.name = e.name, t.position.fromArray(e.pos), t.quaternion.fromArray(e.rotq), void 0 !== e.scl && t.scale.fromArray(e.scl);
                for (n = 0, i = this.geometry.bones.length; n < i; n++) - 1 !== (e = this.geometry.bones[n]).parent && null !== e.parent && void 0 !== r[e.parent] ? r[e.parent].add(r[n]) : this.add(r[n])
            }
            return this.updateMatrixWorld(!0), r
        },
        bind: function(t, e) {
            this.skeleton = t, void 0 === e && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), e = this.matrixWorld), this.bindMatrix.copy(e), this.bindMatrixInverse.getInverse(e)
        },
        pose: function() {
            this.skeleton.pose()
        },
        normalizeSkinWeights: function() {
            var t, e;
            if (this.geometry && this.geometry.isGeometry)
                for (e = 0; e < this.geometry.skinWeights.length; e++) {
                    var n = this.geometry.skinWeights[e];
                    (t = 1 / n.manhattanLength()) != 1 / 0 ? n.multiplyScalar(t) : n.set(1, 0, 0, 0)
                } else if (this.geometry && this.geometry.isBufferGeometry) {
                    var i = new Ye,
                        r = this.geometry.attributes.skinWeight;
                    for (e = 0; e < r.count; e++) i.x = r.getX(e), i.y = r.getY(e), i.z = r.getZ(e), i.w = r.getW(e), (t = 1 / i.manhattanLength()) != 1 / 0 ? i.multiplyScalar(t) : i.set(1, 0, 0, 0), r.setXYZW(e, i.x, i.y, i.z, i.w)
                }
        },
        updateMatrixWorld: function(t) {
            Hn.prototype.updateMatrixWorld.call(this, t), "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode)
        },
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this)
        }
    }), fr.prototype = Object.create(Nn.prototype), fr.prototype.constructor = fr, fr.prototype.isLineBasicMaterial = !0, fr.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this
    }, mr.prototype = Object.assign(Object.create(un.prototype), {
        constructor: mr,
        isLine: !0,
        computeLineDistances: function() {
            var t = new He,
                e = new He;
            return function() {
                var n = this.geometry;
                if (n.isBufferGeometry)
                    if (null === n.index) {
                        for (var i = n.attributes.position, r = [0], a = 1, o = i.count; a < o; a++) t.fromBufferAttribute(i, a - 1), e.fromBufferAttribute(i, a), r[a] = r[a - 1], r[a] += t.distanceTo(e);
                        n.addAttribute("lineDistance", new En(r, 1))
                    } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else if (n.isGeometry) {
                    var s = n.vertices;
                    for ((r = n.lineDistances)[0] = 0, a = 1, o = s.length; a < o; a++) r[a] = r[a - 1], r[a] += s[a - 1].distanceTo(s[a])
                }
                return this
            }
        }(),
        raycast: function() {
            var t = new ze,
                e = new zn,
                n = new Je;
            return function(i, r) {
                var a = i.linePrecision,
                    o = a * a,
                    s = this.geometry,
                    c = this.matrixWorld;
                if (null === s.boundingSphere && s.computeBoundingSphere(), n.copy(s.boundingSphere), n.applyMatrix4(c), !1 !== i.ray.intersectsSphere(n)) {
                    t.getInverse(c), e.copy(i.ray).applyMatrix4(t);
                    var l = new He,
                        h = new He,
                        u = new He,
                        p = new He,
                        d = this && this.isLineSegments ? 2 : 1;
                    if (s.isBufferGeometry) {
                        var f = s.index,
                            m = s.attributes.position.array;
                        if (null !== f)
                            for (var g = f.array, v = 0, y = g.length - 1; v < y; v += d) {
                                var x = g[v],
                                    w = g[v + 1];
                                l.fromArray(m, 3 * x), h.fromArray(m, 3 * w), e.distanceSqToSegment(l, h, p, u) > o || (p.applyMatrix4(this.matrixWorld), (_ = i.ray.origin.distanceTo(p)) < i.near || _ > i.far || r.push({
                                    distance: _,
                                    point: u.clone().applyMatrix4(this.matrixWorld),
                                    index: v,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                }))
                            } else
                                for (v = 0, y = m.length / 3 - 1; v < y; v += d) l.fromArray(m, 3 * v), h.fromArray(m, 3 * v + 3), e.distanceSqToSegment(l, h, p, u) > o || (p.applyMatrix4(this.matrixWorld), (_ = i.ray.origin.distanceTo(p)) < i.near || _ > i.far || r.push({
                                    distance: _,
                                    point: u.clone().applyMatrix4(this.matrixWorld),
                                    index: v,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                }))
                    } else if (s.isGeometry) {
                        var b = s.vertices,
                            M = b.length;
                        for (v = 0; v < M - 1; v += d) {
                            var _;
                            e.distanceSqToSegment(b[v], b[v + 1], p, u) > o || (p.applyMatrix4(this.matrixWorld), (_ = i.ray.origin.distanceTo(p)) < i.near || _ > i.far || r.push({
                                distance: _,
                                point: u.clone().applyMatrix4(this.matrixWorld),
                                index: v,
                                face: null,
                                faceIndex: null,
                                object: this
                            }))
                        }
                    }
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this)
        }
    }), gr.prototype = Object.assign(Object.create(mr.prototype), {
        constructor: gr,
        isLineSegments: !0,
        computeLineDistances: function() {
            var t = new He,
                e = new He;
            return function() {
                var n = this.geometry;
                if (n.isBufferGeometry)
                    if (null === n.index) {
                        for (var i = n.attributes.position, r = [], a = 0, o = i.count; a < o; a += 2) t.fromBufferAttribute(i, a), e.fromBufferAttribute(i, a + 1), r[a] = 0 === a ? 0 : r[a - 1], r[a + 1] = r[a] + t.distanceTo(e);
                        n.addAttribute("lineDistance", new En(r, 1))
                    } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else if (n.isGeometry) {
                    var s = n.vertices;
                    for (r = n.lineDistances, a = 0, o = s.length; a < o; a += 2) t.copy(s[a]), e.copy(s[a + 1]), r[a] = 0 === a ? 0 : r[a - 1], r[a + 1] = r[a] + t.distanceTo(e)
                }
                return this
            }
        }()
    }), vr.prototype = Object.assign(Object.create(mr.prototype), {
        constructor: vr,
        isLineLoop: !0
    }), yr.prototype = Object.create(Nn.prototype), yr.prototype.constructor = yr, yr.prototype.isPointsMaterial = !0, yr.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this.map = t.map, this.size = t.size, this.sizeAttenuation = t.sizeAttenuation, this.morphTargets = t.morphTargets, this
    }, xr.prototype = Object.assign(Object.create(un.prototype), {
        constructor: xr,
        isPoints: !0,
        raycast: function() {
            var t = new ze,
                e = new zn,
                n = new Je;
            return function(i, r) {
                var a = this,
                    o = this.geometry,
                    s = this.matrixWorld,
                    c = i.params.Points.threshold;
                if (null === o.boundingSphere && o.computeBoundingSphere(), n.copy(o.boundingSphere), n.applyMatrix4(s), n.radius += c, !1 !== i.ray.intersectsSphere(n)) {
                    t.getInverse(s), e.copy(i.ray).applyMatrix4(t);
                    var l = c / ((this.scale.x + this.scale.y + this.scale.z) / 3),
                        h = l * l,
                        u = new He,
                        p = new He;
                    if (o.isBufferGeometry) {
                        var d = o.index,
                            f = o.attributes.position.array;
                        if (null !== d)
                            for (var m = d.array, g = 0, v = m.length; g < v; g++) {
                                var y = m[g];
                                u.fromArray(f, 3 * y), b(u, y)
                            } else {
                                g = 0;
                                for (var x = f.length / 3; g < x; g++) u.fromArray(f, 3 * g), b(u, g)
                            }
                    } else {
                        var w = o.vertices;
                        for (g = 0, x = w.length; g < x; g++) b(w[g], g)
                    }
                }

                function b(t, n) {
                    var o = e.distanceSqToPoint(t);
                    if (o < h) {
                        e.closestPointToPoint(t, p), p.applyMatrix4(s);
                        var c = i.ray.origin.distanceTo(p);
                        if (c < i.near || c > i.far) return;
                        r.push({
                            distance: c,
                            distanceToRay: Math.sqrt(o),
                            point: p.clone(),
                            index: n,
                            face: null,
                            object: a
                        })
                    }
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this)
        }
    }), wr.prototype = Object.assign(Object.create(We.prototype), {
        constructor: wr,
        isVideoTexture: !0,
        update: function() {
            var t = this.image;
            t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
        }
    }), br.prototype = Object.create(We.prototype), br.prototype.constructor = br, br.prototype.isCompressedTexture = !0, Mr.prototype = Object.create(We.prototype), Mr.prototype.constructor = Mr, Mr.prototype.isCanvasTexture = !0, _r.prototype = Object.create(We.prototype), _r.prototype.constructor = _r, _r.prototype.isDepthTexture = !0, Sr.prototype = Object.create(Pn.prototype), Sr.prototype.constructor = Sr, Er.prototype = Object.create(gn.prototype), Er.prototype.constructor = Er, Tr.prototype = Object.create(Pn.prototype), Tr.prototype.constructor = Tr, Ar.prototype = Object.create(gn.prototype), Ar.prototype.constructor = Ar, Lr.prototype = Object.create(Pn.prototype), Lr.prototype.constructor = Lr, Rr.prototype = Object.create(gn.prototype), Rr.prototype.constructor = Rr, Pr.prototype = Object.create(Lr.prototype), Pr.prototype.constructor = Pr, Cr.prototype = Object.create(gn.prototype), Cr.prototype.constructor = Cr, Ir.prototype = Object.create(Lr.prototype), Ir.prototype.constructor = Ir, Or.prototype = Object.create(gn.prototype), Or.prototype.constructor = Or, Dr.prototype = Object.create(Lr.prototype), Dr.prototype.constructor = Dr, Br.prototype = Object.create(gn.prototype), Br.prototype.constructor = Br, Nr.prototype = Object.create(Lr.prototype), Nr.prototype.constructor = Nr, kr.prototype = Object.create(gn.prototype), kr.prototype.constructor = kr, Ur.prototype = Object.create(Pn.prototype), Ur.prototype.constructor = Ur, zr.prototype = Object.create(gn.prototype), zr.prototype.constructor = zr, Fr.prototype = Object.create(Pn.prototype), Fr.prototype.constructor = Fr, Hr.prototype = Object.create(gn.prototype), Hr.prototype.constructor = Hr, Gr.prototype = Object.create(Pn.prototype), Gr.prototype.constructor = Gr;

    function jr(t, e, n, i, r) {
        var a, o;
        if (r === function(t, e, n, i) {
                for (var r = 0, a = e, o = n - i; a < n; a += i) r += (t[o] - t[a]) * (t[a + 1] + t[o + 1]), o = a;
                return r
            }(t, e, n, i) > 0)
            for (a = e; a < n; a += i) o = sa(a, t[a], t[a + 1], o);
        else
            for (a = n - i; a >= e; a -= i) o = sa(a, t[a], t[a + 1], o);
        return o && ia(o, o.next) && (ca(o), o = o.next), o
    }

    function Vr(t, e) {
        if (!t) return t;
        e || (e = t);
        var n, i = t;
        do {
            if (n = !1, i.steiner || !ia(i, i.next) && 0 !== na(i.prev, i, i.next)) i = i.next;
            else {
                if (ca(i), (i = e = i.prev) === i.next) break;
                n = !0
            }
        } while (n || i !== e);
        return e
    }

    function Wr(t, e, n, i, r, a, o) {
        if (t) {
            !o && a && function(t, e, n, i) {
                var r = t;
                do {
                    null === r.z && (r.z = Qr(r.x, r.y, e, n, i)), r.prevZ = r.prev, r.nextZ = r.next, r = r.next
                } while (r !== t);
                r.prevZ.nextZ = null, r.prevZ = null,
                    function(t) {
                        var e, n, i, r, a, o, s, c, l = 1;
                        do {
                            for (n = t, t = null, a = null, o = 0; n;) {
                                for (o++, i = n, s = 0, e = 0; e < l && (s++, i = i.nextZ); e++);
                                for (c = l; s > 0 || c > 0 && i;) 0 !== s && (0 === c || !i || n.z <= i.z) ? (r = n, n = n.nextZ, s--) : (r = i, i = i.nextZ, c--), a ? a.nextZ = r : t = r, r.prevZ = a, a = r;
                                n = i
                            }
                            a.nextZ = null, l *= 2
                        } while (o > 1)
                    }(r)
            }(t, i, r, a);
            for (var s, c, l = t; t.prev !== t.next;)
                if (s = t.prev, c = t.next, a ? Xr(t, i, r, a) : Yr(t)) e.push(s.i / n), e.push(t.i / n), e.push(c.i / n), ca(t), t = c.next, l = c.next;
                else if ((t = c) === l) {
                o ? 1 === o ? Wr(t = qr(t, e, n), e, n, i, r, a, 2) : 2 === o && Zr(t, e, n, i, r, a) : Wr(Vr(t), e, n, i, r, a, 1);
                break
            }
        }
    }

    function Yr(t) {
        var e = t.prev,
            n = t,
            i = t.next;
        if (na(e, n, i) >= 0) return !1;
        for (var r = t.next.next; r !== t.prev;) {
            if (ta(e.x, e.y, n.x, n.y, i.x, i.y, r.x, r.y) && na(r.prev, r, r.next) >= 0) return !1;
            r = r.next
        }
        return !0
    }

    function Xr(t, e, n, i) {
        var r = t.prev,
            a = t,
            o = t.next;
        if (na(r, a, o) >= 0) return !1;
        for (var s = r.x < a.x ? r.x < o.x ? r.x : o.x : a.x < o.x ? a.x : o.x, c = r.y < a.y ? r.y < o.y ? r.y : o.y : a.y < o.y ? a.y : o.y, l = r.x > a.x ? r.x > o.x ? r.x : o.x : a.x > o.x ? a.x : o.x, h = r.y > a.y ? r.y > o.y ? r.y : o.y : a.y > o.y ? a.y : o.y, u = Qr(s, c, e, n, i), p = Qr(l, h, e, n, i), d = t.nextZ; d && d.z <= p;) {
            if (d !== t.prev && d !== t.next && ta(r.x, r.y, a.x, a.y, o.x, o.y, d.x, d.y) && na(d.prev, d, d.next) >= 0) return !1;
            d = d.nextZ
        }
        for (d = t.prevZ; d && d.z >= u;) {
            if (d !== t.prev && d !== t.next && ta(r.x, r.y, a.x, a.y, o.x, o.y, d.x, d.y) && na(d.prev, d, d.next) >= 0) return !1;
            d = d.prevZ
        }
        return !0
    }

    function qr(t, e, n) {
        var i = t;
        do {
            var r = i.prev,
                a = i.next.next;
            !ia(r, a) && ra(r, i, i.next, a) && aa(r, a) && aa(a, r) && (e.push(r.i / n), e.push(i.i / n), e.push(a.i / n), ca(i), ca(i.next), i = t = a), i = i.next
        } while (i !== t);
        return i
    }

    function Zr(t, e, n, i, r, a) {
        var o = t;
        do {
            for (var s = o.next.next; s !== o.prev;) {
                if (o.i !== s.i && ea(o, s)) {
                    var c = oa(o, s);
                    return o = Vr(o, o.next), c = Vr(c, c.next), Wr(o, e, n, i, r, a), void Wr(c, e, n, i, r, a)
                }
                s = s.next
            }
            o = o.next
        } while (o !== t)
    }

    function Kr(t, e) {
        return t.x - e.x
    }

    function Jr(t, e) {
        if (e = function(t, e) {
                var n, i = e,
                    r = t.x,
                    a = t.y,
                    o = -1 / 0;
                do {
                    if (a <= i.y && a >= i.next.y && i.next.y !== i.y) {
                        var s = i.x + (a - i.y) * (i.next.x - i.x) / (i.next.y - i.y);
                        if (s <= r && s > o) {
                            if (o = s, s === r) {
                                if (a === i.y) return i;
                                if (a === i.next.y) return i.next
                            }
                            n = i.x < i.next.x ? i : i.next
                        }
                    }
                    i = i.next
                } while (i !== e);
                if (!n) return null;
                if (r === o) return n.prev;
                var c, l = n,
                    h = n.x,
                    u = n.y,
                    p = 1 / 0;
                for (i = n.next; i !== l;) r >= i.x && i.x >= h && r !== i.x && ta(a < u ? r : o, a, h, u, a < u ? o : r, a, i.x, i.y) && ((c = Math.abs(a - i.y) / (r - i.x)) < p || c === p && i.x > n.x) && aa(i, t) && (n = i, p = c), i = i.next;
                return n
            }(t, e)) {
            var n = oa(e, t);
            Vr(n, n.next)
        }
    }

    function Qr(t, e, n, i, r) {
        return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - n) * r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - i) * r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1
    }

    function $r(t) {
        var e = t,
            n = t;
        do {
            e.x < n.x && (n = e), e = e.next
        } while (e !== t);
        return n
    }

    function ta(t, e, n, i, r, a, o, s) {
        return (r - o) * (e - s) - (t - o) * (a - s) >= 0 && (t - o) * (i - s) - (n - o) * (e - s) >= 0 && (n - o) * (a - s) - (r - o) * (i - s) >= 0
    }

    function ea(t, e) {
        return t.next.i !== e.i && t.prev.i !== e.i && ! function(t, e) {
            var n = t;
            do {
                if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && ra(n, n.next, t, e)) return !0;
                n = n.next
            } while (n !== t);
            return !1
        }(t, e) && aa(t, e) && aa(e, t) && function(t, e) {
            var n = t,
                i = !1,
                r = (t.x + e.x) / 2,
                a = (t.y + e.y) / 2;
            do {
                n.y > a != n.next.y > a && n.next.y !== n.y && r < (n.next.x - n.x) * (a - n.y) / (n.next.y - n.y) + n.x && (i = !i), n = n.next
            } while (n !== t);
            return i
        }(t, e)
    }

    function na(t, e, n) {
        return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y)
    }

    function ia(t, e) {
        return t.x === e.x && t.y === e.y
    }

    function ra(t, e, n, i) {
        return !!(ia(t, e) && ia(n, i) || ia(t, i) && ia(n, e)) || na(t, e, n) > 0 != na(t, e, i) > 0 && na(n, i, t) > 0 != na(n, i, e) > 0
    }

    function aa(t, e) {
        return na(t.prev, t, t.next) < 0 ? na(t, e, t.next) >= 0 && na(t, t.prev, e) >= 0 : na(t, e, t.prev) < 0 || na(t, t.next, e) < 0
    }

    function oa(t, e) {
        var n = new la(t.i, t.x, t.y),
            i = new la(e.i, e.x, e.y),
            r = t.next,
            a = e.prev;
        return t.next = e, e.prev = t, n.next = r, r.prev = n, i.next = n, n.prev = i, a.next = i, i.prev = a, i
    }

    function sa(t, e, n, i) {
        var r = new la(t, e, n);
        return i ? (r.next = i.next, r.prev = i, i.next.prev = r, i.next = r) : (r.prev = r, r.next = r), r
    }

    function ca(t) {
        t.next.prev = t.prev, t.prev.next = t.next, t.prevZ && (t.prevZ.nextZ = t.nextZ), t.nextZ && (t.nextZ.prevZ = t.prevZ)
    }

    function la(t, e, n) {
        this.i = t, this.x = e, this.y = n, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1
    }
    var ha = {
        area: function(t) {
            for (var e = t.length, n = 0, i = e - 1, r = 0; r < e; i = r++) n += t[i].x * t[r].y - t[r].x * t[i].y;
            return .5 * n
        },
        isClockWise: function(t) {
            return ha.area(t) < 0
        },
        triangulateShape: function(t, e) {
            var n = [],
                i = [],
                r = [];
            ua(t), pa(n, t);
            var a = t.length;
            e.forEach(ua);
            for (var o = 0; o < e.length; o++) i.push(a), a += e[o].length, pa(n, e[o]);
            var s = function(t, e, n) {
                n = n || 2;
                var i, r, a, o, s, c, l, h = e && e.length,
                    u = h ? e[0] * n : t.length,
                    p = jr(t, 0, u, n, !0),
                    d = [];
                if (!p) return d;
                if (h && (p = function(t, e, n, i) {
                        var r, a, o, s = [];
                        for (r = 0, a = e.length; r < a; r++)(o = jr(t, e[r] * i, r < a - 1 ? e[r + 1] * i : t.length, i, !1)) === o.next && (o.steiner = !0), s.push($r(o));
                        for (s.sort(Kr), r = 0; r < s.length; r++) Jr(s[r], n), n = Vr(n, n.next);
                        return n
                    }(t, e, p, n)), t.length > 80 * n) {
                    i = a = t[0], r = o = t[1];
                    for (var f = n; f < u; f += n) s = t[f], c = t[f + 1], s < i && (i = s), c < r && (r = c), s > a && (a = s), c > o && (o = c);
                    l = 0 !== (l = Math.max(a - i, o - r)) ? 1 / l : 0
                }
                return Wr(p, d, n, i, r, l), d
            }(n, i);
            for (o = 0; o < s.length; o += 3) r.push(s.slice(o, o + 3));
            return r
        }
    };

    function ua(t) {
        var e = t.length;
        e > 2 && t[e - 1].equals(t[0]) && t.pop()
    }

    function pa(t, e) {
        for (var n = 0; n < e.length; n++) t.push(e[n].x), t.push(e[n].y)
    }

    function da(t, e) {
        gn.call(this), this.type = "ExtrudeGeometry", this.parameters = {
            shapes: t,
            options: e
        }, this.fromBufferGeometry(new fa(t, e)), this.mergeVertices()
    }

    function fa(t, e) {
        Pn.call(this), this.type = "ExtrudeBufferGeometry", this.parameters = {
            shapes: t,
            options: e
        };
        for (var n = this, i = [], r = [], a = 0, o = (t = Array.isArray(t) ? t : [t]).length; a < o; a++) s(t[a]);

        function s(t) {
            var a = [],
                o = void 0 !== e.curveSegments ? e.curveSegments : 12,
                s = void 0 !== e.steps ? e.steps : 1,
                c = void 0 !== e.depth ? e.depth : 100,
                l = void 0 === e.bevelEnabled || e.bevelEnabled,
                h = void 0 !== e.bevelThickness ? e.bevelThickness : 6,
                u = void 0 !== e.bevelSize ? e.bevelSize : h - 2,
                p = void 0 !== e.bevelSegments ? e.bevelSegments : 3,
                d = e.extrudePath,
                f = void 0 !== e.UVGenerator ? e.UVGenerator : ma;
            void 0 !== e.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), c = e.amount);
            var m, g, v, y, x, w, b, M, _ = !1;
            d && (m = d.getSpacedPoints(s), _ = !0, l = !1, g = d.computeFrenetFrames(s, !1), v = new He, y = new He, x = new He), l || (p = 0, h = 0, u = 0);
            var S = t.extractPoints(o),
                E = S.shape,
                T = S.holes;
            if (!ha.isClockWise(E))
                for (E = E.reverse(), b = 0, M = T.length; b < M; b++) w = T[b], ha.isClockWise(w) && (T[b] = w.reverse());
            var A = ha.triangulateShape(E, T),
                L = E;
            for (b = 0, M = T.length; b < M; b++) w = T[b], E = E.concat(w);

            function R(t, e, n) {
                return e || console.error("THREE.ExtrudeGeometry: vec does not exist"), e.clone().multiplyScalar(n).add(t)
            }
            var P, C, I, O, D, B, N = E.length,
                k = A.length;

            function U(t, e, n) {
                var i, r, a, o = t.x - e.x,
                    s = t.y - e.y,
                    c = n.x - t.x,
                    l = n.y - t.y,
                    h = o * o + s * s,
                    u = o * l - s * c;
                if (Math.abs(u) > Number.EPSILON) {
                    var p = Math.sqrt(h),
                        d = Math.sqrt(c * c + l * l),
                        f = e.x - s / p,
                        m = e.y + o / p,
                        g = ((n.x - l / d - f) * l - (n.y + c / d - m) * c) / (o * l - s * c),
                        v = (i = f + o * g - t.x) * i + (r = m + s * g - t.y) * r;
                    if (v <= 2) return new Ue(i, r);
                    a = Math.sqrt(v / 2)
                } else {
                    var y = !1;
                    o > Number.EPSILON ? c > Number.EPSILON && (y = !0) : o < -Number.EPSILON ? c < -Number.EPSILON && (y = !0) : Math.sign(s) === Math.sign(l) && (y = !0), y ? (i = -s, r = o, a = Math.sqrt(h)) : (i = o, r = s, a = Math.sqrt(h / 2))
                }
                return new Ue(i / a, r / a)
            }
            for (var z = [], F = 0, H = L.length, G = H - 1, j = F + 1; F < H; F++, G++, j++) G === H && (G = 0), j === H && (j = 0), z[F] = U(L[F], L[G], L[j]);
            var V, W, Y = [],
                X = z.concat();
            for (b = 0, M = T.length; b < M; b++) {
                for (w = T[b], V = [], F = 0, G = (H = w.length) - 1, j = F + 1; F < H; F++, G++, j++) G === H && (G = 0), j === H && (j = 0), V[F] = U(w[F], w[G], w[j]);
                Y.push(V), X = X.concat(V)
            }
            for (P = 0; P < p; P++) {
                for (I = P / p, O = h * Math.cos(I * Math.PI / 2), C = u * Math.sin(I * Math.PI / 2), F = 0, H = L.length; F < H; F++) Z((D = R(L[F], z[F], C)).x, D.y, -O);
                for (b = 0, M = T.length; b < M; b++)
                    for (w = T[b], V = Y[b], F = 0, H = w.length; F < H; F++) Z((D = R(w[F], V[F], C)).x, D.y, -O)
            }
            for (C = u, F = 0; F < N; F++) D = l ? R(E[F], X[F], C) : E[F], _ ? (y.copy(g.normals[0]).multiplyScalar(D.x), v.copy(g.binormals[0]).multiplyScalar(D.y), x.copy(m[0]).add(y).add(v), Z(x.x, x.y, x.z)) : Z(D.x, D.y, 0);
            for (W = 1; W <= s; W++)
                for (F = 0; F < N; F++) D = l ? R(E[F], X[F], C) : E[F], _ ? (y.copy(g.normals[W]).multiplyScalar(D.x), v.copy(g.binormals[W]).multiplyScalar(D.y), x.copy(m[W]).add(y).add(v), Z(x.x, x.y, x.z)) : Z(D.x, D.y, c / s * W);
            for (P = p - 1; P >= 0; P--) {
                for (I = P / p, O = h * Math.cos(I * Math.PI / 2), C = u * Math.sin(I * Math.PI / 2), F = 0, H = L.length; F < H; F++) Z((D = R(L[F], z[F], C)).x, D.y, c + O);
                for (b = 0, M = T.length; b < M; b++)
                    for (w = T[b], V = Y[b], F = 0, H = w.length; F < H; F++) D = R(w[F], V[F], C), _ ? Z(D.x, D.y + m[s - 1].y, m[s - 1].x + O) : Z(D.x, D.y, c + O)
            }

            function q(t, e) {
                var n, i;
                for (F = t.length; --F >= 0;) {
                    n = F, (i = F - 1) < 0 && (i = t.length - 1);
                    var r = 0,
                        a = s + 2 * p;
                    for (r = 0; r < a; r++) {
                        var o = N * r,
                            c = N * (r + 1);
                        J(e + n + o, e + i + o, e + i + c, e + n + c)
                    }
                }
            }

            function Z(t, e, n) {
                a.push(t), a.push(e), a.push(n)
            }

            function K(t, e, r) {
                Q(t), Q(e), Q(r);
                var a = i.length / 3,
                    o = f.generateTopUV(n, i, a - 3, a - 2, a - 1);
                $(o[0]), $(o[1]), $(o[2])
            }

            function J(t, e, r, a) {
                Q(t), Q(e), Q(a), Q(e), Q(r), Q(a);
                var o = i.length / 3,
                    s = f.generateSideWallUV(n, i, o - 6, o - 3, o - 2, o - 1);
                $(s[0]), $(s[1]), $(s[3]), $(s[1]), $(s[2]), $(s[3])
            }

            function Q(t) {
                i.push(a[3 * t + 0]), i.push(a[3 * t + 1]), i.push(a[3 * t + 2])
            }

            function $(t) {
                r.push(t.x), r.push(t.y)
            }! function() {
                var t = i.length / 3;
                if (l) {
                    var e = 0,
                        r = N * e;
                    for (F = 0; F < k; F++) K((B = A[F])[2] + r, B[1] + r, B[0] + r);
                    for (r = N * (e = s + 2 * p), F = 0; F < k; F++) K((B = A[F])[0] + r, B[1] + r, B[2] + r)
                } else {
                    for (F = 0; F < k; F++) K((B = A[F])[2], B[1], B[0]);
                    for (F = 0; F < k; F++) K((B = A[F])[0] + N * s, B[1] + N * s, B[2] + N * s)
                }
                n.addGroup(t, i.length / 3 - t, 0)
            }(),
            function() {
                var t = i.length / 3,
                    e = 0;
                for (q(L, e), e += L.length, b = 0, M = T.length; b < M; b++) q(w = T[b], e), e += w.length;
                n.addGroup(t, i.length / 3 - t, 1)
            }()
        }
        this.addAttribute("position", new En(i, 3)), this.addAttribute("uv", new En(r, 2)), this.computeVertexNormals()
    }
    da.prototype = Object.create(gn.prototype), da.prototype.constructor = da, da.prototype.toJSON = function() {
        var t = gn.prototype.toJSON.call(this);
        return ga(this.parameters.shapes, this.parameters.options, t)
    }, fa.prototype = Object.create(Pn.prototype), fa.prototype.constructor = fa, fa.prototype.toJSON = function() {
        var t = Pn.prototype.toJSON.call(this);
        return ga(this.parameters.shapes, this.parameters.options, t)
    };
    var ma = {
        generateTopUV: function(t, e, n, i, r) {
            var a = e[3 * n],
                o = e[3 * n + 1],
                s = e[3 * i],
                c = e[3 * i + 1],
                l = e[3 * r],
                h = e[3 * r + 1];
            return [new Ue(a, o), new Ue(s, c), new Ue(l, h)]
        },
        generateSideWallUV: function(t, e, n, i, r, a) {
            var o = e[3 * n],
                s = e[3 * n + 1],
                c = e[3 * n + 2],
                l = e[3 * i],
                h = e[3 * i + 1],
                u = e[3 * i + 2],
                p = e[3 * r],
                d = e[3 * r + 1],
                f = e[3 * r + 2],
                m = e[3 * a],
                g = e[3 * a + 1],
                v = e[3 * a + 2];
            return Math.abs(s - h) < .01 ? [new Ue(o, 1 - c), new Ue(l, 1 - u), new Ue(p, 1 - f), new Ue(m, 1 - v)] : [new Ue(s, 1 - c), new Ue(h, 1 - u), new Ue(d, 1 - f), new Ue(g, 1 - v)]
        }
    };

    function ga(t, e, n) {
        if (n.shapes = [], Array.isArray(t))
            for (var i = 0, r = t.length; i < r; i++) {
                var a = t[i];
                n.shapes.push(a.uuid)
            } else n.shapes.push(t.uuid);
        return void 0 !== e.extrudePath && (n.options.extrudePath = e.extrudePath.toJSON()), n
    }

    function va(t, e) {
        gn.call(this), this.type = "TextGeometry", this.parameters = {
            text: t,
            parameters: e
        }, this.fromBufferGeometry(new ya(t, e)), this.mergeVertices()
    }

    function ya(t, e) {
        var n = (e = e || {}).font;
        if (!n || !n.isFont) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new gn;
        var i = n.generateShapes(t, e.size);
        e.depth = void 0 !== e.height ? e.height : 50, void 0 === e.bevelThickness && (e.bevelThickness = 10), void 0 === e.bevelSize && (e.bevelSize = 8), void 0 === e.bevelEnabled && (e.bevelEnabled = !1), fa.call(this, i, e), this.type = "TextBufferGeometry"
    }

    function xa(t, e, n, i, r, a, o) {
        gn.call(this), this.type = "SphereGeometry", this.parameters = {
            radius: t,
            widthSegments: e,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: a,
            thetaLength: o
        }, this.fromBufferGeometry(new wa(t, e, n, i, r, a, o)), this.mergeVertices()
    }

    function wa(t, e, n, i, r, a, o) {
        Pn.call(this), this.type = "SphereBufferGeometry", this.parameters = {
            radius: t,
            widthSegments: e,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: a,
            thetaLength: o
        }, t = t || 1, e = Math.max(3, Math.floor(e) || 8), n = Math.max(2, Math.floor(n) || 6), i = void 0 !== i ? i : 0, r = void 0 !== r ? r : 2 * Math.PI;
        var s, c, l = (a = void 0 !== a ? a : 0) + (o = void 0 !== o ? o : Math.PI),
            h = 0,
            u = [],
            p = new He,
            d = new He,
            f = [],
            m = [],
            g = [],
            v = [];
        for (c = 0; c <= n; c++) {
            var y = [],
                x = c / n;
            for (s = 0; s <= e; s++) {
                var w = s / e;
                p.x = -t * Math.cos(i + w * r) * Math.sin(a + x * o), p.y = t * Math.cos(a + x * o), p.z = t * Math.sin(i + w * r) * Math.sin(a + x * o), m.push(p.x, p.y, p.z), d.set(p.x, p.y, p.z).normalize(), g.push(d.x, d.y, d.z), v.push(w, 1 - x), y.push(h++)
            }
            u.push(y)
        }
        for (c = 0; c < n; c++)
            for (s = 0; s < e; s++) {
                var b = u[c][s + 1],
                    M = u[c][s],
                    _ = u[c + 1][s],
                    S = u[c + 1][s + 1];
                (0 !== c || a > 0) && f.push(b, M, S), (c !== n - 1 || l < Math.PI) && f.push(M, _, S)
            }
        this.setIndex(f), this.addAttribute("position", new En(m, 3)), this.addAttribute("normal", new En(g, 3)), this.addAttribute("uv", new En(v, 2))
    }

    function ba(t, e, n, i, r, a) {
        gn.call(this), this.type = "RingGeometry", this.parameters = {
            innerRadius: t,
            outerRadius: e,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: a
        }, this.fromBufferGeometry(new Ma(t, e, n, i, r, a)), this.mergeVertices()
    }

    function Ma(t, e, n, i, r, a) {
        Pn.call(this), this.type = "RingBufferGeometry", this.parameters = {
            innerRadius: t,
            outerRadius: e,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: a
        }, t = t || .5, e = e || 1, r = void 0 !== r ? r : 0, a = void 0 !== a ? a : 2 * Math.PI, n = void 0 !== n ? Math.max(3, n) : 8;
        var o, s, c, l = [],
            h = [],
            u = [],
            p = [],
            d = t,
            f = (e - t) / (i = void 0 !== i ? Math.max(1, i) : 1),
            m = new He,
            g = new Ue;
        for (s = 0; s <= i; s++) {
            for (c = 0; c <= n; c++) o = r + c / n * a, m.x = d * Math.cos(o), m.y = d * Math.sin(o), h.push(m.x, m.y, m.z), u.push(0, 0, 1), g.x = (m.x / e + 1) / 2, g.y = (m.y / e + 1) / 2, p.push(g.x, g.y);
            d += f
        }
        for (s = 0; s < i; s++) {
            var v = s * (n + 1);
            for (c = 0; c < n; c++) {
                var y = o = c + v,
                    x = o + n + 1,
                    w = o + n + 2,
                    b = o + 1;
                l.push(y, x, b), l.push(x, w, b)
            }
        }
        this.setIndex(l), this.addAttribute("position", new En(h, 3)), this.addAttribute("normal", new En(u, 3)), this.addAttribute("uv", new En(p, 2))
    }

    function _a(t, e, n, i) {
        gn.call(this), this.type = "LatheGeometry", this.parameters = {
            points: t,
            segments: e,
            phiStart: n,
            phiLength: i
        }, this.fromBufferGeometry(new Sa(t, e, n, i)), this.mergeVertices()
    }

    function Sa(t, e, n, i) {
        Pn.call(this), this.type = "LatheBufferGeometry", this.parameters = {
            points: t,
            segments: e,
            phiStart: n,
            phiLength: i
        }, e = Math.floor(e) || 12, n = n || 0, i = i || 2 * Math.PI, i = ke.clamp(i, 0, 2 * Math.PI);
        var r, a, o, s = [],
            c = [],
            l = [],
            h = 1 / e,
            u = new He,
            p = new Ue;
        for (a = 0; a <= e; a++) {
            var d = n + a * h * i,
                f = Math.sin(d),
                m = Math.cos(d);
            for (o = 0; o <= t.length - 1; o++) u.x = t[o].x * f, u.y = t[o].y, u.z = t[o].x * m, c.push(u.x, u.y, u.z), p.x = a / e, p.y = o / (t.length - 1), l.push(p.x, p.y)
        }
        for (a = 0; a < e; a++)
            for (o = 0; o < t.length - 1; o++) {
                var g = r = o + a * t.length,
                    v = r + t.length,
                    y = r + t.length + 1,
                    x = r + 1;
                s.push(g, v, x), s.push(v, y, x)
            }
        if (this.setIndex(s), this.addAttribute("position", new En(c, 3)), this.addAttribute("uv", new En(l, 2)), this.computeVertexNormals(), i === 2 * Math.PI) {
            var w = this.attributes.normal.array,
                b = new He,
                M = new He,
                _ = new He;
            for (r = e * t.length * 3, a = 0, o = 0; a < t.length; a++, o += 3) b.x = w[o + 0], b.y = w[o + 1], b.z = w[o + 2], M.x = w[r + o + 0], M.y = w[r + o + 1], M.z = w[r + o + 2], _.addVectors(b, M).normalize(), w[o + 0] = w[r + o + 0] = _.x, w[o + 1] = w[r + o + 1] = _.y, w[o + 2] = w[r + o + 2] = _.z
        }
    }

    function Ea(t, e) {
        gn.call(this), this.type = "ShapeGeometry", "object" == typeof e && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), e = e.curveSegments), this.parameters = {
            shapes: t,
            curveSegments: e
        }, this.fromBufferGeometry(new Ta(t, e)), this.mergeVertices()
    }

    function Ta(t, e) {
        Pn.call(this), this.type = "ShapeBufferGeometry", this.parameters = {
            shapes: t,
            curveSegments: e
        }, e = e || 12;
        var n = [],
            i = [],
            r = [],
            a = [],
            o = 0,
            s = 0;
        if (!1 === Array.isArray(t)) l(t);
        else
            for (var c = 0; c < t.length; c++) l(t[c]), this.addGroup(o, s, c), o += s, s = 0;

        function l(t) {
            var o, c, l, h = i.length / 3,
                u = t.extractPoints(e),
                p = u.shape,
                d = u.holes;
            if (!1 === ha.isClockWise(p))
                for (p = p.reverse(), o = 0, c = d.length; o < c; o++) l = d[o], !0 === ha.isClockWise(l) && (d[o] = l.reverse());
            var f = ha.triangulateShape(p, d);
            for (o = 0, c = d.length; o < c; o++) l = d[o], p = p.concat(l);
            for (o = 0, c = p.length; o < c; o++) {
                var m = p[o];
                i.push(m.x, m.y, 0), r.push(0, 0, 1), a.push(m.x, m.y)
            }
            for (o = 0, c = f.length; o < c; o++) {
                var g = f[o],
                    v = g[0] + h,
                    y = g[1] + h,
                    x = g[2] + h;
                n.push(v, y, x), s += 3
            }
        }
        this.setIndex(n), this.addAttribute("position", new En(i, 3)), this.addAttribute("normal", new En(r, 3)), this.addAttribute("uv", new En(a, 2))
    }

    function Aa(t, e) {
        if (e.shapes = [], Array.isArray(t))
            for (var n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                e.shapes.push(r.uuid)
            } else e.shapes.push(t.uuid);
        return e
    }

    function La(t, e) {
        Pn.call(this), this.type = "EdgesGeometry", this.parameters = {
            thresholdAngle: e
        }, e = void 0 !== e ? e : 1;
        var n, i, r, a, o = [],
            s = Math.cos(ke.DEG2RAD * e),
            c = [0, 0],
            l = {},
            h = ["a", "b", "c"];
        t.isBufferGeometry ? (a = new gn).fromBufferGeometry(t) : a = t.clone(), a.mergeVertices(), a.computeFaceNormals();
        for (var u = a.vertices, p = a.faces, d = 0, f = p.length; d < f; d++)
            for (var m = p[d], g = 0; g < 3; g++) n = m[h[g]], i = m[h[(g + 1) % 3]], c[0] = Math.min(n, i), c[1] = Math.max(n, i), void 0 === l[r = c[0] + "," + c[1]] ? l[r] = {
                index1: c[0],
                index2: c[1],
                face1: d,
                face2: void 0
            } : l[r].face2 = d;
        for (r in l) {
            var v = l[r];
            if (void 0 === v.face2 || p[v.face1].normal.dot(p[v.face2].normal) <= s) {
                var y = u[v.index1];
                o.push(y.x, y.y, y.z), y = u[v.index2], o.push(y.x, y.y, y.z)
            }
        }
        this.addAttribute("position", new En(o, 3))
    }

    function Ra(t, e, n, i, r, a, o, s) {
        gn.call(this), this.type = "CylinderGeometry", this.parameters = {
            radiusTop: t,
            radiusBottom: e,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: a,
            thetaStart: o,
            thetaLength: s
        }, this.fromBufferGeometry(new Pa(t, e, n, i, r, a, o, s)), this.mergeVertices()
    }

    function Pa(t, e, n, i, r, a, o, s) {
        Pn.call(this), this.type = "CylinderBufferGeometry", this.parameters = {
            radiusTop: t,
            radiusBottom: e,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: a,
            thetaStart: o,
            thetaLength: s
        };
        var c = this;
        t = void 0 !== t ? t : 1, e = void 0 !== e ? e : 1, n = n || 1, i = Math.floor(i) || 8, r = Math.floor(r) || 1, a = void 0 !== a && a, o = void 0 !== o ? o : 0, s = void 0 !== s ? s : 2 * Math.PI;
        var l = [],
            h = [],
            u = [],
            p = [],
            d = 0,
            f = [],
            m = n / 2,
            g = 0;

        function v(n) {
            var r, a, f, v = new Ue,
                y = new He,
                x = 0,
                w = !0 === n ? t : e,
                b = !0 === n ? 1 : -1;
            for (a = d, r = 1; r <= i; r++) h.push(0, m * b, 0), u.push(0, b, 0), p.push(.5, .5), d++;
            for (f = d, r = 0; r <= i; r++) {
                var M = r / i * s + o,
                    _ = Math.cos(M),
                    S = Math.sin(M);
                y.x = w * S, y.y = m * b, y.z = w * _, h.push(y.x, y.y, y.z), u.push(0, b, 0), v.x = .5 * _ + .5, v.y = .5 * S * b + .5, p.push(v.x, v.y), d++
            }
            for (r = 0; r < i; r++) {
                var E = a + r,
                    T = f + r;
                !0 === n ? l.push(T, T + 1, E) : l.push(T + 1, T, E), x += 3
            }
            c.addGroup(g, x, !0 === n ? 1 : 2), g += x
        }! function() {
            var a, v, y = new He,
                x = new He,
                w = 0,
                b = (e - t) / n;
            for (v = 0; v <= r; v++) {
                var M = [],
                    _ = v / r,
                    S = _ * (e - t) + t;
                for (a = 0; a <= i; a++) {
                    var E = a / i,
                        T = E * s + o,
                        A = Math.sin(T),
                        L = Math.cos(T);
                    x.x = S * A, x.y = -_ * n + m, x.z = S * L, h.push(x.x, x.y, x.z), y.set(A, b, L).normalize(), u.push(y.x, y.y, y.z), p.push(E, 1 - _), M.push(d++)
                }
                f.push(M)
            }
            for (a = 0; a < i; a++)
                for (v = 0; v < r; v++) {
                    var R = f[v][a],
                        P = f[v + 1][a],
                        C = f[v + 1][a + 1],
                        I = f[v][a + 1];
                    l.push(R, P, I), l.push(P, C, I), w += 6
                }
            c.addGroup(g, w, 0), g += w
        }(), !1 === a && (t > 0 && v(!0), e > 0 && v(!1)), this.setIndex(l), this.addAttribute("position", new En(h, 3)), this.addAttribute("normal", new En(u, 3)), this.addAttribute("uv", new En(p, 2))
    }

    function Ca(t, e, n, i, r, a, o) {
        Ra.call(this, 0, t, e, n, i, r, a, o), this.type = "ConeGeometry", this.parameters = {
            radius: t,
            height: e,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: a,
            thetaLength: o
        }
    }

    function Ia(t, e, n, i, r, a, o) {
        Pa.call(this, 0, t, e, n, i, r, a, o), this.type = "ConeBufferGeometry", this.parameters = {
            radius: t,
            height: e,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: a,
            thetaLength: o
        }
    }

    function Oa(t, e, n, i) {
        gn.call(this), this.type = "CircleGeometry", this.parameters = {
            radius: t,
            segments: e,
            thetaStart: n,
            thetaLength: i
        }, this.fromBufferGeometry(new Da(t, e, n, i)), this.mergeVertices()
    }

    function Da(t, e, n, i) {
        Pn.call(this), this.type = "CircleBufferGeometry", this.parameters = {
            radius: t,
            segments: e,
            thetaStart: n,
            thetaLength: i
        }, t = t || 1, e = void 0 !== e ? Math.max(3, e) : 8, n = void 0 !== n ? n : 0, i = void 0 !== i ? i : 2 * Math.PI;
        var r, a, o = [],
            s = [],
            c = [],
            l = [],
            h = new He,
            u = new Ue;
        for (s.push(0, 0, 0), c.push(0, 0, 1), l.push(.5, .5), a = 0, r = 3; a <= e; a++, r += 3) {
            var p = n + a / e * i;
            h.x = t * Math.cos(p), h.y = t * Math.sin(p), s.push(h.x, h.y, h.z), c.push(0, 0, 1), u.x = (s[r] / t + 1) / 2, u.y = (s[r + 1] / t + 1) / 2, l.push(u.x, u.y)
        }
        for (r = 1; r <= e; r++) o.push(r, r + 1, 0);
        this.setIndex(o), this.addAttribute("position", new En(s, 3)), this.addAttribute("normal", new En(c, 3)), this.addAttribute("uv", new En(l, 2))
    }
    va.prototype = Object.create(gn.prototype), va.prototype.constructor = va, ya.prototype = Object.create(fa.prototype), ya.prototype.constructor = ya, xa.prototype = Object.create(gn.prototype), xa.prototype.constructor = xa, wa.prototype = Object.create(Pn.prototype), wa.prototype.constructor = wa, ba.prototype = Object.create(gn.prototype), ba.prototype.constructor = ba, Ma.prototype = Object.create(Pn.prototype), Ma.prototype.constructor = Ma, _a.prototype = Object.create(gn.prototype), _a.prototype.constructor = _a, Sa.prototype = Object.create(Pn.prototype), Sa.prototype.constructor = Sa, Ea.prototype = Object.create(gn.prototype), Ea.prototype.constructor = Ea, Ea.prototype.toJSON = function() {
        var t = gn.prototype.toJSON.call(this);
        return Aa(this.parameters.shapes, t)
    }, Ta.prototype = Object.create(Pn.prototype), Ta.prototype.constructor = Ta, Ta.prototype.toJSON = function() {
        var t = Pn.prototype.toJSON.call(this);
        return Aa(this.parameters.shapes, t)
    }, La.prototype = Object.create(Pn.prototype), La.prototype.constructor = La, Ra.prototype = Object.create(gn.prototype), Ra.prototype.constructor = Ra, Pa.prototype = Object.create(Pn.prototype), Pa.prototype.constructor = Pa, Ca.prototype = Object.create(Ra.prototype), Ca.prototype.constructor = Ca, Ia.prototype = Object.create(Pa.prototype), Ia.prototype.constructor = Ia, Oa.prototype = Object.create(gn.prototype), Oa.prototype.constructor = Oa, Da.prototype = Object.create(Pn.prototype), Da.prototype.constructor = Da;
    var Ba = Object.freeze({
        WireframeGeometry: Sr,
        ParametricGeometry: Er,
        ParametricBufferGeometry: Tr,
        TetrahedronGeometry: Rr,
        TetrahedronBufferGeometry: Pr,
        OctahedronGeometry: Cr,
        OctahedronBufferGeometry: Ir,
        IcosahedronGeometry: Or,
        IcosahedronBufferGeometry: Dr,
        DodecahedronGeometry: Br,
        DodecahedronBufferGeometry: Nr,
        PolyhedronGeometry: Ar,
        PolyhedronBufferGeometry: Lr,
        TubeGeometry: kr,
        TubeBufferGeometry: Ur,
        TorusKnotGeometry: zr,
        TorusKnotBufferGeometry: Fr,
        TorusGeometry: Hr,
        TorusBufferGeometry: Gr,
        TextGeometry: va,
        TextBufferGeometry: ya,
        SphereGeometry: xa,
        SphereBufferGeometry: wa,
        RingGeometry: ba,
        RingBufferGeometry: Ma,
        PlaneGeometry: On,
        PlaneBufferGeometry: Dn,
        LatheGeometry: _a,
        LatheBufferGeometry: Sa,
        ShapeGeometry: Ea,
        ShapeBufferGeometry: Ta,
        ExtrudeGeometry: da,
        ExtrudeBufferGeometry: fa,
        EdgesGeometry: La,
        ConeGeometry: Ca,
        ConeBufferGeometry: Ia,
        CylinderGeometry: Ra,
        CylinderBufferGeometry: Pa,
        CircleGeometry: Oa,
        CircleBufferGeometry: Da,
        BoxGeometry: Cn,
        BoxBufferGeometry: In
    });

    function Na(t) {
        Nn.call(this), this.type = "ShadowMaterial", this.color = new rn(0), this.transparent = !0, this.setValues(t)
    }

    function ka(t) {
        Un.call(this, t), this.type = "RawShaderMaterial"
    }

    function Ua(t) {
        Nn.call(this), this.defines = {
            STANDARD: ""
        }, this.type = "MeshStandardMaterial", this.color = new rn(16777215), this.roughness = .5, this.metalness = .5, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new rn(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Be, this.normalScale = new Ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(t)
    }

    function za(t) {
        Ua.call(this), this.defines = {
            PHYSICAL: ""
        }, this.type = "MeshPhysicalMaterial", this.reflectivity = .5, this.clearCoat = 0, this.clearCoatRoughness = 0, this.setValues(t)
    }

    function Fa(t) {
        Nn.call(this), this.type = "MeshPhongMaterial", this.color = new rn(16777215), this.specular = new rn(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new rn(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Be, this.normalScale = new Ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = $, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(t)
    }

    function Ha(t) {
        Fa.call(this), this.defines = {
            TOON: ""
        }, this.type = "MeshToonMaterial", this.gradientMap = null, this.setValues(t)
    }

    function Ga(t) {
        Nn.call(this), this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Be, this.normalScale = new Ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(t)
    }

    function ja(t) {
        Nn.call(this), this.type = "MeshLambertMaterial", this.color = new rn(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new rn(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = $, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(t)
    }

    function Va(t) {
        fr.call(this), this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(t)
    }
    Na.prototype = Object.create(Nn.prototype), Na.prototype.constructor = Na, Na.prototype.isShadowMaterial = !0, Na.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this
    }, ka.prototype = Object.create(Un.prototype), ka.prototype.constructor = ka, ka.prototype.isRawShaderMaterial = !0, Ua.prototype = Object.create(Nn.prototype), Ua.prototype.constructor = Ua, Ua.prototype.isMeshStandardMaterial = !0, Ua.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.defines = {
            STANDARD: ""
        }, this.color.copy(t.color), this.roughness = t.roughness, this.metalness = t.metalness, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.roughnessMap = t.roughnessMap, this.metalnessMap = t.metalnessMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapIntensity = t.envMapIntensity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this
    }, za.prototype = Object.create(Ua.prototype), za.prototype.constructor = za, za.prototype.isMeshPhysicalMaterial = !0, za.prototype.copy = function(t) {
        return Ua.prototype.copy.call(this, t), this.defines = {
            PHYSICAL: ""
        }, this.reflectivity = t.reflectivity, this.clearCoat = t.clearCoat, this.clearCoatRoughness = t.clearCoatRoughness, this
    }, Fa.prototype = Object.create(Nn.prototype), Fa.prototype.constructor = Fa, Fa.prototype.isMeshPhongMaterial = !0, Fa.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this.specular.copy(t.specular), this.shininess = t.shininess, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this
    }, Ha.prototype = Object.create(Fa.prototype), Ha.prototype.constructor = Ha, Ha.prototype.isMeshToonMaterial = !0, Ha.prototype.copy = function(t) {
        return Fa.prototype.copy.call(this, t), this.gradientMap = t.gradientMap, this
    }, Ga.prototype = Object.create(Nn.prototype), Ga.prototype.constructor = Ga, Ga.prototype.isMeshNormalMaterial = !0, Ga.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this
    }, ja.prototype = Object.create(Nn.prototype), ja.prototype.constructor = ja, ja.prototype.isMeshLambertMaterial = !0, ja.prototype.copy = function(t) {
        return Nn.prototype.copy.call(this, t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.skinning = t.skinning, this.morphTargets = t.morphTargets, this.morphNormals = t.morphNormals, this
    }, Va.prototype = Object.create(fr.prototype), Va.prototype.constructor = Va, Va.prototype.isLineDashedMaterial = !0, Va.prototype.copy = function(t) {
        return fr.prototype.copy.call(this, t), this.scale = t.scale, this.dashSize = t.dashSize, this.gapSize = t.gapSize, this
    };
    var Wa = Object.freeze({
            ShadowMaterial: Na,
            SpriteMaterial: cr,
            RawShaderMaterial: ka,
            ShaderMaterial: Un,
            PointsMaterial: yr,
            MeshPhysicalMaterial: za,
            MeshStandardMaterial: Ua,
            MeshPhongMaterial: Fa,
            MeshToonMaterial: Ha,
            MeshNormalMaterial: Ga,
            MeshLambertMaterial: ja,
            MeshDepthMaterial: Xi,
            MeshDistanceMaterial: qi,
            MeshBasicMaterial: kn,
            LineDashedMaterial: Va,
            LineBasicMaterial: fr,
            Material: Nn
        }),
        Ya = {
            enabled: !1,
            files: {},
            add: function(t, e) {
                !1 !== this.enabled && (this.files[t] = e)
            },
            get: function(t) {
                if (!1 !== this.enabled) return this.files[t]
            },
            remove: function(t) {
                delete this.files[t]
            },
            clear: function() {
                this.files = {}
            }
        };

    function Xa(t, e, n) {
        var i = this,
            r = !1,
            a = 0,
            o = 0,
            s = void 0;
        this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = n, this.itemStart = function(t) {
            o++, !1 === r && void 0 !== i.onStart && i.onStart(t, a, o), r = !0
        }, this.itemEnd = function(t) {
            a++, void 0 !== i.onProgress && i.onProgress(t, a, o), a === o && (r = !1, void 0 !== i.onLoad && i.onLoad())
        }, this.itemError = function(t) {
            void 0 !== i.onError && i.onError(t)
        }, this.resolveURL = function(t) {
            return s ? s(t) : t
        }, this.setURLModifier = function(t) {
            return s = t, this
        }
    }
    var qa = new Xa,
        Za = {};

    function Ka(t) {
        this.manager = void 0 !== t ? t : qa
    }

    function Ja(t) {
        this.manager = void 0 !== t ? t : qa, this._parser = null
    }

    function Qa(t) {
        this.manager = void 0 !== t ? t : qa, this._parser = null
    }

    function $a(t) {
        this.manager = void 0 !== t ? t : qa
    }

    function to(t) {
        this.manager = void 0 !== t ? t : qa
    }

    function eo(t) {
        this.manager = void 0 !== t ? t : qa
    }

    function no() {
        this.type = "Curve", this.arcLengthDivisions = 200
    }

    function io(t, e, n, i, r, a, o, s) {
        no.call(this), this.type = "EllipseCurve", this.aX = t || 0, this.aY = e || 0, this.xRadius = n || 1, this.yRadius = i || 1, this.aStartAngle = r || 0, this.aEndAngle = a || 2 * Math.PI, this.aClockwise = o || !1, this.aRotation = s || 0
    }

    function ro(t, e, n, i, r, a) {
        io.call(this, t, e, n, n, i, r, a), this.type = "ArcCurve"
    }

    function ao() {
        var t = 0,
            e = 0,
            n = 0,
            i = 0;

        function r(r, a, o, s) {
            t = r, e = o, n = -3 * r + 3 * a - 2 * o - s, i = 2 * r - 2 * a + o + s
        }
        return {
            initCatmullRom: function(t, e, n, i, a) {
                r(e, n, a * (n - t), a * (i - e))
            },
            initNonuniformCatmullRom: function(t, e, n, i, a, o, s) {
                var c = (e - t) / a - (n - t) / (a + o) + (n - e) / o,
                    l = (n - e) / o - (i - e) / (o + s) + (i - n) / s;
                r(e, n, c *= o, l *= o)
            },
            calc: function(r) {
                var a = r * r;
                return t + e * r + n * a + i * (a * r)
            }
        }
    }
    Object.assign(Ka.prototype, {
        load: function(t, e, n, i) {
            void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
            var r = this,
                a = Ya.get(t);
            if (void 0 !== a) return r.manager.itemStart(t), setTimeout(function() {
                e && e(a), r.manager.itemEnd(t)
            }, 0), a;
            if (void 0 === Za[t]) {
                var o = t.match(/^data:(.*?)(;base64)?,(.*)$/);
                if (o) {
                    var s = o[1],
                        c = !!o[2],
                        l = o[3];
                    l = window.decodeURIComponent(l), c && (l = window.atob(l));
                    try {
                        var h, u = (this.responseType || "").toLowerCase();
                        switch (u) {
                            case "arraybuffer":
                            case "blob":
                                for (var p = new Uint8Array(l.length), d = 0; d < l.length; d++) p[d] = l.charCodeAt(d);
                                h = "blob" === u ? new Blob([p.buffer], {
                                    type: s
                                }) : p.buffer;
                                break;
                            case "document":
                                var f = new DOMParser;
                                h = f.parseFromString(l, s);
                                break;
                            case "json":
                                h = JSON.parse(l);
                                break;
                            default:
                                h = l
                        }
                        window.setTimeout(function() {
                            e && e(h), r.manager.itemEnd(t)
                        }, 0)
                    } catch (e) {
                        window.setTimeout(function() {
                            i && i(e), r.manager.itemEnd(t), r.manager.itemError(t)
                        }, 0)
                    }
                } else {
                    Za[t] = [], Za[t].push({
                        onLoad: e,
                        onProgress: n,
                        onError: i
                    });
                    var m = new XMLHttpRequest;
                    for (var g in m.open("GET", t, !0), m.addEventListener("load", function(e) {
                            var n = this.response;
                            Ya.add(t, n);
                            var i = Za[t];
                            if (delete Za[t], 200 === this.status || 0 === this.status) {
                                0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
                                for (var a = 0, o = i.length; a < o; a++)(s = i[a]).onLoad && s.onLoad(n);
                                r.manager.itemEnd(t)
                            } else {
                                for (a = 0, o = i.length; a < o; a++) {
                                    var s;
                                    (s = i[a]).onError && s.onError(e)
                                }
                                r.manager.itemEnd(t), r.manager.itemError(t)
                            }
                        }, !1), m.addEventListener("progress", function(e) {
                            for (var n = Za[t], i = 0, r = n.length; i < r; i++) {
                                var a = n[i];
                                a.onProgress && a.onProgress(e)
                            }
                        }, !1), m.addEventListener("error", function(e) {
                            var n = Za[t];
                            delete Za[t];
                            for (var i = 0, a = n.length; i < a; i++) {
                                var o = n[i];
                                o.onError && o.onError(e)
                            }
                            r.manager.itemEnd(t), r.manager.itemError(t)
                        }, !1), void 0 !== this.responseType && (m.responseType = this.responseType), void 0 !== this.withCredentials && (m.withCredentials = this.withCredentials), m.overrideMimeType && m.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain"), this.requestHeader) m.setRequestHeader(g, this.requestHeader[g]);
                    m.send(null)
                }
                return r.manager.itemStart(t), m
            }
            Za[t].push({
                onLoad: e,
                onProgress: n,
                onError: i
            })
        },
        setPath: function(t) {
            return this.path = t, this
        },
        setResponseType: function(t) {
            return this.responseType = t, this
        },
        setWithCredentials: function(t) {
            return this.withCredentials = t, this
        },
        setMimeType: function(t) {
            return this.mimeType = t, this
        },
        setRequestHeader: function(t) {
            return this.requestHeader = t, this
        }
    }), Object.assign(Ja.prototype, {
        load: function(t, e, n, i) {
            var r = this,
                a = [],
                o = new br;
            o.image = a;
            var s = new Ka(this.manager);

            function c(c) {
                s.load(t[c], function(t) {
                    var n = r._parser(t, !0);
                    a[c] = {
                        width: n.width,
                        height: n.height,
                        format: n.format,
                        mipmaps: n.mipmaps
                    }, 6 === (l += 1) && (1 === n.mipmapCount && (o.minFilter = bt), o.format = n.format, o.needsUpdate = !0, e && e(o))
                }, n, i)
            }
            if (s.setPath(this.path), s.setResponseType("arraybuffer"), Array.isArray(t))
                for (var l = 0, h = 0, u = t.length; h < u; ++h) c(h);
            else s.load(t, function(t) {
                var n = r._parser(t, !0);
                if (n.isCubemap)
                    for (var i = n.mipmaps.length / n.mipmapCount, s = 0; s < i; s++) {
                        a[s] = {
                            mipmaps: []
                        };
                        for (var c = 0; c < n.mipmapCount; c++) a[s].mipmaps.push(n.mipmaps[s * n.mipmapCount + c]), a[s].format = n.format, a[s].width = n.width, a[s].height = n.height
                    } else o.image.width = n.width, o.image.height = n.height, o.mipmaps = n.mipmaps;
                1 === n.mipmapCount && (o.minFilter = bt), o.format = n.format, o.needsUpdate = !0, e && e(o)
            }, n, i);
            return o
        },
        setPath: function(t) {
            return this.path = t, this
        }
    }), Object.assign(Qa.prototype, {
        load: function(t, e, n, i) {
            var r = this,
                a = new Ze,
                o = new Ka(this.manager);
            return o.setResponseType("arraybuffer"), o.load(t, function(t) {
                var n = r._parser(t);
                n && (void 0 !== n.image ? a.image = n.image : void 0 !== n.data && (a.image.width = n.width, a.image.height = n.height, a.image.data = n.data), a.wrapS = void 0 !== n.wrapS ? n.wrapS : gt, a.wrapT = void 0 !== n.wrapT ? n.wrapT : gt, a.magFilter = void 0 !== n.magFilter ? n.magFilter : bt, a.minFilter = void 0 !== n.minFilter ? n.minFilter : _t, a.anisotropy = void 0 !== n.anisotropy ? n.anisotropy : 1, void 0 !== n.format && (a.format = n.format), void 0 !== n.type && (a.type = n.type), void 0 !== n.mipmaps && (a.mipmaps = n.mipmaps), 1 === n.mipmapCount && (a.minFilter = bt), a.needsUpdate = !0, e && e(a, n))
            }, n, i), a
        }
    }), Object.assign($a.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
            var r = this,
                a = Ya.get(t);
            if (void 0 !== a) return r.manager.itemStart(t), setTimeout(function() {
                e && e(a), r.manager.itemEnd(t)
            }, 0), a;
            var o = document.createElementNS("http://www.w3.org/1999/xhtml", "img");

            function s() {
                o.removeEventListener("load", s, !1), o.removeEventListener("error", c, !1), Ya.add(t, this), e && e(this), r.manager.itemEnd(t)
            }

            function c(e) {
                o.removeEventListener("load", s, !1), o.removeEventListener("error", c, !1), i && i(e), r.manager.itemEnd(t), r.manager.itemError(t)
            }
            return o.addEventListener("load", s, !1), o.addEventListener("error", c, !1), "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (o.crossOrigin = this.crossOrigin), r.manager.itemStart(t), o.src = t, o
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t, this
        },
        setPath: function(t) {
            return this.path = t, this
        }
    }), Object.assign(to.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            var r = new jn,
                a = new $a(this.manager);
            a.setCrossOrigin(this.crossOrigin), a.setPath(this.path);
            var o = 0;

            function s(n) {
                a.load(t[n], function(t) {
                    r.images[n] = t, 6 == ++o && (r.needsUpdate = !0, e && e(r))
                }, void 0, i)
            }
            for (var c = 0; c < t.length; ++c) s(c);
            return r
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t, this
        },
        setPath: function(t) {
            return this.path = t, this
        }
    }), Object.assign(eo.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            var r = new We,
                a = new $a(this.manager);
            return a.setCrossOrigin(this.crossOrigin), a.setPath(this.path), a.load(t, function(n) {
                r.image = n;
                var i = t.search(/\.(jpg|jpeg)$/) > 0 || 0 === t.search(/^data\:image\/jpeg/);
                r.format = i ? kt : Ut, r.needsUpdate = !0, void 0 !== e && e(r)
            }, n, i), r
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t, this
        },
        setPath: function(t) {
            return this.path = t, this
        }
    }), Object.assign(no.prototype, {
        getPoint: function() {
            return console.warn("THREE.Curve: .getPoint() not implemented."), null
        },
        getPointAt: function(t, e) {
            var n = this.getUtoTmapping(t);
            return this.getPoint(n, e)
        },
        getPoints: function(t) {
            void 0 === t && (t = 5);
            for (var e = [], n = 0; n <= t; n++) e.push(this.getPoint(n / t));
            return e
        },
        getSpacedPoints: function(t) {
            void 0 === t && (t = 5);
            for (var e = [], n = 0; n <= t; n++) e.push(this.getPointAt(n / t));
            return e
        },
        getLength: function() {
            var t = this.getLengths();
            return t[t.length - 1]
        },
        getLengths: function(t) {
            if (void 0 === t && (t = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths;
            this.needsUpdate = !1;
            var e, n, i = [],
                r = this.getPoint(0),
                a = 0;
            for (i.push(0), n = 1; n <= t; n++) a += (e = this.getPoint(n / t)).distanceTo(r), i.push(a), r = e;
            return this.cacheArcLengths = i, i
        },
        updateArcLengths: function() {
            this.needsUpdate = !0, this.getLengths()
        },
        getUtoTmapping: function(t, e) {
            var n, i = this.getLengths(),
                r = 0,
                a = i.length;
            n = e || t * i[a - 1];
            for (var o, s = 0, c = a - 1; s <= c;)
                if ((o = i[r = Math.floor(s + (c - s) / 2)] - n) < 0) s = r + 1;
                else {
                    if (!(o > 0)) {
                        c = r;
                        break
                    }
                    c = r - 1
                } if (i[r = c] === n) return r / (a - 1);
            var l = i[r];
            return (r + (n - l) / (i[r + 1] - l)) / (a - 1)
        },
        getTangent: function(t) {
            var e = t - 1e-4,
                n = t + 1e-4;
            e < 0 && (e = 0), n > 1 && (n = 1);
            var i = this.getPoint(e);
            return this.getPoint(n).clone().sub(i).normalize()
        },
        getTangentAt: function(t) {
            var e = this.getUtoTmapping(t);
            return this.getTangent(e)
        },
        computeFrenetFrames: function(t, e) {
            var n, i, r, a = new He,
                o = [],
                s = [],
                c = [],
                l = new He,
                h = new ze;
            for (n = 0; n <= t; n++) i = n / t, o[n] = this.getTangentAt(i), o[n].normalize();
            s[0] = new He, c[0] = new He;
            var u = Number.MAX_VALUE,
                p = Math.abs(o[0].x),
                d = Math.abs(o[0].y),
                f = Math.abs(o[0].z);
            for (p <= u && (u = p, a.set(1, 0, 0)), d <= u && (u = d, a.set(0, 1, 0)), f <= u && a.set(0, 0, 1), l.crossVectors(o[0], a).normalize(), s[0].crossVectors(o[0], l), c[0].crossVectors(o[0], s[0]), n = 1; n <= t; n++) s[n] = s[n - 1].clone(), c[n] = c[n - 1].clone(), l.crossVectors(o[n - 1], o[n]), l.length() > Number.EPSILON && (l.normalize(), r = Math.acos(ke.clamp(o[n - 1].dot(o[n]), -1, 1)), s[n].applyMatrix4(h.makeRotationAxis(l, r))), c[n].crossVectors(o[n], s[n]);
            if (!0 === e)
                for (r = Math.acos(ke.clamp(s[0].dot(s[t]), -1, 1)), r /= t, o[0].dot(l.crossVectors(s[0], s[t])) > 0 && (r = -r), n = 1; n <= t; n++) s[n].applyMatrix4(h.makeRotationAxis(o[n], r * n)), c[n].crossVectors(o[n], s[n]);
            return {
                tangents: o,
                normals: s,
                binormals: c
            }
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.arcLengthDivisions = t.arcLengthDivisions, this
        },
        toJSON: function() {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "Curve",
                    generator: "Curve.toJSON"
                }
            };
            return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t
        },
        fromJSON: function(t) {
            return this.arcLengthDivisions = t.arcLengthDivisions, this
        }
    }), io.prototype = Object.create(no.prototype), io.prototype.constructor = io, io.prototype.isEllipseCurve = !0, io.prototype.getPoint = function(t, e) {
        for (var n = e || new Ue, i = 2 * Math.PI, r = this.aEndAngle - this.aStartAngle, a = Math.abs(r) < Number.EPSILON; r < 0;) r += i;
        for (; r > i;) r -= i;
        r < Number.EPSILON && (r = a ? 0 : i), !0 !== this.aClockwise || a || (r === i ? r = -i : r -= i);
        var o = this.aStartAngle + t * r,
            s = this.aX + this.xRadius * Math.cos(o),
            c = this.aY + this.yRadius * Math.sin(o);
        if (0 !== this.aRotation) {
            var l = Math.cos(this.aRotation),
                h = Math.sin(this.aRotation),
                u = s - this.aX,
                p = c - this.aY;
            s = u * l - p * h + this.aX, c = u * h + p * l + this.aY
        }
        return n.set(s, c)
    }, io.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this
    }, io.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t
    }, io.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this
    }, ro.prototype = Object.create(io.prototype), ro.prototype.constructor = ro, ro.prototype.isArcCurve = !0;
    var oo = new He,
        so = new ao,
        co = new ao,
        lo = new ao;

    function ho(t, e, n, i) {
        no.call(this), this.type = "CatmullRomCurve3", this.points = t || [], this.closed = e || !1, this.curveType = n || "centripetal", this.tension = i || .5
    }

    function uo(t, e, n, i, r) {
        var a = .5 * (i - e),
            o = .5 * (r - n),
            s = t * t;
        return (2 * n - 2 * i + a + o) * (t * s) + (-3 * n + 3 * i - 2 * a - o) * s + a * t + n
    }

    function po(t, e, n, i) {
        return function(t, e) {
            var n = 1 - t;
            return n * n * e
        }(t, e) + function(t, e) {
            return 2 * (1 - t) * t * n
        }(t) + function(t, e) {
            return t * t * i
        }(t)
    }

    function fo(t, e, n, i, r) {
        return function(t, e) {
            var n = 1 - t;
            return n * n * n * e
        }(t, e) + function(t, e) {
            var n = 1 - t;
            return 3 * n * n * t * e
        }(t, n) + function(t, e) {
            return 3 * (1 - t) * t * t * i
        }(t) + function(t, e) {
            return t * t * t * r
        }(t)
    }

    function mo(t, e, n, i) {
        no.call(this), this.type = "CubicBezierCurve", this.v0 = t || new Ue, this.v1 = e || new Ue, this.v2 = n || new Ue, this.v3 = i || new Ue
    }

    function go(t, e, n, i) {
        no.call(this), this.type = "CubicBezierCurve3", this.v0 = t || new He, this.v1 = e || new He, this.v2 = n || new He, this.v3 = i || new He
    }

    function vo(t, e) {
        no.call(this), this.type = "LineCurve", this.v1 = t || new Ue, this.v2 = e || new Ue
    }

    function yo(t, e) {
        no.call(this), this.type = "LineCurve3", this.v1 = t || new He, this.v2 = e || new He
    }

    function xo(t, e, n) {
        no.call(this), this.type = "QuadraticBezierCurve", this.v0 = t || new Ue, this.v1 = e || new Ue, this.v2 = n || new Ue
    }

    function wo(t, e, n) {
        no.call(this), this.type = "QuadraticBezierCurve3", this.v0 = t || new He, this.v1 = e || new He, this.v2 = n || new He
    }

    function bo(t) {
        no.call(this), this.type = "SplineCurve", this.points = t || []
    }
    ho.prototype = Object.create(no.prototype), ho.prototype.constructor = ho, ho.prototype.isCatmullRomCurve3 = !0, ho.prototype.getPoint = function(t, e) {
        var n, i, r, a, o = e || new He,
            s = this.points,
            c = s.length,
            l = (c - (this.closed ? 0 : 1)) * t,
            h = Math.floor(l),
            u = l - h;
        if (this.closed ? h += h > 0 ? 0 : (Math.floor(Math.abs(h) / c) + 1) * c : 0 === u && h === c - 1 && (h = c - 2, u = 1), this.closed || h > 0 ? n = s[(h - 1) % c] : (oo.subVectors(s[0], s[1]).add(s[0]), n = oo), i = s[h % c], r = s[(h + 1) % c], this.closed || h + 2 < c ? a = s[(h + 2) % c] : (oo.subVectors(s[c - 1], s[c - 2]).add(s[c - 1]), a = oo), "centripetal" === this.curveType || "chordal" === this.curveType) {
            var p = "chordal" === this.curveType ? .5 : .25,
                d = Math.pow(n.distanceToSquared(i), p),
                f = Math.pow(i.distanceToSquared(r), p),
                m = Math.pow(r.distanceToSquared(a), p);
            f < 1e-4 && (f = 1), d < 1e-4 && (d = f), m < 1e-4 && (m = f), so.initNonuniformCatmullRom(n.x, i.x, r.x, a.x, d, f, m), co.initNonuniformCatmullRom(n.y, i.y, r.y, a.y, d, f, m), lo.initNonuniformCatmullRom(n.z, i.z, r.z, a.z, d, f, m)
        } else "catmullrom" === this.curveType && (so.initCatmullRom(n.x, i.x, r.x, a.x, this.tension), co.initCatmullRom(n.y, i.y, r.y, a.y, this.tension), lo.initCatmullRom(n.z, i.z, r.z, a.z, this.tension));
        return o.set(so.calc(u), co.calc(u), lo.calc(u)), o
    }, ho.prototype.copy = function(t) {
        no.prototype.copy.call(this, t), this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push(i.clone())
        }
        return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this
    }, ho.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        t.points = [];
        for (var e = 0, n = this.points.length; e < n; e++) {
            var i = this.points[e];
            t.points.push(i.toArray())
        }
        return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t
    }, ho.prototype.fromJSON = function(t) {
        no.prototype.fromJSON.call(this, t), this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push((new He).fromArray(i))
        }
        return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this
    }, mo.prototype = Object.create(no.prototype), mo.prototype.constructor = mo, mo.prototype.isCubicBezierCurve = !0, mo.prototype.getPoint = function(t, e) {
        var n = e || new Ue,
            i = this.v0,
            r = this.v1,
            a = this.v2,
            o = this.v3;
        return n.set(fo(t, i.x, r.x, a.x, o.x), fo(t, i.y, r.y, a.y, o.y)), n
    }, mo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this
    }, mo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t
    }, mo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this
    }, go.prototype = Object.create(no.prototype), go.prototype.constructor = go, go.prototype.isCubicBezierCurve3 = !0, go.prototype.getPoint = function(t, e) {
        var n = e || new He,
            i = this.v0,
            r = this.v1,
            a = this.v2,
            o = this.v3;
        return n.set(fo(t, i.x, r.x, a.x, o.x), fo(t, i.y, r.y, a.y, o.y), fo(t, i.z, r.z, a.z, o.z)), n
    }, go.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this
    }, go.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t
    }, go.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this
    }, vo.prototype = Object.create(no.prototype), vo.prototype.constructor = vo, vo.prototype.isLineCurve = !0, vo.prototype.getPoint = function(t, e) {
        var n = e || new Ue;
        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n
    }, vo.prototype.getPointAt = function(t, e) {
        return this.getPoint(t, e)
    }, vo.prototype.getTangent = function() {
        return this.v2.clone().sub(this.v1).normalize()
    }, vo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this
    }, vo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t
    }, vo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this
    }, yo.prototype = Object.create(no.prototype), yo.prototype.constructor = yo, yo.prototype.isLineCurve3 = !0, yo.prototype.getPoint = function(t, e) {
        var n = e || new He;
        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n
    }, yo.prototype.getPointAt = function(t, e) {
        return this.getPoint(t, e)
    }, yo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this
    }, yo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t
    }, yo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this
    }, xo.prototype = Object.create(no.prototype), xo.prototype.constructor = xo, xo.prototype.isQuadraticBezierCurve = !0, xo.prototype.getPoint = function(t, e) {
        var n = e || new Ue,
            i = this.v0,
            r = this.v1,
            a = this.v2;
        return n.set(po(t, i.x, r.x, a.x), po(t, i.y, r.y, a.y)), n
    }, xo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this
    }, xo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t
    }, xo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this
    }, wo.prototype = Object.create(no.prototype), wo.prototype.constructor = wo, wo.prototype.isQuadraticBezierCurve3 = !0, wo.prototype.getPoint = function(t, e) {
        var n = e || new He,
            i = this.v0,
            r = this.v1,
            a = this.v2;
        return n.set(po(t, i.x, r.x, a.x), po(t, i.y, r.y, a.y), po(t, i.z, r.z, a.z)), n
    }, wo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this
    }, wo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t
    }, wo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this
    }, bo.prototype = Object.create(no.prototype), bo.prototype.constructor = bo, bo.prototype.isSplineCurve = !0, bo.prototype.getPoint = function(t, e) {
        var n = e || new Ue,
            i = this.points,
            r = (i.length - 1) * t,
            a = Math.floor(r),
            o = r - a,
            s = i[0 === a ? a : a - 1],
            c = i[a],
            l = i[a > i.length - 2 ? i.length - 1 : a + 1],
            h = i[a > i.length - 3 ? i.length - 1 : a + 2];
        return n.set(uo(o, s.x, c.x, l.x, h.x), uo(o, s.y, c.y, l.y, h.y)), n
    }, bo.prototype.copy = function(t) {
        no.prototype.copy.call(this, t), this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push(i.clone())
        }
        return this
    }, bo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        t.points = [];
        for (var e = 0, n = this.points.length; e < n; e++) {
            var i = this.points[e];
            t.points.push(i.toArray())
        }
        return t
    }, bo.prototype.fromJSON = function(t) {
        no.prototype.fromJSON.call(this, t), this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push((new Ue).fromArray(i))
        }
        return this
    };
    var Mo = Object.freeze({
        ArcCurve: ro,
        CatmullRomCurve3: ho,
        CubicBezierCurve: mo,
        CubicBezierCurve3: go,
        EllipseCurve: io,
        LineCurve: vo,
        LineCurve3: yo,
        QuadraticBezierCurve: xo,
        QuadraticBezierCurve3: wo,
        SplineCurve: bo
    });

    function _o() {
        no.call(this), this.type = "CurvePath", this.curves = [], this.autoClose = !1
    }

    function So(t) {
        _o.call(this), this.type = "Path", this.currentPoint = new Ue, t && this.setFromPoints(t)
    }

    function Eo(t) {
        So.call(this, t), this.uuid = ke.generateUUID(), this.type = "Shape", this.holes = []
    }

    function To(t, e) {
        un.call(this), this.type = "Light", this.color = new rn(t), this.intensity = void 0 !== e ? e : 1, this.receiveShadow = void 0
    }

    function Ao(t, e, n) {
        To.call(this, t, n), this.type = "HemisphereLight", this.castShadow = void 0, this.position.copy(un.DefaultUp), this.updateMatrix(), this.groundColor = new rn(e)
    }

    function Lo(t) {
        this.camera = t, this.bias = 0, this.radius = 1, this.mapSize = new Ue(512, 512), this.map = null, this.matrix = new ze
    }

    function Ro() {
        Lo.call(this, new $i(50, 1, .5, 500))
    }

    function Po(t, e, n, i, r, a) {
        To.call(this, t, e), this.type = "SpotLight", this.position.copy(un.DefaultUp), this.updateMatrix(), this.target = new un, Object.defineProperty(this, "power", {
            get: function() {
                return this.intensity * Math.PI
            },
            set: function(t) {
                this.intensity = t / Math.PI
            }
        }), this.distance = void 0 !== n ? n : 0, this.angle = void 0 !== i ? i : Math.PI / 3, this.penumbra = void 0 !== r ? r : 0, this.decay = void 0 !== a ? a : 1, this.shadow = new Ro
    }

    function Co(t, e, n, i) {
        To.call(this, t, e), this.type = "PointLight", Object.defineProperty(this, "power", {
            get: function() {
                return 4 * this.intensity * Math.PI
            },
            set: function(t) {
                this.intensity = t / (4 * Math.PI)
            }
        }), this.distance = void 0 !== n ? n : 0, this.decay = void 0 !== i ? i : 1, this.shadow = new Lo(new $i(90, 1, .5, 500))
    }

    function Io() {
        Lo.call(this, new dn(-5, 5, 5, -5, .5, 500))
    }

    function Oo(t, e) {
        To.call(this, t, e), this.type = "DirectionalLight", this.position.copy(un.DefaultUp), this.updateMatrix(), this.target = new un, this.shadow = new Io
    }

    function Do(t, e) {
        To.call(this, t, e), this.type = "AmbientLight", this.castShadow = void 0
    }

    function Bo(t, e, n, i) {
        To.call(this, t, e), this.type = "RectAreaLight", this.width = void 0 !== n ? n : 10, this.height = void 0 !== i ? i : 10
    }
    _o.prototype = Object.assign(Object.create(no.prototype), {
        constructor: _o,
        add: function(t) {
            this.curves.push(t)
        },
        closePath: function() {
            var t = this.curves[0].getPoint(0),
                e = this.curves[this.curves.length - 1].getPoint(1);
            t.equals(e) || this.curves.push(new vo(e, t))
        },
        getPoint: function(t) {
            for (var e = t * this.getLength(), n = this.getCurveLengths(), i = 0; i < n.length;) {
                if (n[i] >= e) {
                    var r = n[i] - e,
                        a = this.curves[i],
                        o = a.getLength(),
                        s = 0 === o ? 0 : 1 - r / o;
                    return a.getPointAt(s)
                }
                i++
            }
            return null
        },
        getLength: function() {
            var t = this.getCurveLengths();
            return t[t.length - 1]
        },
        updateArcLengths: function() {
            this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths()
        },
        getCurveLengths: function() {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
            for (var t = [], e = 0, n = 0, i = this.curves.length; n < i; n++) e += this.curves[n].getLength(), t.push(e);
            return this.cacheLengths = t, t
        },
        getSpacedPoints: function(t) {
            void 0 === t && (t = 40);
            for (var e = [], n = 0; n <= t; n++) e.push(this.getPoint(n / t));
            return this.autoClose && e.push(e[0]), e
        },
        getPoints: function(t) {
            t = t || 12;
            for (var e, n = [], i = 0, r = this.curves; i < r.length; i++)
                for (var a = r[i], o = a && a.isEllipseCurve ? 2 * t : a && (a.isLineCurve || a.isLineCurve3) ? 1 : a && a.isSplineCurve ? t * a.points.length : t, s = a.getPoints(o), c = 0; c < s.length; c++) {
                    var l = s[c];
                    e && e.equals(l) || (n.push(l), e = l)
                }
            return this.autoClose && n.length > 1 && !n[n.length - 1].equals(n[0]) && n.push(n[0]), n
        },
        copy: function(t) {
            no.prototype.copy.call(this, t), this.curves = [];
            for (var e = 0, n = t.curves.length; e < n; e++) {
                var i = t.curves[e];
                this.curves.push(i.clone())
            }
            return this.autoClose = t.autoClose, this
        },
        toJSON: function() {
            var t = no.prototype.toJSON.call(this);
            t.autoClose = this.autoClose, t.curves = [];
            for (var e = 0, n = this.curves.length; e < n; e++) {
                var i = this.curves[e];
                t.curves.push(i.toJSON())
            }
            return t
        },
        fromJSON: function(t) {
            no.prototype.fromJSON.call(this, t), this.autoClose = t.autoClose, this.curves = [];
            for (var e = 0, n = t.curves.length; e < n; e++) {
                var i = t.curves[e];
                this.curves.push((new Mo[i.type]).fromJSON(i))
            }
            return this
        }
    }), So.prototype = Object.assign(Object.create(_o.prototype), {
        constructor: So,
        setFromPoints: function(t) {
            this.moveTo(t[0].x, t[0].y);
            for (var e = 1, n = t.length; e < n; e++) this.lineTo(t[e].x, t[e].y)
        },
        moveTo: function(t, e) {
            this.currentPoint.set(t, e)
        },
        lineTo: function(t, e) {
            var n = new vo(this.currentPoint.clone(), new Ue(t, e));
            this.curves.push(n), this.currentPoint.set(t, e)
        },
        quadraticCurveTo: function(t, e, n, i) {
            var r = new xo(this.currentPoint.clone(), new Ue(t, e), new Ue(n, i));
            this.curves.push(r), this.currentPoint.set(n, i)
        },
        bezierCurveTo: function(t, e, n, i, r, a) {
            var o = new mo(this.currentPoint.clone(), new Ue(t, e), new Ue(n, i), new Ue(r, a));
            this.curves.push(o), this.currentPoint.set(r, a)
        },
        splineThru: function(t) {
            var e = new bo([this.currentPoint.clone()].concat(t));
            this.curves.push(e), this.currentPoint.copy(t[t.length - 1])
        },
        arc: function(t, e, n, i, r, a) {
            var o = this.currentPoint.x,
                s = this.currentPoint.y;
            this.absarc(t + o, e + s, n, i, r, a)
        },
        absarc: function(t, e, n, i, r, a) {
            this.absellipse(t, e, n, n, i, r, a)
        },
        ellipse: function(t, e, n, i, r, a, o, s) {
            var c = this.currentPoint.x,
                l = this.currentPoint.y;
            this.absellipse(t + c, e + l, n, i, r, a, o, s)
        },
        absellipse: function(t, e, n, i, r, a, o, s) {
            var c = new io(t, e, n, i, r, a, o, s);
            if (this.curves.length > 0) {
                var l = c.getPoint(0);
                l.equals(this.currentPoint) || this.lineTo(l.x, l.y)
            }
            this.curves.push(c);
            var h = c.getPoint(1);
            this.currentPoint.copy(h)
        },
        copy: function(t) {
            return _o.prototype.copy.call(this, t), this.currentPoint.copy(t.currentPoint), this
        },
        toJSON: function() {
            var t = _o.prototype.toJSON.call(this);
            return t.currentPoint = this.currentPoint.toArray(), t
        },
        fromJSON: function(t) {
            return _o.prototype.fromJSON.call(this, t), this.currentPoint.fromArray(t.currentPoint), this
        }
    }), Eo.prototype = Object.assign(Object.create(So.prototype), {
        constructor: Eo,
        getPointsHoles: function(t) {
            for (var e = [], n = 0, i = this.holes.length; n < i; n++) e[n] = this.holes[n].getPoints(t);
            return e
        },
        extractPoints: function(t) {
            return {
                shape: this.getPoints(t),
                holes: this.getPointsHoles(t)
            }
        },
        copy: function(t) {
            So.prototype.copy.call(this, t), this.holes = [];
            for (var e = 0, n = t.holes.length; e < n; e++) {
                var i = t.holes[e];
                this.holes.push(i.clone())
            }
            return this
        },
        toJSON: function() {
            var t = So.prototype.toJSON.call(this);
            t.uuid = this.uuid, t.holes = [];
            for (var e = 0, n = this.holes.length; e < n; e++) {
                var i = this.holes[e];
                t.holes.push(i.toJSON())
            }
            return t
        },
        fromJSON: function(t) {
            So.prototype.fromJSON.call(this, t), this.uuid = t.uuid, this.holes = [];
            for (var e = 0, n = t.holes.length; e < n; e++) {
                var i = t.holes[e];
                this.holes.push((new So).fromJSON(i))
            }
            return this
        }
    }), To.prototype = Object.assign(Object.create(un.prototype), {
        constructor: To,
        isLight: !0,
        copy: function(t) {
            return un.prototype.copy.call(this, t), this.color.copy(t.color), this.intensity = t.intensity, this
        },
        toJSON: function(t) {
            var e = un.prototype.toJSON.call(this, t);
            return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (e.object.distance = this.distance), void 0 !== this.angle && (e.object.angle = this.angle), void 0 !== this.decay && (e.object.decay = this.decay), void 0 !== this.penumbra && (e.object.penumbra = this.penumbra), void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()), e
        }
    }), Ao.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Ao,
        isHemisphereLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t), this.groundColor.copy(t.groundColor), this
        }
    }), Object.assign(Lo.prototype, {
        copy: function(t) {
            return this.camera = t.camera.clone(), this.bias = t.bias, this.radius = t.radius, this.mapSize.copy(t.mapSize), this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        toJSON: function() {
            var t = {};
            return 0 !== this.bias && (t.bias = this.bias), 1 !== this.radius && (t.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(!1).object, delete t.camera.matrix, t
        }
    }), Ro.prototype = Object.assign(Object.create(Lo.prototype), {
        constructor: Ro,
        isSpotLightShadow: !0,
        update: function(t) {
            var e = this.camera,
                n = 2 * ke.RAD2DEG * t.angle,
                i = this.mapSize.width / this.mapSize.height,
                r = t.distance || e.far;
            n === e.fov && i === e.aspect && r === e.far || (e.fov = n, e.aspect = i, e.far = r, e.updateProjectionMatrix())
        }
    }), Po.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Po,
        isSpotLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t), this.distance = t.distance, this.angle = t.angle, this.penumbra = t.penumbra, this.decay = t.decay, this.target = t.target.clone(), this.shadow = t.shadow.clone(), this
        }
    }), Co.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Co,
        isPointLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t), this.distance = t.distance, this.decay = t.decay, this.shadow = t.shadow.clone(), this
        }
    }), Io.prototype = Object.assign(Object.create(Lo.prototype), {
        constructor: Io
    }), Oo.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Oo,
        isDirectionalLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this
        }
    }), Do.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Do,
        isAmbientLight: !0
    }), Bo.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Bo,
        isRectAreaLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t), this.width = t.width, this.height = t.height, this
        },
        toJSON: function(t) {
            var e = To.prototype.toJSON.call(this, t);
            return e.object.width = this.width, e.object.height = this.height, e
        }
    });
    var No = {
        arraySlice: function(t, e, n) {
            return No.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== n ? n : t.length)) : t.slice(e, n)
        },
        convertArray: function(t, e, n) {
            return !t || !n && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t)
        },
        isTypedArray: function(t) {
            return ArrayBuffer.isView(t) && !(t instanceof DataView)
        },
        getKeyframeOrder: function(t) {
            for (var e = t.length, n = new Array(e), i = 0; i !== e; ++i) n[i] = i;
            return n.sort(function(e, n) {
                return t[e] - t[n]
            }), n
        },
        sortedArray: function(t, e, n) {
            for (var i = t.length, r = new t.constructor(i), a = 0, o = 0; o !== i; ++a)
                for (var s = n[a] * e, c = 0; c !== e; ++c) r[o++] = t[s + c];
            return r
        },
        flattenJSON: function(t, e, n, i) {
            for (var r = 1, a = t[0]; void 0 !== a && void 0 === a[i];) a = t[r++];
            if (void 0 !== a) {
                var o = a[i];
                if (void 0 !== o)
                    if (Array.isArray(o))
                        do {
                            void 0 !== (o = a[i]) && (e.push(a.time), n.push.apply(n, o)), a = t[r++]
                        } while (void 0 !== a);
                    else if (void 0 !== o.toArray)
                    do {
                        void 0 !== (o = a[i]) && (e.push(a.time), o.toArray(n, n.length)), a = t[r++]
                    } while (void 0 !== a);
                else
                    do {
                        void 0 !== (o = a[i]) && (e.push(a.time), n.push(o)), a = t[r++]
                    } while (void 0 !== a)
            }
        }
    };

    function ko(t, e, n, i) {
        this.parameterPositions = t, this._cachedIndex = 0, this.resultBuffer = void 0 !== i ? i : new e.constructor(n), this.sampleValues = e, this.valueSize = n
    }

    function Uo(t, e, n, i) {
        ko.call(this, t, e, n, i), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0
    }

    function zo(t, e, n, i) {
        ko.call(this, t, e, n, i)
    }

    function Fo(t, e, n, i) {
        ko.call(this, t, e, n, i)
    }

    function Ho(t, e, n, i) {
        if (void 0 === t) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (void 0 === e || 0 === e.length) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
        this.name = t, this.times = No.convertArray(e, this.TimeBufferType), this.values = No.convertArray(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation)
    }

    function Go(t, e, n) {
        Ho.call(this, t, e, n)
    }

    function jo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }

    function Vo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }

    function Wo(t, e, n, i) {
        ko.call(this, t, e, n, i)
    }

    function Yo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }

    function Xo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }

    function qo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }

    function Zo(t, e, n) {
        this.name = t, this.tracks = n, this.duration = void 0 !== e ? e : -1, this.uuid = ke.generateUUID(), this.duration < 0 && this.resetDuration()
    }

    function Ko(t) {
        if (void 0 === t.type) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
        var e = function(t) {
            switch (t.toLowerCase()) {
                case "scalar":
                case "double":
                case "float":
                case "number":
                case "integer":
                    return Vo;
                case "vector":
                case "vector2":
                case "vector3":
                case "vector4":
                    return qo;
                case "color":
                    return jo;
                case "quaternion":
                    return Yo;
                case "bool":
                case "boolean":
                    return Go;
                case "string":
                    return Xo
            }
            throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t)
        }(t.type);
        if (void 0 === t.times) {
            var n = [],
                i = [];
            No.flattenJSON(t.keys, n, i, "value"), t.times = n, t.values = i
        }
        return void 0 !== e.parse ? e.parse(t) : new e(t.name, t.times, t.values, t.interpolation)
    }

    function Jo(t) {
        this.manager = void 0 !== t ? t : qa, this.textures = {}
    }

    function Qo(t) {
        this.manager = void 0 !== t ? t : qa
    }
    Object.assign(ko.prototype, {
        evaluate: function(t) {
            var e = this.parameterPositions,
                n = this._cachedIndex,
                i = e[n],
                r = e[n - 1];
            t: {
                e: {
                    var a;n: {
                        i: if (!(t < i)) {
                            for (var o = n + 2;;) {
                                if (void 0 === i) {
                                    if (t < r) break i;
                                    return n = e.length, this._cachedIndex = n, this.afterEnd_(n - 1, t, r)
                                }
                                if (n === o) break;
                                if (r = i, t < (i = e[++n])) break e
                            }
                            a = e.length;
                            break n
                        }if (t >= r) break t;
                        var s = e[1];
                        for (t < s && (n = 2, r = s), o = n - 2;;) {
                            if (void 0 === r) return this._cachedIndex = 0, this.beforeStart_(0, t, i);
                            if (n === o) break;
                            if (i = r, t >= (r = e[--n - 1])) break e
                        }
                        a = n,
                        n = 0
                    }
                    for (; n < a;) {
                        var c = n + a >>> 1;
                        t < e[c] ? a = c : n = c + 1
                    }
                    if (i = e[n], void 0 === (r = e[n - 1])) return this._cachedIndex = 0,
                    this.beforeStart_(0, t, i);
                    if (void 0 === i) return n = e.length,
                    this._cachedIndex = n,
                    this.afterEnd_(n - 1, r, t)
                }
                this._cachedIndex = n,
                this.intervalChanged_(n, r, i)
            }
            return this.interpolate_(n, r, t, i)
        },
        settings: null,
        DefaultSettings_: {},
        getSettings_: function() {
            return this.settings || this.DefaultSettings_
        },
        copySampleValue_: function(t) {
            for (var e = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = t * i, a = 0; a !== i; ++a) e[a] = n[r + a];
            return e
        },
        interpolate_: function() {
            throw new Error("call to abstract method")
        },
        intervalChanged_: function() {}
    }), Object.assign(ko.prototype, {
        beforeStart_: ko.prototype.copySampleValue_,
        afterEnd_: ko.prototype.copySampleValue_
    }), Uo.prototype = Object.assign(Object.create(ko.prototype), {
        constructor: Uo,
        DefaultSettings_: {
            endingStart: xe,
            endingEnd: xe
        },
        intervalChanged_: function(t, e, n) {
            var i = this.parameterPositions,
                r = t - 2,
                a = t + 1,
                o = i[r],
                s = i[a];
            if (void 0 === o) switch (this.getSettings_().endingStart) {
                case we:
                    r = t, o = 2 * e - n;
                    break;
                case be:
                    o = e + i[r = i.length - 2] - i[r + 1];
                    break;
                default:
                    r = t, o = n
            }
            if (void 0 === s) switch (this.getSettings_().endingEnd) {
                case we:
                    a = t, s = 2 * n - e;
                    break;
                case be:
                    a = 1, s = n + i[1] - i[0];
                    break;
                default:
                    a = t - 1, s = e
            }
            var c = .5 * (n - e),
                l = this.valueSize;
            this._weightPrev = c / (e - o), this._weightNext = c / (s - n), this._offsetPrev = r * l, this._offsetNext = a * l
        },
        interpolate_: function(t, e, n, i) {
            for (var r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = t * o, c = s - o, l = this._offsetPrev, h = this._offsetNext, u = this._weightPrev, p = this._weightNext, d = (n - e) / (i - e), f = d * d, m = f * d, g = -u * m + 2 * u * f - u * d, v = (1 + u) * m + (-1.5 - 2 * u) * f + (-.5 + u) * d + 1, y = (-1 - p) * m + (1.5 + p) * f + .5 * d, x = p * m - p * f, w = 0; w !== o; ++w) r[w] = g * a[l + w] + v * a[c + w] + y * a[s + w] + x * a[h + w];
            return r
        }
    }), zo.prototype = Object.assign(Object.create(ko.prototype), {
        constructor: zo,
        interpolate_: function(t, e, n, i) {
            for (var r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = t * o, c = s - o, l = (n - e) / (i - e), h = 1 - l, u = 0; u !== o; ++u) r[u] = a[c + u] * h + a[s + u] * l;
            return r
        }
    }), Fo.prototype = Object.assign(Object.create(ko.prototype), {
        constructor: Fo,
        interpolate_: function(t) {
            return this.copySampleValue_(t - 1)
        }
    }), Object.assign(Ho, {
        toJSON: function(t) {
            var e, n = t.constructor;
            if (void 0 !== n.toJSON) e = n.toJSON(t);
            else {
                e = {
                    name: t.name,
                    times: No.convertArray(t.times, Array),
                    values: No.convertArray(t.values, Array)
                };
                var i = t.getInterpolation();
                i !== t.DefaultInterpolation && (e.interpolation = i)
            }
            return e.type = t.ValueTypeName, e
        }
    }), Object.assign(Ho.prototype, {
        constructor: Ho,
        TimeBufferType: Float32Array,
        ValueBufferType: Float32Array,
        DefaultInterpolation: ve,
        InterpolantFactoryMethodDiscrete: function(t) {
            return new Fo(this.times, this.values, this.getValueSize(), t)
        },
        InterpolantFactoryMethodLinear: function(t) {
            return new zo(this.times, this.values, this.getValueSize(), t)
        },
        InterpolantFactoryMethodSmooth: function(t) {
            return new Uo(this.times, this.values, this.getValueSize(), t)
        },
        setInterpolation: function(t) {
            var e;
            switch (t) {
                case ge:
                    e = this.InterpolantFactoryMethodDiscrete;
                    break;
                case ve:
                    e = this.InterpolantFactoryMethodLinear;
                    break;
                case ye:
                    e = this.InterpolantFactoryMethodSmooth
            }
            if (void 0 === e) {
                var n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                if (void 0 === this.createInterpolant) {
                    if (t === this.DefaultInterpolation) throw new Error(n);
                    this.setInterpolation(this.DefaultInterpolation)
                }
                return console.warn("THREE.KeyframeTrack:", n), this
            }
            return this.createInterpolant = e, this
        },
        getInterpolation: function() {
            switch (this.createInterpolant) {
                case this.InterpolantFactoryMethodDiscrete:
                    return ge;
                case this.InterpolantFactoryMethodLinear:
                    return ve;
                case this.InterpolantFactoryMethodSmooth:
                    return ye
            }
        },
        getValueSize: function() {
            return this.values.length / this.times.length
        },
        shift: function(t) {
            if (0 !== t)
                for (var e = this.times, n = 0, i = e.length; n !== i; ++n) e[n] += t;
            return this
        },
        scale: function(t) {
            if (1 !== t)
                for (var e = this.times, n = 0, i = e.length; n !== i; ++n) e[n] *= t;
            return this
        },
        trim: function(t, e) {
            for (var n = this.times, i = n.length, r = 0, a = i - 1; r !== i && n[r] < t;) ++r;
            for (; - 1 !== a && n[a] > e;) --a;
            if (++a, 0 !== r || a !== i) {
                r >= a && (r = (a = Math.max(a, 1)) - 1);
                var o = this.getValueSize();
                this.times = No.arraySlice(n, r, a), this.values = No.arraySlice(this.values, r * o, a * o)
            }
            return this
        },
        validate: function() {
            var t = !0,
                e = this.getValueSize();
            e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t = !1);
            var n = this.times,
                i = this.values,
                r = n.length;
            0 === r && (console.error("THREE.KeyframeTrack: Track is empty.", this), t = !1);
            for (var a = null, o = 0; o !== r; o++) {
                var s = n[o];
                if ("number" == typeof s && isNaN(s)) {
                    console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, s), t = !1;
                    break
                }
                if (null !== a && a > s) {
                    console.error("THREE.KeyframeTrack: Out of order keys.", this, o, s, a), t = !1;
                    break
                }
                a = s
            }
            if (void 0 !== i && No.isTypedArray(i)) {
                o = 0;
                for (var c = i.length; o !== c; ++o) {
                    var l = i[o];
                    if (isNaN(l)) {
                        console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l), t = !1;
                        break
                    }
                }
            }
            return t
        },
        optimize: function() {
            for (var t = this.times, e = this.values, n = this.getValueSize(), i = this.getInterpolation() === ye, r = 1, a = t.length - 1, o = 1; o < a; ++o) {
                var s = !1,
                    c = t[o];
                if (c !== t[o + 1] && (1 !== o || c !== c[0]))
                    if (i) s = !0;
                    else
                        for (var l = o * n, h = l - n, u = l + n, p = 0; p !== n; ++p) {
                            var d = e[l + p];
                            if (d !== e[h + p] || d !== e[u + p]) {
                                s = !0;
                                break
                            }
                        }
                if (s) {
                    if (o !== r) {
                        t[r] = t[o];
                        var f = o * n,
                            m = r * n;
                        for (p = 0; p !== n; ++p) e[m + p] = e[f + p]
                    }++r
                }
            }
            if (a > 0) {
                for (t[r] = t[a], f = a * n, m = r * n, p = 0; p !== n; ++p) e[m + p] = e[f + p];
                ++r
            }
            return r !== t.length && (this.times = No.arraySlice(t, 0, r), this.values = No.arraySlice(e, 0, r * n)), this
        }
    }), Go.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Go,
        ValueTypeName: "bool",
        ValueBufferType: Array,
        DefaultInterpolation: ge,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    }), jo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: jo,
        ValueTypeName: "color"
    }), Vo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Vo,
        ValueTypeName: "number"
    }), Wo.prototype = Object.assign(Object.create(ko.prototype), {
        constructor: Wo,
        interpolate_: function(t, e, n, i) {
            for (var r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = t * o, c = (n - e) / (i - e), l = s + o; s !== l; s += 4) Fe.slerpFlat(r, 0, a, s - o, a, s, c);
            return r
        }
    }), Yo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Yo,
        ValueTypeName: "quaternion",
        DefaultInterpolation: ve,
        InterpolantFactoryMethodLinear: function(t) {
            return new Wo(this.times, this.values, this.getValueSize(), t)
        },
        InterpolantFactoryMethodSmooth: void 0
    }), Xo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Xo,
        ValueTypeName: "string",
        ValueBufferType: Array,
        DefaultInterpolation: ge,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    }), qo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: qo,
        ValueTypeName: "vector"
    }), Object.assign(Zo, {
        parse: function(t) {
            for (var e = [], n = t.tracks, i = 1 / (t.fps || 1), r = 0, a = n.length; r !== a; ++r) e.push(Ko(n[r]).scale(i));
            return new Zo(t.name, t.duration, e)
        },
        toJSON: function(t) {
            for (var e = [], n = t.tracks, i = {
                    name: t.name,
                    duration: t.duration,
                    tracks: e,
                    uuid: t.uuid
                }, r = 0, a = n.length; r !== a; ++r) e.push(Ho.toJSON(n[r]));
            return i
        },
        CreateFromMorphTargetSequence: function(t, e, n, i) {
            for (var r = e.length, a = [], o = 0; o < r; o++) {
                var s = [],
                    c = [];
                s.push((o + r - 1) % r, o, (o + 1) % r), c.push(0, 1, 0);
                var l = No.getKeyframeOrder(s);
                s = No.sortedArray(s, 1, l), c = No.sortedArray(c, 1, l), i || 0 !== s[0] || (s.push(r), c.push(c[0])), a.push(new Vo(".morphTargetInfluences[" + e[o].name + "]", s, c).scale(1 / n))
            }
            return new Zo(t, -1, a)
        },
        findByName: function(t, e) {
            var n = t;
            if (!Array.isArray(t)) {
                var i = t;
                n = i.geometry && i.geometry.animations || i.animations
            }
            for (var r = 0; r < n.length; r++)
                if (n[r].name === e) return n[r];
            return null
        },
        CreateClipsFromMorphTargetSequences: function(t, e, n) {
            for (var i = {}, r = /^([\w-]*?)([\d]+)$/, a = 0, o = t.length; a < o; a++) {
                var s = t[a],
                    c = s.name.match(r);
                if (c && c.length > 1) {
                    var l = i[u = c[1]];
                    l || (i[u] = l = []), l.push(s)
                }
            }
            var h = [];
            for (var u in i) h.push(Zo.CreateFromMorphTargetSequence(u, i[u], e, n));
            return h
        },
        parseAnimation: function(t, e) {
            if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
            for (var n = function(t, e, n, i, r) {
                    if (0 !== n.length) {
                        var a = [],
                            o = [];
                        No.flattenJSON(n, a, o, i), 0 !== a.length && r.push(new t(e, a, o))
                    }
                }, i = [], r = t.name || "default", a = t.length || -1, o = t.fps || 30, s = t.hierarchy || [], c = 0; c < s.length; c++) {
                var l = s[c].keys;
                if (l && 0 !== l.length)
                    if (l[0].morphTargets) {
                        for (var h = {}, u = 0; u < l.length; u++)
                            if (l[u].morphTargets)
                                for (var p = 0; p < l[u].morphTargets.length; p++) h[l[u].morphTargets[p]] = -1;
                        for (var d in h) {
                            var f = [],
                                m = [];
                            for (p = 0; p !== l[u].morphTargets.length; ++p) {
                                var g = l[u];
                                f.push(g.time), m.push(g.morphTarget === d ? 1 : 0)
                            }
                            i.push(new Vo(".morphTargetInfluence[" + d + "]", f, m))
                        }
                        a = h.length * (o || 1)
                    } else {
                        var v = ".bones[" + e[c].name + "]";
                        n(qo, v + ".position", l, "pos", i), n(Yo, v + ".quaternion", l, "rot", i), n(qo, v + ".scale", l, "scl", i)
                    }
            }
            return 0 === i.length ? null : new Zo(r, a, i)
        }
    }), Object.assign(Zo.prototype, {
        resetDuration: function() {
            for (var t = 0, e = 0, n = this.tracks.length; e !== n; ++e) {
                var i = this.tracks[e];
                t = Math.max(t, i.times[i.times.length - 1])
            }
            return this.duration = t, this
        },
        trim: function() {
            for (var t = 0; t < this.tracks.length; t++) this.tracks[t].trim(0, this.duration);
            return this
        },
        validate: function() {
            for (var t = !0, e = 0; e < this.tracks.length; e++) t = t && this.tracks[e].validate();
            return t
        },
        optimize: function() {
            for (var t = 0; t < this.tracks.length; t++) this.tracks[t].optimize();
            return this
        }
    }), Object.assign(Jo.prototype, {
        load: function(t, e, n, i) {
            var r = this;
            new Ka(r.manager).load(t, function(t) {
                e(r.parse(JSON.parse(t)))
            }, n, i)
        },
        setTextures: function(t) {
            this.textures = t
        },
        parse: function(t) {
            var e = this.textures;

            function n(t) {
                return void 0 === e[t] && console.warn("THREE.MaterialLoader: Undefined texture", t), e[t]
            }
            var i = new Wa[t.type];
            if (void 0 !== t.uuid && (i.uuid = t.uuid), void 0 !== t.name && (i.name = t.name), void 0 !== t.color && i.color.setHex(t.color), void 0 !== t.roughness && (i.roughness = t.roughness), void 0 !== t.metalness && (i.metalness = t.metalness), void 0 !== t.emissive && i.emissive.setHex(t.emissive), void 0 !== t.specular && i.specular.setHex(t.specular), void 0 !== t.shininess && (i.shininess = t.shininess), void 0 !== t.clearCoat && (i.clearCoat = t.clearCoat), void 0 !== t.clearCoatRoughness && (i.clearCoatRoughness = t.clearCoatRoughness), void 0 !== t.uniforms && (i.uniforms = t.uniforms), void 0 !== t.vertexShader && (i.vertexShader = t.vertexShader), void 0 !== t.fragmentShader && (i.fragmentShader = t.fragmentShader), void 0 !== t.vertexColors && (i.vertexColors = t.vertexColors), void 0 !== t.fog && (i.fog = t.fog), void 0 !== t.flatShading && (i.flatShading = t.flatShading), void 0 !== t.blending && (i.blending = t.blending), void 0 !== t.side && (i.side = t.side), void 0 !== t.opacity && (i.opacity = t.opacity), void 0 !== t.transparent && (i.transparent = t.transparent), void 0 !== t.alphaTest && (i.alphaTest = t.alphaTest), void 0 !== t.depthTest && (i.depthTest = t.depthTest), void 0 !== t.depthWrite && (i.depthWrite = t.depthWrite), void 0 !== t.colorWrite && (i.colorWrite = t.colorWrite), void 0 !== t.wireframe && (i.wireframe = t.wireframe), void 0 !== t.wireframeLinewidth && (i.wireframeLinewidth = t.wireframeLinewidth), void 0 !== t.wireframeLinecap && (i.wireframeLinecap = t.wireframeLinecap), void 0 !== t.wireframeLinejoin && (i.wireframeLinejoin = t.wireframeLinejoin), void 0 !== t.rotation && (i.rotation = t.rotation), 1 !== t.linewidth && (i.linewidth = t.linewidth), void 0 !== t.dashSize && (i.dashSize = t.dashSize), void 0 !== t.gapSize && (i.gapSize = t.gapSize), void 0 !== t.scale && (i.scale = t.scale), void 0 !== t.polygonOffset && (i.polygonOffset = t.polygonOffset), void 0 !== t.polygonOffsetFactor && (i.polygonOffsetFactor = t.polygonOffsetFactor), void 0 !== t.polygonOffsetUnits && (i.polygonOffsetUnits = t.polygonOffsetUnits), void 0 !== t.skinning && (i.skinning = t.skinning), void 0 !== t.morphTargets && (i.morphTargets = t.morphTargets), void 0 !== t.dithering && (i.dithering = t.dithering), void 0 !== t.visible && (i.visible = t.visible), void 0 !== t.userData && (i.userData = t.userData), void 0 !== t.shading && (i.flatShading = 1 === t.shading), void 0 !== t.size && (i.size = t.size), void 0 !== t.sizeAttenuation && (i.sizeAttenuation = t.sizeAttenuation), void 0 !== t.map && (i.map = n(t.map)), void 0 !== t.alphaMap && (i.alphaMap = n(t.alphaMap), i.transparent = !0), void 0 !== t.bumpMap && (i.bumpMap = n(t.bumpMap)), void 0 !== t.bumpScale && (i.bumpScale = t.bumpScale), void 0 !== t.normalMap && (i.normalMap = n(t.normalMap)), void 0 !== t.normalMapType && (i.normalMapType = t.normalMapType), void 0 !== t.normalScale) {
                var r = t.normalScale;
                !1 === Array.isArray(r) && (r = [r, r]), i.normalScale = (new Ue).fromArray(r)
            }
            return void 0 !== t.displacementMap && (i.displacementMap = n(t.displacementMap)), void 0 !== t.displacementScale && (i.displacementScale = t.displacementScale), void 0 !== t.displacementBias && (i.displacementBias = t.displacementBias), void 0 !== t.roughnessMap && (i.roughnessMap = n(t.roughnessMap)), void 0 !== t.metalnessMap && (i.metalnessMap = n(t.metalnessMap)), void 0 !== t.emissiveMap && (i.emissiveMap = n(t.emissiveMap)), void 0 !== t.emissiveIntensity && (i.emissiveIntensity = t.emissiveIntensity), void 0 !== t.specularMap && (i.specularMap = n(t.specularMap)), void 0 !== t.envMap && (i.envMap = n(t.envMap)), void 0 !== t.reflectivity && (i.reflectivity = t.reflectivity), void 0 !== t.lightMap && (i.lightMap = n(t.lightMap)), void 0 !== t.lightMapIntensity && (i.lightMapIntensity = t.lightMapIntensity), void 0 !== t.aoMap && (i.aoMap = n(t.aoMap)), void 0 !== t.aoMapIntensity && (i.aoMapIntensity = t.aoMapIntensity), void 0 !== t.gradientMap && (i.gradientMap = n(t.gradientMap)), i
        }
    }), Object.assign(Qo.prototype, {
        load: function(t, e, n, i) {
            var r = this;
            new Ka(r.manager).load(t, function(t) {
                e(r.parse(JSON.parse(t)))
            }, n, i)
        },
        parse: function(t) {
            var e = new Pn,
                n = t.data.index;
            if (void 0 !== n) {
                var i = new $o[n.type](n.array);
                e.setIndex(new vn(i, 1))
            }
            var r = t.data.attributes;
            for (var a in r) {
                var o = r[a];
                i = new $o[o.type](o.array), e.addAttribute(a, new vn(i, o.itemSize, o.normalized))
            }
            var s = t.data.groups || t.data.drawcalls || t.data.offsets;
            if (void 0 !== s)
                for (var c = 0, l = s.length; c !== l; ++c) {
                    var h = s[c];
                    e.addGroup(h.start, h.count, h.materialIndex)
                }
            var u = t.data.boundingSphere;
            if (void 0 !== u) {
                var p = new He;
                void 0 !== u.center && p.fromArray(u.center), e.boundingSphere = new Je(p, u.radius)
            }
            return e
        }
    });
    var $o = {
        Int8Array: Int8Array,
        Uint8Array: Uint8Array,
        Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
        Int16Array: Int16Array,
        Uint16Array: Uint16Array,
        Int32Array: Int32Array,
        Uint32Array: Uint32Array,
        Float32Array: Float32Array,
        Float64Array: Float64Array
    };

    function ts() {}
    ts.Handlers = {
        handlers: [],
        add: function(t, e) {
            this.handlers.push(t, e)
        },
        get: function(t) {
            for (var e = this.handlers, n = 0, i = e.length; n < i; n += 2) {
                var r = e[n],
                    a = e[n + 1];
                if (r.test(t)) return a
            }
            return null
        }
    }, Object.assign(ts.prototype, {
        crossOrigin: "anonymous",
        onLoadStart: function() {},
        onLoadProgress: function() {},
        onLoadComplete: function() {},
        initMaterials: function(t, e, n) {
            for (var i = [], r = 0; r < t.length; ++r) i[r] = this.createMaterial(t[r], e, n);
            return i
        },
        createMaterial: function() {
            var t = {
                    NoBlending: _,
                    NormalBlending: S,
                    AdditiveBlending: E,
                    SubtractiveBlending: T,
                    MultiplyBlending: A,
                    CustomBlending: L
                },
                e = new rn,
                n = new eo,
                i = new Jo;
            return function(r, a, o) {
                var s = {};

                function c(t, e, i, r, c) {
                    var l, h = a + t,
                        u = ts.Handlers.get(h);
                    null !== u ? l = u.load(h) : (n.setCrossOrigin(o), l = n.load(h)), void 0 !== e && (l.repeat.fromArray(e), 1 !== e[0] && (l.wrapS = mt), 1 !== e[1] && (l.wrapT = mt)), void 0 !== i && l.offset.fromArray(i), void 0 !== r && ("repeat" === r[0] && (l.wrapS = mt), "mirror" === r[0] && (l.wrapS = vt), "repeat" === r[1] && (l.wrapT = mt), "mirror" === r[1] && (l.wrapT = vt)), void 0 !== c && (l.anisotropy = c);
                    var p = ke.generateUUID();
                    return s[p] = l, p
                }
                var l = {
                    uuid: ke.generateUUID(),
                    type: "MeshLambertMaterial"
                };
                for (var h in r) {
                    var u = r[h];
                    switch (h) {
                        case "DbgColor":
                        case "DbgIndex":
                        case "opticalDensity":
                        case "illumination":
                            break;
                        case "DbgName":
                            l.name = u;
                            break;
                        case "blending":
                            l.blending = t[u];
                            break;
                        case "colorAmbient":
                        case "mapAmbient":
                            console.warn("THREE.Loader.createMaterial:", h, "is no longer supported.");
                            break;
                        case "colorDiffuse":
                            l.color = e.fromArray(u).getHex();
                            break;
                        case "colorSpecular":
                            l.specular = e.fromArray(u).getHex();
                            break;
                        case "colorEmissive":
                            l.emissive = e.fromArray(u).getHex();
                            break;
                        case "specularCoef":
                            l.shininess = u;
                            break;
                        case "shading":
                            "basic" === u.toLowerCase() && (l.type = "MeshBasicMaterial"), "phong" === u.toLowerCase() && (l.type = "MeshPhongMaterial"), "standard" === u.toLowerCase() && (l.type = "MeshStandardMaterial");
                            break;
                        case "mapDiffuse":
                            l.map = c(u, r.mapDiffuseRepeat, r.mapDiffuseOffset, r.mapDiffuseWrap, r.mapDiffuseAnisotropy);
                            break;
                        case "mapDiffuseRepeat":
                        case "mapDiffuseOffset":
                        case "mapDiffuseWrap":
                        case "mapDiffuseAnisotropy":
                            break;
                        case "mapEmissive":
                            l.emissiveMap = c(u, r.mapEmissiveRepeat, r.mapEmissiveOffset, r.mapEmissiveWrap, r.mapEmissiveAnisotropy);
                            break;
                        case "mapEmissiveRepeat":
                        case "mapEmissiveOffset":
                        case "mapEmissiveWrap":
                        case "mapEmissiveAnisotropy":
                            break;
                        case "mapLight":
                            l.lightMap = c(u, r.mapLightRepeat, r.mapLightOffset, r.mapLightWrap, r.mapLightAnisotropy);
                            break;
                        case "mapLightRepeat":
                        case "mapLightOffset":
                        case "mapLightWrap":
                        case "mapLightAnisotropy":
                            break;
                        case "mapAO":
                            l.aoMap = c(u, r.mapAORepeat, r.mapAOOffset, r.mapAOWrap, r.mapAOAnisotropy);
                            break;
                        case "mapAORepeat":
                        case "mapAOOffset":
                        case "mapAOWrap":
                        case "mapAOAnisotropy":
                            break;
                        case "mapBump":
                            l.bumpMap = c(u, r.mapBumpRepeat, r.mapBumpOffset, r.mapBumpWrap, r.mapBumpAnisotropy);
                            break;
                        case "mapBumpScale":
                            l.bumpScale = u;
                            break;
                        case "mapBumpRepeat":
                        case "mapBumpOffset":
                        case "mapBumpWrap":
                        case "mapBumpAnisotropy":
                            break;
                        case "mapNormal":
                            l.normalMap = c(u, r.mapNormalRepeat, r.mapNormalOffset, r.mapNormalWrap, r.mapNormalAnisotropy);
                            break;
                        case "mapNormalFactor":
                            l.normalScale = u;
                            break;
                        case "mapNormalRepeat":
                        case "mapNormalOffset":
                        case "mapNormalWrap":
                        case "mapNormalAnisotropy":
                            break;
                        case "mapSpecular":
                            l.specularMap = c(u, r.mapSpecularRepeat, r.mapSpecularOffset, r.mapSpecularWrap, r.mapSpecularAnisotropy);
                            break;
                        case "mapSpecularRepeat":
                        case "mapSpecularOffset":
                        case "mapSpecularWrap":
                        case "mapSpecularAnisotropy":
                            break;
                        case "mapMetalness":
                            l.metalnessMap = c(u, r.mapMetalnessRepeat, r.mapMetalnessOffset, r.mapMetalnessWrap, r.mapMetalnessAnisotropy);
                            break;
                        case "mapMetalnessRepeat":
                        case "mapMetalnessOffset":
                        case "mapMetalnessWrap":
                        case "mapMetalnessAnisotropy":
                            break;
                        case "mapRoughness":
                            l.roughnessMap = c(u, r.mapRoughnessRepeat, r.mapRoughnessOffset, r.mapRoughnessWrap, r.mapRoughnessAnisotropy);
                            break;
                        case "mapRoughnessRepeat":
                        case "mapRoughnessOffset":
                        case "mapRoughnessWrap":
                        case "mapRoughnessAnisotropy":
                            break;
                        case "mapAlpha":
                            l.alphaMap = c(u, r.mapAlphaRepeat, r.mapAlphaOffset, r.mapAlphaWrap, r.mapAlphaAnisotropy);
                            break;
                        case "mapAlphaRepeat":
                        case "mapAlphaOffset":
                        case "mapAlphaWrap":
                        case "mapAlphaAnisotropy":
                            break;
                        case "flipSided":
                            l.side = g;
                            break;
                        case "doubleSided":
                            l.side = v;
                            break;
                        case "transparency":
                            console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"), l.opacity = u;
                            break;
                        case "depthTest":
                        case "depthWrite":
                        case "colorWrite":
                        case "opacity":
                        case "reflectivity":
                        case "transparent":
                        case "visible":
                        case "wireframe":
                            l[h] = u;
                            break;
                        case "vertexColors":
                            !0 === u && (l.vertexColors = M), "face" === u && (l.vertexColors = b);
                            break;
                        default:
                            console.error("THREE.Loader.createMaterial: Unsupported", h, u)
                    }
                }
                return "MeshBasicMaterial" === l.type && delete l.emissive, "MeshPhongMaterial" !== l.type && delete l.specular, l.opacity < 1 && (l.transparent = !0), i.setTextures(s), i.parse(l)
            }
        }()
    });
    var es = {
        decodeText: function(t) {
            if ("undefined" != typeof TextDecoder) return (new TextDecoder).decode(t);
            for (var e = "", n = 0, i = t.length; n < i; n++) e += String.fromCharCode(t[n]);
            return decodeURIComponent(escape(e))
        },
        extractUrlBase: function(t) {
            var e = t.lastIndexOf("/");
            return -1 === e ? "./" : t.substr(0, e + 1)
        }
    };

    function ns(t) {
        "boolean" == typeof t && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), t = void 0), this.manager = void 0 !== t ? t : qa, this.withCredentials = !1
    }

    function is(t) {
        this.manager = void 0 !== t ? t : qa, this.texturePath = ""
    }
    Object.assign(ns.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            var r = this,
                a = this.texturePath && "string" == typeof this.texturePath ? this.texturePath : es.extractUrlBase(t),
                o = new Ka(this.manager);
            o.setWithCredentials(this.withCredentials), o.load(t, function(n) {
                var i = JSON.parse(n),
                    o = i.metadata;
                if (void 0 !== o) {
                    var s = o.type;
                    if (void 0 !== s && "object" === s.toLowerCase()) return void console.error("THREE.JSONLoader: " + t + " should be loaded with THREE.ObjectLoader instead.")
                }
                var c = r.parse(i, a);
                e(c.geometry, c.materials)
            }, n, i)
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t, this
        },
        setTexturePath: function(t) {
            return this.texturePath = t, this
        },
        parse: function(t, e) {
            void 0 !== t.data && (t = t.data), void 0 !== t.scale ? t.scale = 1 / t.scale : t.scale = 1;
            var n = new gn;
            return function(t, e) {
                    function n(t, e) {
                        return t & 1 << e
                    }
                    var i, r, a, o, s, c, l, h, u, p, d, f, m, g, v, y, x, w, b, M, _, S, E, T, A, L = t.faces,
                        R = t.vertices,
                        P = t.normals,
                        C = t.colors,
                        I = t.scale,
                        O = 0;
                    if (void 0 !== t.uvs) {
                        for (i = 0; i < t.uvs.length; i++) t.uvs[i].length && O++;
                        for (i = 0; i < O; i++) e.faceVertexUvs[i] = []
                    }
                    for (o = 0, s = R.length; o < s;)(w = new He).x = R[o++] * I, w.y = R[o++] * I, w.z = R[o++] * I, e.vertices.push(w);
                    for (o = 0, s = L.length; o < s;)
                        if (d = n(p = L[o++], 0), f = n(p, 1), m = n(p, 3), g = n(p, 4), v = n(p, 5), y = n(p, 6), x = n(p, 7), d) {
                            if ((M = new fn).a = L[o], M.b = L[o + 1], M.c = L[o + 3], (_ = new fn).a = L[o + 1], _.b = L[o + 2], _.c = L[o + 3], o += 4, f && (u = L[o++], M.materialIndex = u, _.materialIndex = u), a = e.faces.length, m)
                                for (i = 0; i < O; i++)
                                    for (T = t.uvs[i], e.faceVertexUvs[i][a] = [], e.faceVertexUvs[i][a + 1] = [], r = 0; r < 4; r++) A = new Ue(T[2 * (h = L[o++])], T[2 * h + 1]), 2 !== r && e.faceVertexUvs[i][a].push(A), 0 !== r && e.faceVertexUvs[i][a + 1].push(A);
                            if (g && (l = 3 * L[o++], M.normal.set(P[l++], P[l++], P[l]), _.normal.copy(M.normal)), v)
                                for (i = 0; i < 4; i++) l = 3 * L[o++], E = new He(P[l++], P[l++], P[l]), 2 !== i && M.vertexNormals.push(E), 0 !== i && _.vertexNormals.push(E);
                            if (y && (S = C[c = L[o++]], M.color.setHex(S), _.color.setHex(S)), x)
                                for (i = 0; i < 4; i++) S = C[c = L[o++]], 2 !== i && M.vertexColors.push(new rn(S)), 0 !== i && _.vertexColors.push(new rn(S));
                            e.faces.push(M), e.faces.push(_)
                        } else {
                            if ((b = new fn).a = L[o++], b.b = L[o++], b.c = L[o++], f && (u = L[o++], b.materialIndex = u), a = e.faces.length, m)
                                for (i = 0; i < O; i++)
                                    for (T = t.uvs[i], e.faceVertexUvs[i][a] = [], r = 0; r < 3; r++) A = new Ue(T[2 * (h = L[o++])], T[2 * h + 1]), e.faceVertexUvs[i][a].push(A);
                            if (g && (l = 3 * L[o++], b.normal.set(P[l++], P[l++], P[l])), v)
                                for (i = 0; i < 3; i++) l = 3 * L[o++], E = new He(P[l++], P[l++], P[l]), b.vertexNormals.push(E);
                            if (y && (c = L[o++], b.color.setHex(C[c])), x)
                                for (i = 0; i < 3; i++) c = L[o++], b.vertexColors.push(new rn(C[c]));
                            e.faces.push(b)
                        }
                }(t, n),
                function(t, e) {
                    var n = void 0 !== t.influencesPerVertex ? t.influencesPerVertex : 2;
                    if (t.skinWeights)
                        for (var i = 0, r = t.skinWeights.length; i < r; i += n) {
                            var a = t.skinWeights[i],
                                o = n > 1 ? t.skinWeights[i + 1] : 0,
                                s = n > 2 ? t.skinWeights[i + 2] : 0,
                                c = n > 3 ? t.skinWeights[i + 3] : 0;
                            e.skinWeights.push(new Ye(a, o, s, c))
                        }
                    if (t.skinIndices)
                        for (i = 0, r = t.skinIndices.length; i < r; i += n) {
                            var l = t.skinIndices[i],
                                h = n > 1 ? t.skinIndices[i + 1] : 0,
                                u = n > 2 ? t.skinIndices[i + 2] : 0,
                                p = n > 3 ? t.skinIndices[i + 3] : 0;
                            e.skinIndices.push(new Ye(l, h, u, p))
                        }
                    e.bones = t.bones, e.bones && e.bones.length > 0 && (e.skinWeights.length !== e.skinIndices.length || e.skinIndices.length !== e.vertices.length) && console.warn("When skinning, number of vertices (" + e.vertices.length + "), skinIndices (" + e.skinIndices.length + "), and skinWeights (" + e.skinWeights.length + ") should match.")
                }(t, n),
                function(t, e) {
                    var n = t.scale;
                    if (void 0 !== t.morphTargets)
                        for (var i = 0, r = t.morphTargets.length; i < r; i++) {
                            e.morphTargets[i] = {}, e.morphTargets[i].name = t.morphTargets[i].name, e.morphTargets[i].vertices = [];
                            for (var a = e.morphTargets[i].vertices, o = t.morphTargets[i].vertices, s = 0, c = o.length; s < c; s += 3) {
                                var l = new He;
                                l.x = o[s] * n, l.y = o[s + 1] * n, l.z = o[s + 2] * n, a.push(l)
                            }
                        }
                    if (void 0 !== t.morphColors && t.morphColors.length > 0) {
                        console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');
                        var h = e.faces,
                            u = t.morphColors[0].colors;
                        for (i = 0, r = h.length; i < r; i++) h[i].color.fromArray(u, 3 * i)
                    }
                }(t, n),
                function(t, e) {
                    var n = [],
                        i = [];
                    void 0 !== t.animation && i.push(t.animation), void 0 !== t.animations && (t.animations.length ? i = i.concat(t.animations) : i.push(t.animations));
                    for (var r = 0; r < i.length; r++) {
                        var a = Zo.parseAnimation(i[r], e.bones);
                        a && n.push(a)
                    }
                    if (e.morphTargets) {
                        var o = Zo.CreateClipsFromMorphTargetSequences(e.morphTargets, 10);
                        n = n.concat(o)
                    }
                    n.length > 0 && (e.animations = n)
                }(t, n), n.computeFaceNormals(), n.computeBoundingSphere(), void 0 === t.materials || 0 === t.materials.length ? {
                    geometry: n
                } : {
                    geometry: n,
                    materials: ts.prototype.initMaterials(t.materials, e, this.crossOrigin)
                }
        }
    }), Object.assign(is.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            "" === this.texturePath && (this.texturePath = t.substring(0, t.lastIndexOf("/") + 1));
            var r = this;
            new Ka(r.manager).load(t, function(n) {
                var a = null;
                try {
                    a = JSON.parse(n)
                } catch (e) {
                    return void 0 !== i && i(e), void console.error("THREE:ObjectLoader: Can't parse " + t + ".", e.message)
                }
                var o = a.metadata;
                void 0 !== o && void 0 !== o.type && "geometry" !== o.type.toLowerCase() ? r.parse(a, e) : console.error("THREE.ObjectLoader: Can't load " + t + ". Use THREE.JSONLoader instead.")
            }, n, i)
        },
        setTexturePath: function(t) {
            return this.texturePath = t, this
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t, this
        },
        parse: function(t, e) {
            var n = this.parseShape(t.shapes),
                i = this.parseGeometries(t.geometries, n),
                r = this.parseImages(t.images, function() {
                    void 0 !== e && e(s)
                }),
                a = this.parseTextures(t.textures, r),
                o = this.parseMaterials(t.materials, a),
                s = this.parseObject(t.object, i, o);
            return t.animations && (s.animations = this.parseAnimations(t.animations)), void 0 !== t.images && 0 !== t.images.length || void 0 !== e && e(s), s
        },
        parseShape: function(t) {
            var e = {};
            if (void 0 !== t)
                for (var n = 0, i = t.length; n < i; n++) {
                    var r = (new Eo).fromJSON(t[n]);
                    e[r.uuid] = r
                }
            return e
        },
        parseGeometries: function(t, e) {
            var n = {};
            if (void 0 !== t)
                for (var i = new ns, r = new Qo, a = 0, o = t.length; a < o; a++) {
                    var s, c = t[a];
                    switch (c.type) {
                        case "PlaneGeometry":
                        case "PlaneBufferGeometry":
                            s = new Ba[c.type](c.width, c.height, c.widthSegments, c.heightSegments);
                            break;
                        case "BoxGeometry":
                        case "BoxBufferGeometry":
                        case "CubeGeometry":
                            s = new Ba[c.type](c.width, c.height, c.depth, c.widthSegments, c.heightSegments, c.depthSegments);
                            break;
                        case "CircleGeometry":
                        case "CircleBufferGeometry":
                            s = new Ba[c.type](c.radius, c.segments, c.thetaStart, c.thetaLength);
                            break;
                        case "CylinderGeometry":
                        case "CylinderBufferGeometry":
                            s = new Ba[c.type](c.radiusTop, c.radiusBottom, c.height, c.radialSegments, c.heightSegments, c.openEnded, c.thetaStart, c.thetaLength);
                            break;
                        case "ConeGeometry":
                        case "ConeBufferGeometry":
                            s = new Ba[c.type](c.radius, c.height, c.radialSegments, c.heightSegments, c.openEnded, c.thetaStart, c.thetaLength);
                            break;
                        case "SphereGeometry":
                        case "SphereBufferGeometry":
                            s = new Ba[c.type](c.radius, c.widthSegments, c.heightSegments, c.phiStart, c.phiLength, c.thetaStart, c.thetaLength);
                            break;
                        case "DodecahedronGeometry":
                        case "DodecahedronBufferGeometry":
                        case "IcosahedronGeometry":
                        case "IcosahedronBufferGeometry":
                        case "OctahedronGeometry":
                        case "OctahedronBufferGeometry":
                        case "TetrahedronGeometry":
                        case "TetrahedronBufferGeometry":
                            s = new Ba[c.type](c.radius, c.detail);
                            break;
                        case "RingGeometry":
                        case "RingBufferGeometry":
                            s = new Ba[c.type](c.innerRadius, c.outerRadius, c.thetaSegments, c.phiSegments, c.thetaStart, c.thetaLength);
                            break;
                        case "TorusGeometry":
                        case "TorusBufferGeometry":
                            s = new Ba[c.type](c.radius, c.tube, c.radialSegments, c.tubularSegments, c.arc);
                            break;
                        case "TorusKnotGeometry":
                        case "TorusKnotBufferGeometry":
                            s = new Ba[c.type](c.radius, c.tube, c.tubularSegments, c.radialSegments, c.p, c.q);
                            break;
                        case "LatheGeometry":
                        case "LatheBufferGeometry":
                            s = new Ba[c.type](c.points, c.segments, c.phiStart, c.phiLength);
                            break;
                        case "PolyhedronGeometry":
                        case "PolyhedronBufferGeometry":
                            s = new Ba[c.type](c.vertices, c.indices, c.radius, c.details);
                            break;
                        case "ShapeGeometry":
                        case "ShapeBufferGeometry":
                            for (var l = [], h = 0, u = c.shapes.length; h < u; h++) {
                                var p = e[c.shapes[h]];
                                l.push(p)
                            }
                            s = new Ba[c.type](l, c.curveSegments);
                            break;
                        case "ExtrudeGeometry":
                        case "ExtrudeBufferGeometry":
                            for (l = [], h = 0, u = c.shapes.length; h < u; h++) p = e[c.shapes[h]], l.push(p);
                            var d = c.options.extrudePath;
                            void 0 !== d && (c.options.extrudePath = (new Mo[d.type]).fromJSON(d)), s = new Ba[c.type](l, c.options);
                            break;
                        case "BufferGeometry":
                            s = r.parse(c);
                            break;
                        case "Geometry":
                            s = i.parse(c, this.texturePath).geometry;
                            break;
                        default:
                            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + c.type + '"');
                            continue
                    }
                    s.uuid = c.uuid, void 0 !== c.name && (s.name = c.name), !0 === s.isBufferGeometry && void 0 !== c.userData && (s.userData = c.userData), n[c.uuid] = s
                }
            return n
        },
        parseMaterials: function(t, e) {
            var n = {};
            if (void 0 !== t) {
                var i = new Jo;
                i.setTextures(e);
                for (var r = 0, a = t.length; r < a; r++) {
                    var o = t[r];
                    if ("MultiMaterial" === o.type) {
                        for (var s = [], c = 0; c < o.materials.length; c++) s.push(i.parse(o.materials[c]));
                        n[o.uuid] = s
                    } else n[o.uuid] = i.parse(o)
                }
            }
            return n
        },
        parseAnimations: function(t) {
            for (var e = [], n = 0; n < t.length; n++) {
                var i = t[n],
                    r = Zo.parse(i);
                void 0 !== i.uuid && (r.uuid = i.uuid), e.push(r)
            }
            return e
        },
        parseImages: function(t, e) {
            var n = this,
                i = {};

            function r(t) {
                return n.manager.itemStart(t), a.load(t, function() {
                    n.manager.itemEnd(t)
                }, void 0, function() {
                    n.manager.itemEnd(t), n.manager.itemError(t)
                })
            }
            if (void 0 !== t && t.length > 0) {
                var a = new $a(new Xa(e));
                a.setCrossOrigin(this.crossOrigin);
                for (var o = 0, s = t.length; o < s; o++) {
                    var c = t[o],
                        l = c.url;
                    if (Array.isArray(l)) {
                        i[c.uuid] = [];
                        for (var h = 0, u = l.length; h < u; h++) {
                            var p = l[h],
                                d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(p) ? p : n.texturePath + p;
                            i[c.uuid].push(r(d))
                        }
                    } else d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url) ? c.url : n.texturePath + c.url, i[c.uuid] = r(d)
                }
            }
            return i
        },
        parseTextures: function(t, e) {
            function n(t, e) {
                return "number" == typeof t ? t : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t), e[t])
            }
            var i = {};
            if (void 0 !== t)
                for (var r = 0, a = t.length; r < a; r++) {
                    var o, s = t[r];
                    void 0 === s.image && console.warn('THREE.ObjectLoader: No "image" specified for', s.uuid), void 0 === e[s.image] && console.warn("THREE.ObjectLoader: Undefined image", s.image), (o = Array.isArray(e[s.image]) ? new jn(e[s.image]) : new We(e[s.image])).needsUpdate = !0, o.uuid = s.uuid, void 0 !== s.name && (o.name = s.name), void 0 !== s.mapping && (o.mapping = n(s.mapping, as)), void 0 !== s.offset && o.offset.fromArray(s.offset), void 0 !== s.repeat && o.repeat.fromArray(s.repeat), void 0 !== s.center && o.center.fromArray(s.center), void 0 !== s.rotation && (o.rotation = s.rotation), void 0 !== s.wrap && (o.wrapS = n(s.wrap[0], os), o.wrapT = n(s.wrap[1], os)), void 0 !== s.format && (o.format = s.format), void 0 !== s.minFilter && (o.minFilter = n(s.minFilter, ss)), void 0 !== s.magFilter && (o.magFilter = n(s.magFilter, ss)), void 0 !== s.anisotropy && (o.anisotropy = s.anisotropy), void 0 !== s.flipY && (o.flipY = s.flipY), i[s.uuid] = o
                }
            return i
        },
        parseObject: function(t, e, n) {
            var i;

            function r(t) {
                return void 0 === e[t] && console.warn("THREE.ObjectLoader: Undefined geometry", t), e[t]
            }

            function a(t) {
                if (void 0 !== t) {
                    if (Array.isArray(t)) {
                        for (var e = [], i = 0, r = t.length; i < r; i++) {
                            var a = t[i];
                            void 0 === n[a] && console.warn("THREE.ObjectLoader: Undefined material", a), e.push(n[a])
                        }
                        return e
                    }
                    return void 0 === n[t] && console.warn("THREE.ObjectLoader: Undefined material", t), n[t]
                }
            }
            switch (t.type) {
                case "Scene":
                    i = new ar, void 0 !== t.background && Number.isInteger(t.background) && (i.background = new rn(t.background)), void 0 !== t.fog && ("Fog" === t.fog.type ? i.fog = new rr(t.fog.color, t.fog.near, t.fog.far) : "FogExp2" === t.fog.type && (i.fog = new ir(t.fog.color, t.fog.density)));
                    break;
                case "PerspectiveCamera":
                    i = new $i(t.fov, t.aspect, t.near, t.far), void 0 !== t.focus && (i.focus = t.focus), void 0 !== t.zoom && (i.zoom = t.zoom), void 0 !== t.filmGauge && (i.filmGauge = t.filmGauge), void 0 !== t.filmOffset && (i.filmOffset = t.filmOffset), void 0 !== t.view && (i.view = Object.assign({}, t.view));
                    break;
                case "OrthographicCamera":
                    i = new dn(t.left, t.right, t.top, t.bottom, t.near, t.far), void 0 !== t.zoom && (i.zoom = t.zoom), void 0 !== t.view && (i.view = Object.assign({}, t.view));
                    break;
                case "AmbientLight":
                    i = new Do(t.color, t.intensity);
                    break;
                case "DirectionalLight":
                    i = new Oo(t.color, t.intensity);
                    break;
                case "PointLight":
                    i = new Co(t.color, t.intensity, t.distance, t.decay);
                    break;
                case "RectAreaLight":
                    i = new Bo(t.color, t.intensity, t.width, t.height);
                    break;
                case "SpotLight":
                    i = new Po(t.color, t.intensity, t.distance, t.angle, t.penumbra, t.decay);
                    break;
                case "HemisphereLight":
                    i = new Ao(t.color, t.groundColor, t.intensity);
                    break;
                case "SkinnedMesh":
                    console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                case "Mesh":
                    var o = r(t.geometry),
                        s = a(t.material);
                    i = o.bones && o.bones.length > 0 ? new dr(o, s) : new Hn(o, s);
                    break;
                case "LOD":
                    i = new hr;
                    break;
                case "Line":
                    i = new mr(r(t.geometry), a(t.material), t.mode);
                    break;
                case "LineLoop":
                    i = new vr(r(t.geometry), a(t.material));
                    break;
                case "LineSegments":
                    i = new gr(r(t.geometry), a(t.material));
                    break;
                case "PointCloud":
                case "Points":
                    i = new xr(r(t.geometry), a(t.material));
                    break;
                case "Sprite":
                    i = new lr(a(t.material));
                    break;
                case "Group":
                    i = new Qi;
                    break;
                default:
                    i = new un
            }
            if (i.uuid = t.uuid, void 0 !== t.name && (i.name = t.name), void 0 !== t.matrix ? (i.matrix.fromArray(t.matrix), void 0 !== t.matrixAutoUpdate && (i.matrixAutoUpdate = t.matrixAutoUpdate), i.matrixAutoUpdate && i.matrix.decompose(i.position, i.quaternion, i.scale)) : (void 0 !== t.position && i.position.fromArray(t.position), void 0 !== t.rotation && i.rotation.fromArray(t.rotation), void 0 !== t.quaternion && i.quaternion.fromArray(t.quaternion), void 0 !== t.scale && i.scale.fromArray(t.scale)), void 0 !== t.castShadow && (i.castShadow = t.castShadow), void 0 !== t.receiveShadow && (i.receiveShadow = t.receiveShadow), t.shadow && (void 0 !== t.shadow.bias && (i.shadow.bias = t.shadow.bias), void 0 !== t.shadow.radius && (i.shadow.radius = t.shadow.radius), void 0 !== t.shadow.mapSize && i.shadow.mapSize.fromArray(t.shadow.mapSize), void 0 !== t.shadow.camera && (i.shadow.camera = this.parseObject(t.shadow.camera))), void 0 !== t.visible && (i.visible = t.visible), void 0 !== t.frustumCulled && (i.frustumCulled = t.frustumCulled), void 0 !== t.renderOrder && (i.renderOrder = t.renderOrder), void 0 !== t.userData && (i.userData = t.userData), void 0 !== t.layers && (i.layers.mask = t.layers), void 0 !== t.children)
                for (var c = t.children, l = 0; l < c.length; l++) i.add(this.parseObject(c[l], e, n));
            if ("LOD" === t.type)
                for (var h = t.levels, u = 0; u < h.length; u++) {
                    var p = h[u],
                        d = i.getObjectByProperty("uuid", p.object);
                    void 0 !== d && i.addLevel(d, p.distance)
                }
            return i
        }
    });
    var rs, as = {
            UVMapping: st,
            CubeReflectionMapping: ct,
            CubeRefractionMapping: lt,
            EquirectangularReflectionMapping: ht,
            EquirectangularRefractionMapping: ut,
            SphericalReflectionMapping: pt,
            CubeUVReflectionMapping: dt,
            CubeUVRefractionMapping: ft
        },
        os = {
            RepeatWrapping: mt,
            ClampToEdgeWrapping: gt,
            MirroredRepeatWrapping: vt
        },
        ss = {
            NearestFilter: yt,
            NearestMipMapNearestFilter: xt,
            NearestMipMapLinearFilter: wt,
            LinearFilter: bt,
            LinearMipMapNearestFilter: Mt,
            LinearMipMapLinearFilter: _t
        };

    function cs(t) {
        "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.manager = void 0 !== t ? t : qa, this.options = void 0
    }

    function ls() {
        this.type = "ShapePath", this.color = new rn, this.subPaths = [], this.currentPath = null
    }

    function hs(t) {
        this.type = "Font", this.data = t
    }

    function us(t, e, n, i, r) {
        var a = r.glyphs[t] || r.glyphs["?"];
        if (a) {
            var o, s, c, l, h, u, p, d, f = new ls;
            if (a.o)
                for (var m = a._cachedOutline || (a._cachedOutline = a.o.split(" ")), g = 0, v = m.length; g < v;) switch (m[g++]) {
                    case "m":
                        o = m[g++] * e + n, s = m[g++] * e + i, f.moveTo(o, s);
                        break;
                    case "l":
                        o = m[g++] * e + n, s = m[g++] * e + i, f.lineTo(o, s);
                        break;
                    case "q":
                        c = m[g++] * e + n, l = m[g++] * e + i, h = m[g++] * e + n, u = m[g++] * e + i, f.quadraticCurveTo(h, u, c, l);
                        break;
                    case "b":
                        c = m[g++] * e + n, l = m[g++] * e + i, h = m[g++] * e + n, u = m[g++] * e + i, p = m[g++] * e + n, d = m[g++] * e + i, f.bezierCurveTo(h, u, p, d, c, l)
                }
            return {
                offsetX: a.ha * e,
                path: f
            }
        }
    }

    function ps(t) {
        this.manager = void 0 !== t ? t : qa
    }
    cs.prototype = {
        constructor: cs,
        setOptions: function(t) {
            return this.options = t, this
        },
        load: function(t, e, n, i) {
            void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t);
            var r = this,
                a = Ya.get(t);
            if (void 0 !== a) return r.manager.itemStart(t), setTimeout(function() {
                e && e(a), r.manager.itemEnd(t)
            }, 0), a;
            fetch(t).then(function(t) {
                return t.blob()
            }).then(function(t) {
                return createImageBitmap(t, r.options)
            }).then(function(n) {
                Ya.add(t, n), e && e(n), r.manager.itemEnd(t)
            }).catch(function(e) {
                i && i(e), r.manager.itemEnd(t), r.manager.itemError(t)
            })
        },
        setCrossOrigin: function() {
            return this
        },
        setPath: function(t) {
            return this.path = t, this
        }
    }, Object.assign(ls.prototype, {
        moveTo: function(t, e) {
            this.currentPath = new So, this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e)
        },
        lineTo: function(t, e) {
            this.currentPath.lineTo(t, e)
        },
        quadraticCurveTo: function(t, e, n, i) {
            this.currentPath.quadraticCurveTo(t, e, n, i)
        },
        bezierCurveTo: function(t, e, n, i, r, a) {
            this.currentPath.bezierCurveTo(t, e, n, i, r, a)
        },
        splineThru: function(t) {
            this.currentPath.splineThru(t)
        },
        toShapes: function(t, e) {
            function n(t) {
                for (var e = [], n = 0, i = t.length; n < i; n++) {
                    var r = t[n],
                        a = new Eo;
                    a.curves = r.curves, e.push(a)
                }
                return e
            }

            function i(t, e) {
                for (var n = e.length, i = !1, r = n - 1, a = 0; a < n; r = a++) {
                    var o = e[r],
                        s = e[a],
                        c = s.x - o.x,
                        l = s.y - o.y;
                    if (Math.abs(l) > Number.EPSILON) {
                        if (l < 0 && (o = e[a], c = -c, s = e[r], l = -l), t.y < o.y || t.y > s.y) continue;
                        if (t.y === o.y) {
                            if (t.x === o.x) return !0
                        } else {
                            var h = l * (t.x - o.x) - c * (t.y - o.y);
                            if (0 === h) return !0;
                            if (h < 0) continue;
                            i = !i
                        }
                    } else {
                        if (t.y !== o.y) continue;
                        if (s.x <= t.x && t.x <= o.x || o.x <= t.x && t.x <= s.x) return !0
                    }
                }
                return i
            }
            var r = ha.isClockWise,
                a = this.subPaths;
            if (0 === a.length) return [];
            if (!0 === e) return n(a);
            var o, s, c, l = [];
            if (1 === a.length) return s = a[0], (c = new Eo).curves = s.curves, l.push(c), l;
            var h = !r(a[0].getPoints());
            h = t ? !h : h;
            var u, p, d = [],
                f = [],
                m = [],
                g = 0;
            f[g] = void 0, m[g] = [];
            for (var v = 0, y = a.length; v < y; v++) o = r(u = (s = a[v]).getPoints()), (o = t ? !o : o) ? (!h && f[g] && g++, f[g] = {
                s: new Eo,
                p: u
            }, f[g].s.curves = s.curves, h && g++, m[g] = []) : m[g].push({
                h: s,
                p: u[0]
            });
            if (!f[0]) return n(a);
            if (f.length > 1) {
                for (var x = !1, w = [], b = 0, M = f.length; b < M; b++) d[b] = [];
                for (b = 0, M = f.length; b < M; b++)
                    for (var _ = m[b], S = 0; S < _.length; S++) {
                        for (var E = _[S], T = !0, A = 0; A < f.length; A++) i(E.p, f[A].p) && (b !== A && w.push({
                            froms: b,
                            tos: A,
                            hole: S
                        }), T ? (T = !1, d[A].push(E)) : x = !0);
                        T && d[b].push(E)
                    }
                w.length > 0 && (x || (m = d))
            }
            v = 0;
            for (var L = f.length; v < L; v++) {
                c = f[v].s, l.push(c);
                for (var R = 0, P = (p = m[v]).length; R < P; R++) c.holes.push(p[R].h)
            }
            return l
        }
    }), Object.assign(hs.prototype, {
        isFont: !0,
        generateShapes: function(t, e) {
            void 0 === e && (e = 100);
            for (var n = [], i = function(t, e, n) {
                    for (var i = Array.from ? Array.from(t) : String(t).split(""), r = e / n.resolution, a = (n.boundingBox.yMax - n.boundingBox.yMin + n.underlineThickness) * r, o = [], s = 0, c = 0, l = 0; l < i.length; l++) {
                        var h = i[l];
                        if ("\n" === h) s = 0, c -= a;
                        else {
                            var u = us(h, r, s, c, n);
                            s += u.offsetX, o.push(u.path)
                        }
                    }
                    return o
                }(t, e, this.data), r = 0, a = i.length; r < a; r++) Array.prototype.push.apply(n, i[r].toShapes());
            return n
        }
    }), Object.assign(ps.prototype, {
        load: function(t, e, n, i) {
            var r = this,
                a = new Ka(this.manager);
            a.setPath(this.path), a.load(t, function(t) {
                var n;
                try {
                    n = JSON.parse(t)
                } catch (e) {
                    console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), n = JSON.parse(t.substring(65, t.length - 2))
                }
                var i = r.parse(n);
                e && e(i)
            }, n, i)
        },
        parse: function(t) {
            return new hs(t)
        },
        setPath: function(t) {
            return this.path = t, this
        }
    });
    var ds, fs, ms = {
        getContext: function() {
            return void 0 === rs && (rs = new(window.AudioContext || window.webkitAudioContext)), rs
        },
        setContext: function(t) {
            rs = t
        }
    };

    function gs(t) {
        this.manager = void 0 !== t ? t : qa
    }

    function vs() {
        this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new $i, this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new $i, this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1
    }

    function ys(t, e, n) {
        un.call(this), this.type = "CubeCamera";
        var i = new $i(90, 1, t, e);
        i.up.set(0, -1, 0), i.lookAt(new He(1, 0, 0)), this.add(i);
        var r = new $i(90, 1, t, e);
        r.up.set(0, -1, 0), r.lookAt(new He(-1, 0, 0)), this.add(r);
        var a = new $i(90, 1, t, e);
        a.up.set(0, 0, 1), a.lookAt(new He(0, 1, 0)), this.add(a);
        var o = new $i(90, 1, t, e);
        o.up.set(0, 0, -1), o.lookAt(new He(0, -1, 0)), this.add(o);
        var s = new $i(90, 1, t, e);
        s.up.set(0, -1, 0), s.lookAt(new He(0, 0, 1)), this.add(s);
        var c = new $i(90, 1, t, e);
        c.up.set(0, -1, 0), c.lookAt(new He(0, 0, -1)), this.add(c);
        var l = {
            format: kt,
            magFilter: bt,
            minFilter: bt
        };
        this.renderTarget = new qe(n, n, l), this.renderTarget.texture.name = "CubeCamera", this.update = function(t, e) {
            null === this.parent && this.updateMatrixWorld();
            var n = this.renderTarget,
                l = n.texture.generateMipmaps;
            n.texture.generateMipmaps = !1, n.activeCubeFace = 0, t.render(e, i, n), n.activeCubeFace = 1, t.render(e, r, n), n.activeCubeFace = 2, t.render(e, a, n), n.activeCubeFace = 3, t.render(e, o, n), n.activeCubeFace = 4, t.render(e, s, n), n.texture.generateMipmaps = l, n.activeCubeFace = 5, t.render(e, c, n), t.setRenderTarget(null)
        }, this.clear = function(t, e, n, i) {
            for (var r = this.renderTarget, a = 0; a < 6; a++) r.activeCubeFace = a, t.setRenderTarget(r), t.clear(e, n, i);
            t.setRenderTarget(null)
        }
    }

    function xs() {
        un.call(this), this.type = "AudioListener", this.context = ms.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null
    }

    function ws(t) {
        un.call(this), this.type = "Audio", this.context = t.context, this.gain = this.context.createGain(), this.gain.connect(t.getInput()), this.autoplay = !1, this.buffer = null, this.loop = !1, this.startTime = 0, this.offset = 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.sourceType = "empty", this.filters = []
    }

    function bs(t) {
        ws.call(this, t), this.panner = this.context.createPanner(), this.panner.connect(this.gain)
    }

    function Ms(t, e) {
        this.analyser = t.context.createAnalyser(), this.analyser.fftSize = void 0 !== e ? e : 2048, this.data = new Uint8Array(this.analyser.frequencyBinCount), t.getOutput().connect(this.analyser)
    }

    function _s(t, e, n) {
        this.binding = t, this.valueSize = n;
        var i, r = Float64Array;
        switch (e) {
            case "quaternion":
                i = this._slerp;
                break;
            case "string":
            case "bool":
                r = Array, i = this._select;
                break;
            default:
                i = this._lerp
        }
        this.buffer = new r(4 * n), this._mixBufferRegion = i, this.cumulativeWeight = 0, this.useCount = 0, this.referenceCount = 0
    }

    function Ss(t, e, n) {
        var i = n || Es.parseTrackName(e);
        this._targetGroup = t, this._bindings = t.subscribe_(e, i)
    }

    function Es(t, e, n) {
        this.path = e, this.parsedPath = n || Es.parseTrackName(e), this.node = Es.findNode(t, this.parsedPath.nodeName) || t, this.rootNode = t
    }

    function Ts() {
        this.uuid = ke.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        var t = {};
        this._indicesByUUID = t;
        for (var e = 0, n = arguments.length; e !== n; ++e) t[arguments[e].uuid] = e;
        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        var i = this;
        this.stats = {
            objects: {
                get total() {
                    return i._objects.length
                },
                get inUse() {
                    return this.total - i.nCachedObjects_
                }
            },
            get bindingsPerObject() {
                return i._bindings.length
            }
        }
    }

    function As(t, e, n) {
        this._mixer = t, this._clip = e, this._localRoot = n || null;
        for (var i = e.tracks, r = i.length, a = new Array(r), o = {
                endingStart: xe,
                endingEnd: xe
            }, s = 0; s !== r; ++s) {
            var c = i[s].createInterpolant(null);
            a[s] = c, c.settings = o
        }
        this._interpolantSettings = o, this._interpolants = a, this._propertyBindings = new Array(r), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = fe, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0
    }

    function Ls(t) {
        this._root = t, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1
    }

    function Rs(t) {
        "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."), t = arguments[1]), this.value = t
    }

    function Ps() {
        Pn.call(this), this.type = "InstancedBufferGeometry", this.maxInstancedCount = void 0
    }

    function Cs(t, e, n) {
        or.call(this, t, e), this.meshPerAttribute = n || 1
    }

    function Is(t, e, n) {
        vn.call(this, t, e), this.meshPerAttribute = n || 1
    }

    function Os(t, e, n, i) {
        this.ray = new zn(t, e), this.near = n || 0, this.far = i || 1 / 0, this.params = {
            Mesh: {},
            Line: {},
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        }, Object.defineProperties(this.params, {
            PointCloud: {
                get: function() {
                    return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points
                }
            }
        })
    }

    function Ds(t, e) {
        return t.distance - e.distance
    }

    function Bs(t, e, n, i) {
        if (!1 !== t.visible && (t.raycast(e, n), !0 === i))
            for (var r = t.children, a = 0, o = r.length; a < o; a++) Bs(r[a], e, n, !0)
    }

    function Ns(t) {
        this.autoStart = void 0 === t || t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1
    }

    function ks(t, e, n) {
        return this.radius = void 0 !== t ? t : 1, this.phi = void 0 !== e ? e : 0, this.theta = void 0 !== n ? n : 0, this
    }

    function Us(t, e, n) {
        return this.radius = void 0 !== t ? t : 1, this.theta = void 0 !== e ? e : 0, this.y = void 0 !== n ? n : 0, this
    }

    function zs(t, e) {
        this.min = void 0 !== t ? t : new Ue(1 / 0, 1 / 0), this.max = void 0 !== e ? e : new Ue(-1 / 0, -1 / 0)
    }

    function Fs(t, e) {
        this.start = void 0 !== t ? t : new He, this.end = void 0 !== e ? e : new He
    }

    function Hs(t) {
        un.call(this), this.material = t, this.render = function() {}
    }

    function Gs(t, e, n, i) {
        this.object = t, this.size = void 0 !== e ? e : 1;
        var r = void 0 !== n ? n : 16711680,
            a = void 0 !== i ? i : 1,
            o = 0,
            s = this.object.geometry;
        s && s.isGeometry ? o = 3 * s.faces.length : s && s.isBufferGeometry && (o = s.attributes.normal.count);
        var c = new Pn,
            l = new En(2 * o * 3, 3);
        c.addAttribute("position", l), gr.call(this, c, new fr({
            color: r,
            linewidth: a
        })), this.matrixAutoUpdate = !1, this.update()
    }

    function js(t, e) {
        un.call(this), this.light = t, this.light.updateMatrixWorld(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = e;
        for (var n = new Pn, i = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], r = 0, a = 1; r < 32; r++, a++) {
            var o = r / 32 * Math.PI * 2,
                s = a / 32 * Math.PI * 2;
            i.push(Math.cos(o), Math.sin(o), 1, Math.cos(s), Math.sin(s), 1)
        }
        n.addAttribute("position", new En(i, 3));
        var c = new fr({
            fog: !1
        });
        this.cone = new gr(n, c), this.add(this.cone), this.update()
    }

    function Vs(t) {
        for (var e = function t(e) {
                var n = [];
                e && e.isBone && n.push(e);
                for (var i = 0; i < e.children.length; i++) n.push.apply(n, t(e.children[i]));
                return n
            }(t), n = new Pn, i = [], r = [], a = new rn(0, 0, 1), o = new rn(0, 1, 0), s = 0; s < e.length; s++) {
            var c = e[s];
            c.parent && c.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(a.r, a.g, a.b), r.push(o.r, o.g, o.b))
        }
        n.addAttribute("position", new En(i, 3)), n.addAttribute("color", new En(r, 3));
        var l = new fr({
            vertexColors: M,
            depthTest: !1,
            depthWrite: !1,
            transparent: !0
        });
        gr.call(this, n, l), this.root = t, this.bones = e, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1
    }

    function Ws(t, e, n) {
        this.light = t, this.light.updateMatrixWorld(), this.color = n;
        var i = new wa(e, 4, 2),
            r = new kn({
                wireframe: !0,
                fog: !1
            });
        Hn.call(this, i, r), this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update()
    }

    function Ys(t, e) {
        un.call(this), this.light = t, this.light.updateMatrixWorld(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = e;
        var n = new fr({
                fog: !1
            }),
            i = new Pn;
        i.addAttribute("position", new vn(new Float32Array(15), 3)), this.line = new mr(i, n), this.add(this.line), this.update()
    }

    function Xs(t, e, n) {
        un.call(this), this.light = t, this.light.updateMatrixWorld(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = n;
        var i = new Ir(e);
        i.rotateY(.5 * Math.PI), this.material = new kn({
            wireframe: !0,
            fog: !1
        }), void 0 === this.color && (this.material.vertexColors = M);
        var r = i.getAttribute("position"),
            a = new Float32Array(3 * r.count);
        i.addAttribute("color", new vn(a, 3)), this.add(new Hn(i, this.material)), this.update()
    }

    function qs(t, e, n, i) {
        t = t || 10, e = e || 10, n = new rn(void 0 !== n ? n : 4473924), i = new rn(void 0 !== i ? i : 8947848);
        for (var r = e / 2, a = t / e, o = t / 2, s = [], c = [], l = 0, h = 0, u = -o; l <= e; l++, u += a) {
            s.push(-o, 0, u, o, 0, u), s.push(u, 0, -o, u, 0, o);
            var p = l === r ? n : i;
            p.toArray(c, h), h += 3, p.toArray(c, h), h += 3, p.toArray(c, h), h += 3, p.toArray(c, h), h += 3
        }
        var d = new Pn;
        d.addAttribute("position", new En(s, 3)), d.addAttribute("color", new En(c, 3));
        var f = new fr({
            vertexColors: M
        });
        gr.call(this, d, f)
    }

    function Zs(t, e, n, i, r, a) {
        t = t || 10, e = e || 16, n = n || 8, i = i || 64, r = new rn(void 0 !== r ? r : 4473924), a = new rn(void 0 !== a ? a : 8947848);
        var o, s, c, l, h, u, p, d = [],
            f = [];
        for (l = 0; l <= e; l++) c = l / e * (2 * Math.PI), o = Math.sin(c) * t, s = Math.cos(c) * t, d.push(0, 0, 0), d.push(o, 0, s), p = 1 & l ? r : a, f.push(p.r, p.g, p.b), f.push(p.r, p.g, p.b);
        for (l = 0; l <= n; l++)
            for (p = 1 & l ? r : a, u = t - t / n * l, h = 0; h < i; h++) c = h / i * (2 * Math.PI), o = Math.sin(c) * u, s = Math.cos(c) * u, d.push(o, 0, s), f.push(p.r, p.g, p.b), c = (h + 1) / i * (2 * Math.PI), o = Math.sin(c) * u, s = Math.cos(c) * u, d.push(o, 0, s), f.push(p.r, p.g, p.b);
        var m = new Pn;
        m.addAttribute("position", new En(d, 3)), m.addAttribute("color", new En(f, 3));
        var g = new fr({
            vertexColors: M
        });
        gr.call(this, m, g)
    }

    function Ks(t, e, n, i) {
        this.object = t, this.size = void 0 !== e ? e : 1;
        var r = void 0 !== n ? n : 16776960,
            a = void 0 !== i ? i : 1,
            o = 0,
            s = this.object.geometry;
        s && s.isGeometry ? o = s.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
        var c = new Pn,
            l = new En(2 * o * 3, 3);
        c.addAttribute("position", l), gr.call(this, c, new fr({
            color: r,
            linewidth: a
        })), this.matrixAutoUpdate = !1, this.update()
    }

    function Js(t, e, n) {
        un.call(this), this.light = t, this.light.updateMatrixWorld(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, void 0 === e && (e = 1);
        var i = new Pn;
        i.addAttribute("position", new En([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0], 3));
        var r = new fr({
            fog: !1
        });
        this.lightPlane = new mr(i, r), this.add(this.lightPlane), (i = new Pn).addAttribute("position", new En([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new mr(i, r), this.add(this.targetLine), this.update()
    }

    function Qs(t) {
        var e = new Pn,
            n = new fr({
                color: 16777215,
                vertexColors: b
            }),
            i = [],
            r = [],
            a = {},
            o = new rn(16755200),
            s = new rn(16711680),
            c = new rn(43775),
            l = new rn(16777215),
            h = new rn(3355443);

        function u(t, e, n) {
            p(t, n), p(e, n)
        }

        function p(t, e) {
            i.push(0, 0, 0), r.push(e.r, e.g, e.b), void 0 === a[t] && (a[t] = []), a[t].push(i.length / 3 - 1)
        }
        u("n1", "n2", o), u("n2", "n4", o), u("n4", "n3", o), u("n3", "n1", o), u("f1", "f2", o), u("f2", "f4", o), u("f4", "f3", o), u("f3", "f1", o), u("n1", "f1", o), u("n2", "f2", o), u("n3", "f3", o), u("n4", "f4", o), u("p", "n1", s), u("p", "n2", s), u("p", "n3", s), u("p", "n4", s), u("u1", "u2", c), u("u2", "u3", c), u("u3", "u1", c), u("c", "t", l), u("p", "c", h), u("cn1", "cn2", h), u("cn3", "cn4", h), u("cf1", "cf2", h), u("cf3", "cf4", h), e.addAttribute("position", new En(i, 3)), e.addAttribute("color", new En(r, 3)), gr.call(this, e, n), this.camera = t, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = a, this.update()
    }

    function $s(t, e) {
        this.object = t, void 0 === e && (e = 16776960);
        var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
            i = new Float32Array(24),
            r = new Pn;
        r.setIndex(new vn(n, 1)), r.addAttribute("position", new vn(i, 3)), gr.call(this, r, new fr({
            color: e
        })), this.matrixAutoUpdate = !1, this.update()
    }

    function tc(t, e) {
        this.type = "Box3Helper", this.box = t;
        var n = void 0 !== e ? e : 16776960,
            i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
            r = new Pn;
        r.setIndex(new vn(i, 1)), r.addAttribute("position", new En([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)), gr.call(this, r, new fr({
            color: n
        })), this.geometry.computeBoundingSphere()
    }

    function ec(t, e, n) {
        this.type = "PlaneHelper", this.plane = t, this.size = void 0 === e ? 1 : e;
        var i = void 0 !== n ? n : 16776960,
            r = new Pn;
        r.addAttribute("position", new En([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3)), r.computeBoundingSphere(), mr.call(this, r, new fr({
            color: i
        }));
        var a = new Pn;
        a.addAttribute("position", new En([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)), a.computeBoundingSphere(), this.add(new Hn(a, new kn({
            color: i,
            opacity: .2,
            transparent: !0,
            depthWrite: !1
        })))
    }

    function nc(t, e, n, i, r, a) {
        un.call(this), void 0 === i && (i = 16776960), void 0 === n && (n = 1), void 0 === r && (r = .2 * n), void 0 === a && (a = .2 * r), void 0 === ds && ((ds = new Pn).addAttribute("position", new En([0, 0, 0, 0, 1, 0], 3)), (fs = new Pa(0, .5, 1, 5, 1)).translate(0, -.5, 0)), this.position.copy(e), this.line = new mr(ds, new fr({
            color: i
        })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Hn(fs, new kn({
            color: i
        })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(t), this.setLength(n, r, a)
    }

    function ic(t) {
        var e = [0, 0, 0, t = t || 1, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t],
            n = new Pn;
        n.addAttribute("position", new En(e, 3)), n.addAttribute("color", new En([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
        var i = new fr({
            vertexColors: M
        });
        gr.call(this, n, i)
    }

    function rc(t, e, n, i, r, a, o) {
        return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."), new fn(t, e, n, r, a, o)
    }
    Object.assign(gs.prototype, {
        load: function(t, e, n, i) {
            var r = new Ka(this.manager);
            r.setResponseType("arraybuffer"), r.load(t, function(t) {
                var n = t.slice(0);
                ms.getContext().decodeAudioData(n, function(t) {
                    e(t)
                })
            }, n, i)
        }
    }), Object.assign(vs.prototype, {
        update: function() {
            var t, e, n, i, r, a, o, s, c = new ze,
                l = new ze;
            return function(h) {
                if (t !== this || e !== h.focus || n !== h.fov || i !== h.aspect * this.aspect || r !== h.near || a !== h.far || o !== h.zoom || s !== this.eyeSep) {
                    t = this, e = h.focus, n = h.fov, i = h.aspect * this.aspect, r = h.near, a = h.far, o = h.zoom;
                    var u, p, d = h.projectionMatrix.clone(),
                        f = (s = this.eyeSep / 2) * r / e,
                        m = r * Math.tan(ke.DEG2RAD * n * .5) / o;
                    l.elements[12] = -s, c.elements[12] = s, u = -m * i + f, p = m * i + f, d.elements[0] = 2 * r / (p - u), d.elements[8] = (p + u) / (p - u), this.cameraL.projectionMatrix.copy(d), u = -m * i - f, p = m * i - f, d.elements[0] = 2 * r / (p - u), d.elements[8] = (p + u) / (p - u), this.cameraR.projectionMatrix.copy(d)
                }
                this.cameraL.matrixWorld.copy(h.matrixWorld).multiply(l), this.cameraR.matrixWorld.copy(h.matrixWorld).multiply(c)
            }
        }()
    }), ys.prototype = Object.create(un.prototype), ys.prototype.constructor = ys, xs.prototype = Object.assign(Object.create(un.prototype), {
        constructor: xs,
        getInput: function() {
            return this.gain
        },
        removeFilter: function() {
            return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this
        },
        getFilter: function() {
            return this.filter
        },
        setFilter: function(t) {
            return null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = t, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this
        },
        getMasterVolume: function() {
            return this.gain.gain.value
        },
        setMasterVolume: function(t) {
            return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this
        },
        updateMatrixWorld: function() {
            var t = new He,
                e = new Fe,
                n = new He,
                i = new He;
            return function(r) {
                un.prototype.updateMatrixWorld.call(this, r);
                var a = this.context.listener,
                    o = this.up;
                this.matrixWorld.decompose(t, e, n), i.set(0, 0, -1).applyQuaternion(e), a.positionX ? (a.positionX.setValueAtTime(t.x, this.context.currentTime), a.positionY.setValueAtTime(t.y, this.context.currentTime), a.positionZ.setValueAtTime(t.z, this.context.currentTime), a.forwardX.setValueAtTime(i.x, this.context.currentTime), a.forwardY.setValueAtTime(i.y, this.context.currentTime), a.forwardZ.setValueAtTime(i.z, this.context.currentTime), a.upX.setValueAtTime(o.x, this.context.currentTime), a.upY.setValueAtTime(o.y, this.context.currentTime), a.upZ.setValueAtTime(o.z, this.context.currentTime)) : (a.setPosition(t.x, t.y, t.z), a.setOrientation(i.x, i.y, i.z, o.x, o.y, o.z))
            }
        }()
    }), ws.prototype = Object.assign(Object.create(un.prototype), {
        constructor: ws,
        getOutput: function() {
            return this.gain
        },
        setNodeSource: function(t) {
            return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = t, this.connect(), this
        },
        setMediaElementSource: function(t) {
            return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(t), this.connect(), this
        },
        setBuffer: function(t) {
            return this.buffer = t, this.sourceType = "buffer", this.autoplay && this.play(), this
        },
        play: function() {
            if (!0 !== this.isPlaying) {
                if (!1 !== this.hasPlaybackControl) {
                    var t = this.context.createBufferSource();
                    return t.buffer = this.buffer, t.loop = this.loop, t.onended = this.onEnded.bind(this), t.playbackRate.setValueAtTime(this.playbackRate, this.startTime), this.startTime = this.context.currentTime, t.start(this.startTime, this.offset), this.isPlaying = !0, this.source = t, this.connect()
                }
                console.warn("THREE.Audio: this Audio has no playback control.")
            } else console.warn("THREE.Audio: Audio is already playing.")
        },
        pause: function() {
            if (!1 !== this.hasPlaybackControl) return !0 === this.isPlaying && (this.source.stop(), this.source.onended = null, this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = !1), this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        stop: function() {
            if (!1 !== this.hasPlaybackControl) return this.source.stop(), this.source.onended = null, this.offset = 0, this.isPlaying = !1, this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        connect: function() {
            if (this.filters.length > 0) {
                this.source.connect(this.filters[0]);
                for (var t = 1, e = this.filters.length; t < e; t++) this.filters[t - 1].connect(this.filters[t]);
                this.filters[this.filters.length - 1].connect(this.getOutput())
            } else this.source.connect(this.getOutput());
            return this
        },
        disconnect: function() {
            if (this.filters.length > 0) {
                this.source.disconnect(this.filters[0]);
                for (var t = 1, e = this.filters.length; t < e; t++) this.filters[t - 1].disconnect(this.filters[t]);
                this.filters[this.filters.length - 1].disconnect(this.getOutput())
            } else this.source.disconnect(this.getOutput());
            return this
        },
        getFilters: function() {
            return this.filters
        },
        setFilters: function(t) {
            return t || (t = []), !0 === this.isPlaying ? (this.disconnect(), this.filters = t, this.connect()) : this.filters = t, this
        },
        getFilter: function() {
            return this.getFilters()[0]
        },
        setFilter: function(t) {
            return this.setFilters(t ? [t] : [])
        },
        setPlaybackRate: function(t) {
            if (!1 !== this.hasPlaybackControl) return this.playbackRate = t, !0 === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime), this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        getPlaybackRate: function() {
            return this.playbackRate
        },
        onEnded: function() {
            this.isPlaying = !1
        },
        getLoop: function() {
            return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop
        },
        setLoop: function(t) {
            if (!1 !== this.hasPlaybackControl) return this.loop = t, !0 === this.isPlaying && (this.source.loop = this.loop), this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        getVolume: function() {
            return this.gain.gain.value
        },
        setVolume: function(t) {
            return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this
        }
    }), bs.prototype = Object.assign(Object.create(ws.prototype), {
        constructor: bs,
        getOutput: function() {
            return this.panner
        },
        getRefDistance: function() {
            return this.panner.refDistance
        },
        setRefDistance: function(t) {
            return this.panner.refDistance = t, this
        },
        getRolloffFactor: function() {
            return this.panner.rolloffFactor
        },
        setRolloffFactor: function(t) {
            return this.panner.rolloffFactor = t, this
        },
        getDistanceModel: function() {
            return this.panner.distanceModel
        },
        setDistanceModel: function(t) {
            return this.panner.distanceModel = t, this
        },
        getMaxDistance: function() {
            return this.panner.maxDistance
        },
        setMaxDistance: function(t) {
            return this.panner.maxDistance = t, this
        },
        setDirectionalCone: function(t, e, n) {
            return this.panner.coneInnerAngle = t, this.panner.coneOuterAngle = e, this.panner.coneOuterGain = n, this
        },
        updateMatrixWorld: function() {
            var t = new He,
                e = new Fe,
                n = new He,
                i = new He;
            return function(r) {
                un.prototype.updateMatrixWorld.call(this, r);
                var a = this.panner;
                this.matrixWorld.decompose(t, e, n), i.set(0, 0, 1).applyQuaternion(e), a.setPosition(t.x, t.y, t.z), a.setOrientation(i.x, i.y, i.z)
            }
        }()
    }), Object.assign(Ms.prototype, {
        getFrequencyData: function() {
            return this.analyser.getByteFrequencyData(this.data), this.data
        },
        getAverageFrequency: function() {
            for (var t = 0, e = this.getFrequencyData(), n = 0; n < e.length; n++) t += e[n];
            return t / e.length
        }
    }), Object.assign(_s.prototype, {
        accumulate: function(t, e) {
            var n = this.buffer,
                i = this.valueSize,
                r = t * i + i,
                a = this.cumulativeWeight;
            if (0 === a) {
                for (var o = 0; o !== i; ++o) n[r + o] = n[o];
                a = e
            } else {
                var s = e / (a += e);
                this._mixBufferRegion(n, r, 0, s, i)
            }
            this.cumulativeWeight = a
        },
        apply: function(t) {
            var e = this.valueSize,
                n = this.buffer,
                i = t * e + e,
                r = this.cumulativeWeight,
                a = this.binding;
            if (this.cumulativeWeight = 0, r < 1) {
                var o = 3 * e;
                this._mixBufferRegion(n, i, o, 1 - r, e)
            }
            for (var s = e, c = e + e; s !== c; ++s)
                if (n[s] !== n[s + e]) {
                    a.setValue(n, i);
                    break
                }
        },
        saveOriginalState: function() {
            var t = this.binding,
                e = this.buffer,
                n = this.valueSize,
                i = 3 * n;
            t.getValue(e, i);
            for (var r = n, a = i; r !== a; ++r) e[r] = e[i + r % n];
            this.cumulativeWeight = 0
        },
        restoreOriginalState: function() {
            var t = 3 * this.valueSize;
            this.binding.setValue(this.buffer, t)
        },
        _select: function(t, e, n, i, r) {
            if (i >= .5)
                for (var a = 0; a !== r; ++a) t[e + a] = t[n + a]
        },
        _slerp: function(t, e, n, i) {
            Fe.slerpFlat(t, e, t, e, t, n, i)
        },
        _lerp: function(t, e, n, i, r) {
            for (var a = 1 - i, o = 0; o !== r; ++o) {
                var s = e + o;
                t[s] = t[s] * a + t[n + o] * i
            }
        }
    }), Object.assign(Ss.prototype, {
        getValue: function(t, e) {
            this.bind();
            var n = this._targetGroup.nCachedObjects_,
                i = this._bindings[n];
            void 0 !== i && i.getValue(t, e)
        },
        setValue: function(t, e) {
            for (var n = this._bindings, i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i) n[i].setValue(t, e)
        },
        bind: function() {
            for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].bind()
        },
        unbind: function() {
            for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].unbind()
        }
    }), Object.assign(Es, {
        Composite: Ss,
        create: function(t, e, n) {
            return t && t.isAnimationObjectGroup ? new Es.Composite(t, e, n) : new Es(t, e, n)
        },
        sanitizeNodeName: function() {
            var t = new RegExp("[\\[\\]\\.:\\/]", "g");
            return function(e) {
                return e.replace(/\s/g, "_").replace(t, "")
            }
        }(),
        parseTrackName: function() {
            var t = "[^\\[\\]\\.:\\/]",
                e = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]",
                n = /((?:WC+[\/:])*)/.source.replace("WC", t),
                i = /(WCOD+)?/.source.replace("WCOD", e),
                r = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", t),
                a = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", t),
                o = new RegExp("^" + n + i + r + a + "$"),
                s = ["material", "materials", "bones"];
            return function(t) {
                var e = o.exec(t);
                if (!e) throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                var n = {
                        nodeName: e[2],
                        objectName: e[3],
                        objectIndex: e[4],
                        propertyName: e[5],
                        propertyIndex: e[6]
                    },
                    i = n.nodeName && n.nodeName.lastIndexOf(".");
                if (void 0 !== i && -1 !== i) {
                    var r = n.nodeName.substring(i + 1); - 1 !== s.indexOf(r) && (n.nodeName = n.nodeName.substring(0, i), n.objectName = r)
                }
                if (null === n.propertyName || 0 === n.propertyName.length) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                return n
            }
        }(),
        findNode: function(t, e) {
            if (!e || "" === e || "root" === e || "." === e || -1 === e || e === t.name || e === t.uuid) return t;
            if (t.skeleton) {
                var n = t.skeleton.getBoneByName(e);
                if (void 0 !== n) return n
            }
            if (t.children) {
                var i = function(t) {
                        for (var n = 0; n < t.length; n++) {
                            var r = t[n];
                            if (r.name === e || r.uuid === e) return r;
                            var a = i(r.children);
                            if (a) return a
                        }
                        return null
                    },
                    r = i(t.children);
                if (r) return r
            }
            return null
        }
    }), Object.assign(Es.prototype, {
        _getValue_unavailable: function() {},
        _setValue_unavailable: function() {},
        BindingType: {
            Direct: 0,
            EntireArray: 1,
            ArrayElement: 2,
            HasFromToArray: 3
        },
        Versioning: {
            None: 0,
            NeedsUpdate: 1,
            MatrixWorldNeedsUpdate: 2
        },
        GetterByBindingType: [function(t, e) {
            t[e] = this.node[this.propertyName]
        }, function(t, e) {
            for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) t[e++] = n[i]
        }, function(t, e) {
            t[e] = this.resolvedProperty[this.propertyIndex]
        }, function(t, e) {
            this.resolvedProperty.toArray(t, e)
        }],
        SetterByBindingTypeAndVersioning: [
            [function(t, e) {
                this.targetObject[this.propertyName] = t[e]
            }, function(t, e) {
                this.targetObject[this.propertyName] = t[e], this.targetObject.needsUpdate = !0
            }, function(t, e) {
                this.targetObject[this.propertyName] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0
            }],
            [function(t, e) {
                for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) n[i] = t[e++]
            }, function(t, e) {
                for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) n[i] = t[e++];
                this.targetObject.needsUpdate = !0
            }, function(t, e) {
                for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) n[i] = t[e++];
                this.targetObject.matrixWorldNeedsUpdate = !0
            }],
            [function(t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e]
            }, function(t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.needsUpdate = !0
            }, function(t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0
            }],
            [function(t, e) {
                this.resolvedProperty.fromArray(t, e)
            }, function(t, e) {
                this.resolvedProperty.fromArray(t, e), this.targetObject.needsUpdate = !0
            }, function(t, e) {
                this.resolvedProperty.fromArray(t, e), this.targetObject.matrixWorldNeedsUpdate = !0
            }]
        ],
        getValue: function(t, e) {
            this.bind(), this.getValue(t, e)
        },
        setValue: function(t, e) {
            this.bind(), this.setValue(t, e)
        },
        bind: function() {
            var t = this.node,
                e = this.parsedPath,
                n = e.objectName,
                i = e.propertyName,
                r = e.propertyIndex;
            if (t || (t = Es.findNode(this.rootNode, e.nodeName) || this.rootNode, this.node = t), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, t) {
                if (n) {
                    var a = e.objectIndex;
                    switch (n) {
                        case "materials":
                            if (!t.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                            if (!t.material.materials) return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                            t = t.material.materials;
                            break;
                        case "bones":
                            if (!t.skeleton) return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                            t = t.skeleton.bones;
                            for (var o = 0; o < t.length; o++)
                                if (t[o].name === a) {
                                    a = o;
                                    break
                                } break;
                        default:
                            if (void 0 === t[n]) return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                            t = t[n]
                    }
                    if (void 0 !== a) {
                        if (void 0 === t[a]) return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
                        t = t[a]
                    }
                }
                var s = t[i];
                if (void 0 !== s) {
                    var c = this.Versioning.None;
                    void 0 !== t.needsUpdate ? (c = this.Versioning.NeedsUpdate, this.targetObject = t) : void 0 !== t.matrixWorldNeedsUpdate && (c = this.Versioning.MatrixWorldNeedsUpdate, this.targetObject = t);
                    var l = this.BindingType.Direct;
                    if (void 0 !== r) {
                        if ("morphTargetInfluences" === i) {
                            if (!t.geometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                            if (t.geometry.isBufferGeometry) {
                                if (!t.geometry.morphAttributes) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                for (o = 0; o < this.node.geometry.morphAttributes.position.length; o++)
                                    if (t.geometry.morphAttributes.position[o].name === r) {
                                        r = o;
                                        break
                                    }
                            } else {
                                if (!t.geometry.morphTargets) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                                for (o = 0; o < this.node.geometry.morphTargets.length; o++)
                                    if (t.geometry.morphTargets[o].name === r) {
                                        r = o;
                                        break
                                    }
                            }
                        }
                        l = this.BindingType.ArrayElement, this.resolvedProperty = s, this.propertyIndex = r
                    } else void 0 !== s.fromArray && void 0 !== s.toArray ? (l = this.BindingType.HasFromToArray, this.resolvedProperty = s) : Array.isArray(s) ? (l = this.BindingType.EntireArray, this.resolvedProperty = s) : this.propertyName = i;
                    this.getValue = this.GetterByBindingType[l], this.setValue = this.SetterByBindingTypeAndVersioning[l][c]
                } else {
                    var h = e.nodeName;
                    console.error("THREE.PropertyBinding: Trying to update property for track: " + h + "." + i + " but it wasn't found.", t)
                }
            } else console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.")
        },
        unbind: function() {
            this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound
        }
    }), Object.assign(Es.prototype, {
        _getValue_unbound: Es.prototype.getValue,
        _setValue_unbound: Es.prototype.setValue
    }), Object.assign(Ts.prototype, {
        isAnimationObjectGroup: !0,
        add: function() {
            for (var t = this._objects, e = t.length, n = this.nCachedObjects_, i = this._indicesByUUID, r = this._paths, a = this._parsedPaths, o = this._bindings, s = o.length, c = void 0, l = 0, h = arguments.length; l !== h; ++l) {
                var u = arguments[l],
                    p = u.uuid,
                    d = i[p];
                if (void 0 === d) {
                    d = e++, i[p] = d, t.push(u);
                    for (var f = 0, m = s; f !== m; ++f) o[f].push(new Es(u, r[f], a[f]))
                } else if (d < n) {
                    c = t[d];
                    var g = --n,
                        v = t[g];
                    for (i[v.uuid] = d, t[d] = v, i[p] = g, t[g] = u, f = 0, m = s; f !== m; ++f) {
                        var y = o[f],
                            x = y[g],
                            w = y[d];
                        y[d] = x, void 0 === w && (w = new Es(u, r[f], a[f])), y[g] = w
                    }
                } else t[d] !== c && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")
            }
            this.nCachedObjects_ = n
        },
        remove: function() {
            for (var t = this._objects, e = this.nCachedObjects_, n = this._indicesByUUID, i = this._bindings, r = i.length, a = 0, o = arguments.length; a !== o; ++a) {
                var s = arguments[a],
                    c = s.uuid,
                    l = n[c];
                if (void 0 !== l && l >= e) {
                    var h = e++,
                        u = t[h];
                    n[u.uuid] = l, t[l] = u, n[c] = h, t[h] = s;
                    for (var p = 0, d = r; p !== d; ++p) {
                        var f = i[p],
                            m = f[h],
                            g = f[l];
                        f[l] = m, f[h] = g
                    }
                }
            }
            this.nCachedObjects_ = e
        },
        uncache: function() {
            for (var t = this._objects, e = t.length, n = this.nCachedObjects_, i = this._indicesByUUID, r = this._bindings, a = r.length, o = 0, s = arguments.length; o !== s; ++o) {
                var c = arguments[o].uuid,
                    l = i[c];
                if (void 0 !== l)
                    if (delete i[c], l < n) {
                        var h = --n,
                            u = t[h],
                            p = t[v = --e];
                        i[u.uuid] = l, t[l] = u, i[p.uuid] = h, t[h] = p, t.pop();
                        for (var d = 0, f = a; d !== f; ++d) {
                            var m = (y = r[d])[h],
                                g = y[v];
                            y[l] = m, y[h] = g, y.pop()
                        }
                    } else {
                        var v;
                        for (i[(p = t[v = --e]).uuid] = l, t[l] = p, t.pop(), d = 0, f = a; d !== f; ++d) {
                            var y;
                            (y = r[d])[l] = y[v], y.pop()
                        }
                    }
            }
            this.nCachedObjects_ = n
        },
        subscribe_: function(t, e) {
            var n = this._bindingsIndicesByPath,
                i = n[t],
                r = this._bindings;
            if (void 0 !== i) return r[i];
            var a = this._paths,
                o = this._parsedPaths,
                s = this._objects,
                c = s.length,
                l = this.nCachedObjects_,
                h = new Array(c);
            i = r.length, n[t] = i, a.push(t), o.push(e), r.push(h);
            for (var u = l, p = s.length; u !== p; ++u) {
                var d = s[u];
                h[u] = new Es(d, t, e)
            }
            return h
        },
        unsubscribe_: function(t) {
            var e = this._bindingsIndicesByPath,
                n = e[t];
            if (void 0 !== n) {
                var i = this._paths,
                    r = this._parsedPaths,
                    a = this._bindings,
                    o = a.length - 1,
                    s = a[o];
                e[t[o]] = n, a[n] = s, a.pop(), r[n] = r[o], r.pop(), i[n] = i[o], i.pop()
            }
        }
    }), Object.assign(As.prototype, {
        play: function() {
            return this._mixer._activateAction(this), this
        },
        stop: function() {
            return this._mixer._deactivateAction(this), this.reset()
        },
        reset: function() {
            return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping()
        },
        isRunning: function() {
            return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this)
        },
        isScheduled: function() {
            return this._mixer._isActiveAction(this)
        },
        startAt: function(t) {
            return this._startTime = t, this
        },
        setLoop: function(t, e) {
            return this.loop = t, this.repetitions = e, this
        },
        setEffectiveWeight: function(t) {
            return this.weight = t, this._effectiveWeight = this.enabled ? t : 0, this.stopFading()
        },
        getEffectiveWeight: function() {
            return this._effectiveWeight
        },
        fadeIn: function(t) {
            return this._scheduleFading(t, 0, 1)
        },
        fadeOut: function(t) {
            return this._scheduleFading(t, 1, 0)
        },
        crossFadeFrom: function(t, e, n) {
            if (t.fadeOut(e), this.fadeIn(e), n) {
                var i = this._clip.duration,
                    r = t._clip.duration,
                    a = r / i,
                    o = i / r;
                t.warp(1, a, e), this.warp(o, 1, e)
            }
            return this
        },
        crossFadeTo: function(t, e, n) {
            return t.crossFadeFrom(this, e, n)
        },
        stopFading: function() {
            var t = this._weightInterpolant;
            return null !== t && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this
        },
        setEffectiveTimeScale: function(t) {
            return this.timeScale = t, this._effectiveTimeScale = this.paused ? 0 : t, this.stopWarping()
        },
        getEffectiveTimeScale: function() {
            return this._effectiveTimeScale
        },
        setDuration: function(t) {
            return this.timeScale = this._clip.duration / t, this.stopWarping()
        },
        syncWith: function(t) {
            return this.time = t.time, this.timeScale = t.timeScale, this.stopWarping()
        },
        halt: function(t) {
            return this.warp(this._effectiveTimeScale, 0, t)
        },
        warp: function(t, e, n) {
            var i = this._mixer,
                r = i.time,
                a = this._timeScaleInterpolant,
                o = this.timeScale;
            null === a && (a = i._lendControlInterpolant(), this._timeScaleInterpolant = a);
            var s = a.parameterPositions,
                c = a.sampleValues;
            return s[0] = r, s[1] = r + n, c[0] = t / o, c[1] = e / o, this
        },
        stopWarping: function() {
            var t = this._timeScaleInterpolant;
            return null !== t && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this
        },
        getMixer: function() {
            return this._mixer
        },
        getClip: function() {
            return this._clip
        },
        getRoot: function() {
            return this._localRoot || this._mixer._root
        },
        _update: function(t, e, n, i) {
            if (this.enabled) {
                var r = this._startTime;
                if (null !== r) {
                    var a = (t - r) * n;
                    if (a < 0 || 0 === n) return;
                    this._startTime = null, e = n * a
                }
                e *= this._updateTimeScale(t);
                var o = this._updateTime(e),
                    s = this._updateWeight(t);
                if (s > 0)
                    for (var c = this._interpolants, l = this._propertyBindings, h = 0, u = c.length; h !== u; ++h) c[h].evaluate(o), l[h].accumulate(i, s)
            } else this._updateWeight(t)
        },
        _updateWeight: function(t) {
            var e = 0;
            if (this.enabled) {
                e = this.weight;
                var n = this._weightInterpolant;
                if (null !== n) {
                    var i = n.evaluate(t)[0];
                    e *= i, t > n.parameterPositions[1] && (this.stopFading(), 0 === i && (this.enabled = !1))
                }
            }
            return this._effectiveWeight = e, e
        },
        _updateTimeScale: function(t) {
            var e = 0;
            if (!this.paused) {
                e = this.timeScale;
                var n = this._timeScaleInterpolant;
                null !== n && (e *= n.evaluate(t)[0], t > n.parameterPositions[1] && (this.stopWarping(), 0 === e ? this.paused = !0 : this.timeScale = e))
            }
            return this._effectiveTimeScale = e, e
        },
        _updateTime: function(t) {
            var e = this.time + t,
                n = this._clip.duration,
                i = this.loop,
                r = this._loopCount,
                a = i === me;
            if (0 === t) return -1 === r ? e : a && 1 == (1 & r) ? n - e : e;
            if (i === de) {
                -1 === r && (this._loopCount = 0, this._setEndings(!0, !0, !1));
                t: {
                    if (e >= n) e = n;
                    else {
                        if (!(e < 0)) break t;
                        e = 0
                    }
                    this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                    this._mixer.dispatchEvent({
                        type: "finished",
                        action: this,
                        direction: t < 0 ? -1 : 1
                    })
                }
            } else {
                if (-1 === r && (t >= 0 ? (r = 0, this._setEndings(!0, 0 === this.repetitions, a)) : this._setEndings(0 === this.repetitions, !0, a)), e >= n || e < 0) {
                    var o = Math.floor(e / n);
                    e -= n * o, r += Math.abs(o);
                    var s = this.repetitions - r;
                    if (s <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, e = t > 0 ? n : 0, this._mixer.dispatchEvent({
                        type: "finished",
                        action: this,
                        direction: t > 0 ? 1 : -1
                    });
                    else {
                        if (1 === s) {
                            var c = t < 0;
                            this._setEndings(c, !c, a)
                        } else this._setEndings(!1, !1, a);
                        this._loopCount = r, this._mixer.dispatchEvent({
                            type: "loop",
                            action: this,
                            loopDelta: o
                        })
                    }
                }
                if (a && 1 == (1 & r)) return this.time = e, n - e
            }
            return this.time = e, e
        },
        _setEndings: function(t, e, n) {
            var i = this._interpolantSettings;
            n ? (i.endingStart = we, i.endingEnd = we) : (i.endingStart = t ? this.zeroSlopeAtStart ? we : xe : be, i.endingEnd = e ? this.zeroSlopeAtEnd ? we : xe : be)
        },
        _scheduleFading: function(t, e, n) {
            var i = this._mixer,
                r = i.time,
                a = this._weightInterpolant;
            null === a && (a = i._lendControlInterpolant(), this._weightInterpolant = a);
            var o = a.parameterPositions,
                s = a.sampleValues;
            return o[0] = r, s[0] = e, o[1] = r + t, s[1] = n, this
        }
    }), Ls.prototype = Object.assign(Object.create(i.prototype), {
        constructor: Ls,
        _bindAction: function(t, e) {
            var n = t._localRoot || this._root,
                i = t._clip.tracks,
                r = i.length,
                a = t._propertyBindings,
                o = t._interpolants,
                s = n.uuid,
                c = this._bindingsByRootAndName,
                l = c[s];
            void 0 === l && (l = {}, c[s] = l);
            for (var h = 0; h !== r; ++h) {
                var u = i[h],
                    p = u.name,
                    d = l[p];
                if (void 0 !== d) a[h] = d;
                else {
                    if (void 0 !== (d = a[h])) {
                        null === d._cacheIndex && (++d.referenceCount, this._addInactiveBinding(d, s, p));
                        continue
                    }
                    var f = e && e._propertyBindings[h].binding.parsedPath;
                    ++(d = new _s(Es.create(n, p, f), u.ValueTypeName, u.getValueSize())).referenceCount, this._addInactiveBinding(d, s, p), a[h] = d
                }
                o[h].resultBuffer = d.buffer
            }
        },
        _activateAction: function(t) {
            if (!this._isActiveAction(t)) {
                if (null === t._cacheIndex) {
                    var e = (t._localRoot || this._root).uuid,
                        n = t._clip.uuid,
                        i = this._actionsByClip[n];
                    this._bindAction(t, i && i.knownActions[0]), this._addInactiveAction(t, n, e)
                }
                for (var r = t._propertyBindings, a = 0, o = r.length; a !== o; ++a) {
                    var s = r[a];
                    0 == s.useCount++ && (this._lendBinding(s), s.saveOriginalState())
                }
                this._lendAction(t)
            }
        },
        _deactivateAction: function(t) {
            if (this._isActiveAction(t)) {
                for (var e = t._propertyBindings, n = 0, i = e.length; n !== i; ++n) {
                    var r = e[n];
                    0 == --r.useCount && (r.restoreOriginalState(), this._takeBackBinding(r))
                }
                this._takeBackAction(t)
            }
        },
        _initMemoryManager: function() {
            this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
            var t = this;
            this.stats = {
                actions: {
                    get total() {
                        return t._actions.length
                    },
                    get inUse() {
                        return t._nActiveActions
                    }
                },
                bindings: {
                    get total() {
                        return t._bindings.length
                    },
                    get inUse() {
                        return t._nActiveBindings
                    }
                },
                controlInterpolants: {
                    get total() {
                        return t._controlInterpolants.length
                    },
                    get inUse() {
                        return t._nActiveControlInterpolants
                    }
                }
            }
        },
        _isActiveAction: function(t) {
            var e = t._cacheIndex;
            return null !== e && e < this._nActiveActions
        },
        _addInactiveAction: function(t, e, n) {
            var i = this._actions,
                r = this._actionsByClip,
                a = r[e];
            if (void 0 === a) a = {
                knownActions: [t],
                actionByRoot: {}
            }, t._byClipCacheIndex = 0, r[e] = a;
            else {
                var o = a.knownActions;
                t._byClipCacheIndex = o.length, o.push(t)
            }
            t._cacheIndex = i.length, i.push(t), a.actionByRoot[n] = t
        },
        _removeInactiveAction: function(t) {
            var e = this._actions,
                n = e[e.length - 1],
                i = t._cacheIndex;
            n._cacheIndex = i, e[i] = n, e.pop(), t._cacheIndex = null;
            var r = t._clip.uuid,
                a = this._actionsByClip,
                o = a[r],
                s = o.knownActions,
                c = s[s.length - 1],
                l = t._byClipCacheIndex;
            c._byClipCacheIndex = l, s[l] = c, s.pop(), t._byClipCacheIndex = null, delete o.actionByRoot[(t._localRoot || this._root).uuid], 0 === s.length && delete a[r], this._removeInactiveBindingsForAction(t)
        },
        _removeInactiveBindingsForAction: function(t) {
            for (var e = t._propertyBindings, n = 0, i = e.length; n !== i; ++n) {
                var r = e[n];
                0 == --r.referenceCount && this._removeInactiveBinding(r)
            }
        },
        _lendAction: function(t) {
            var e = this._actions,
                n = t._cacheIndex,
                i = this._nActiveActions++,
                r = e[i];
            t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r
        },
        _takeBackAction: function(t) {
            var e = this._actions,
                n = t._cacheIndex,
                i = --this._nActiveActions,
                r = e[i];
            t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r
        },
        _addInactiveBinding: function(t, e, n) {
            var i = this._bindingsByRootAndName,
                r = i[e],
                a = this._bindings;
            void 0 === r && (r = {}, i[e] = r), r[n] = t, t._cacheIndex = a.length, a.push(t)
        },
        _removeInactiveBinding: function(t) {
            var e = this._bindings,
                n = t.binding,
                i = n.rootNode.uuid,
                r = n.path,
                a = this._bindingsByRootAndName,
                o = a[i],
                s = e[e.length - 1],
                c = t._cacheIndex;
            s._cacheIndex = c, e[c] = s, e.pop(), delete o[r];
            t: {
                for (var l in o) break t;delete a[i]
            }
        },
        _lendBinding: function(t) {
            var e = this._bindings,
                n = t._cacheIndex,
                i = this._nActiveBindings++,
                r = e[i];
            t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r
        },
        _takeBackBinding: function(t) {
            var e = this._bindings,
                n = t._cacheIndex,
                i = --this._nActiveBindings,
                r = e[i];
            t._cacheIndex = i, e[i] = t, r._cacheIndex = n, e[n] = r
        },
        _lendControlInterpolant: function() {
            var t = this._controlInterpolants,
                e = this._nActiveControlInterpolants++,
                n = t[e];
            return void 0 === n && ((n = new zo(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = e, t[e] = n), n
        },
        _takeBackControlInterpolant: function(t) {
            var e = this._controlInterpolants,
                n = t.__cacheIndex,
                i = --this._nActiveControlInterpolants,
                r = e[i];
            t.__cacheIndex = i, e[i] = t, r.__cacheIndex = n, e[n] = r
        },
        _controlInterpolantsResultBuffer: new Float32Array(1),
        clipAction: function(t, e) {
            var n = e || this._root,
                i = n.uuid,
                r = "string" == typeof t ? Zo.findByName(n, t) : t,
                a = null !== r ? r.uuid : t,
                o = this._actionsByClip[a],
                s = null;
            if (void 0 !== o) {
                var c = o.actionByRoot[i];
                if (void 0 !== c) return c;
                s = o.knownActions[0], null === r && (r = s._clip)
            }
            if (null === r) return null;
            var l = new As(this, r, e);
            return this._bindAction(l, s), this._addInactiveAction(l, a, i), l
        },
        existingAction: function(t, e) {
            var n = e || this._root,
                i = n.uuid,
                r = "string" == typeof t ? Zo.findByName(n, t) : t,
                a = r ? r.uuid : t,
                o = this._actionsByClip[a];
            return void 0 !== o && o.actionByRoot[i] || null
        },
        stopAllAction: function() {
            var t = this._actions,
                e = this._nActiveActions,
                n = this._bindings,
                i = this._nActiveBindings;
            this._nActiveActions = 0, this._nActiveBindings = 0;
            for (var r = 0; r !== e; ++r) t[r].reset();
            for (r = 0; r !== i; ++r) n[r].useCount = 0;
            return this
        },
        update: function(t) {
            t *= this.timeScale;
            for (var e = this._actions, n = this._nActiveActions, i = this.time += t, r = Math.sign(t), a = this._accuIndex ^= 1, o = 0; o !== n; ++o) e[o]._update(i, t, r, a);
            var s = this._bindings,
                c = this._nActiveBindings;
            for (o = 0; o !== c; ++o) s[o].apply(a);
            return this
        },
        getRoot: function() {
            return this._root
        },
        uncacheClip: function(t) {
            var e = this._actions,
                n = t.uuid,
                i = this._actionsByClip,
                r = i[n];
            if (void 0 !== r) {
                for (var a = r.knownActions, o = 0, s = a.length; o !== s; ++o) {
                    var c = a[o];
                    this._deactivateAction(c);
                    var l = c._cacheIndex,
                        h = e[e.length - 1];
                    c._cacheIndex = null, c._byClipCacheIndex = null, h._cacheIndex = l, e[l] = h, e.pop(), this._removeInactiveBindingsForAction(c)
                }
                delete i[n]
            }
        },
        uncacheRoot: function(t) {
            var e = t.uuid,
                n = this._actionsByClip;
            for (var i in n) {
                var r = n[i].actionByRoot[e];
                void 0 !== r && (this._deactivateAction(r), this._removeInactiveAction(r))
            }
            var a = this._bindingsByRootAndName[e];
            if (void 0 !== a)
                for (var o in a) {
                    var s = a[o];
                    s.restoreOriginalState(), this._removeInactiveBinding(s)
                }
        },
        uncacheAction: function(t, e) {
            var n = this.existingAction(t, e);
            null !== n && (this._deactivateAction(n), this._removeInactiveAction(n))
        }
    }), Rs.prototype.clone = function() {
        return new Rs(void 0 === this.value.clone ? this.value : this.value.clone())
    }, Ps.prototype = Object.assign(Object.create(Pn.prototype), {
        constructor: Ps,
        isInstancedBufferGeometry: !0,
        copy: function(t) {
            return Pn.prototype.copy.call(this, t), this.maxInstancedCount = t.maxInstancedCount, this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        }
    }), Cs.prototype = Object.assign(Object.create(or.prototype), {
        constructor: Cs,
        isInstancedInterleavedBuffer: !0,
        copy: function(t) {
            return or.prototype.copy.call(this, t), this.meshPerAttribute = t.meshPerAttribute, this
        }
    }), Is.prototype = Object.assign(Object.create(vn.prototype), {
        constructor: Is,
        isInstancedBufferAttribute: !0,
        copy: function(t) {
            return vn.prototype.copy.call(this, t), this.meshPerAttribute = t.meshPerAttribute, this
        }
    }), Object.assign(Os.prototype, {
        linePrecision: 1,
        set: function(t, e) {
            this.ray.set(t, e)
        },
        setFromCamera: function(t, e) {
            e && e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize()) : e && e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.")
        },
        intersectObject: function(t, e, n) {
            var i = n || [];
            return Bs(t, this, i, e), i.sort(Ds), i
        },
        intersectObjects: function(t, e, n) {
            var i = n || [];
            if (!1 === Array.isArray(t)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), i;
            for (var r = 0, a = t.length; r < a; r++) Bs(t[r], this, i, e);
            return i.sort(Ds), i
        }
    }), Object.assign(Ns.prototype, {
        start: function() {
            this.startTime = ("undefined" == typeof performance ? Date : performance).now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0
        },
        stop: function() {
            this.getElapsedTime(), this.running = !1, this.autoStart = !1
        },
        getElapsedTime: function() {
            return this.getDelta(), this.elapsedTime
        },
        getDelta: function() {
            var t = 0;
            if (this.autoStart && !this.running) return this.start(), 0;
            if (this.running) {
                var e = ("undefined" == typeof performance ? Date : performance).now();
                t = (e - this.oldTime) / 1e3, this.oldTime = e, this.elapsedTime += t
            }
            return t
        }
    }), Object.assign(ks.prototype, {
        set: function(t, e, n) {
            return this.radius = t, this.phi = e, this.theta = n, this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.radius = t.radius, this.phi = t.phi, this.theta = t.theta, this
        },
        makeSafe: function() {
            return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this
        },
        setFromVector3: function(t) {
            return this.radius = t.length(), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t.x, t.z), this.phi = Math.acos(ke.clamp(t.y / this.radius, -1, 1))), this
        }
    }), Object.assign(Us.prototype, {
        set: function(t, e, n) {
            return this.radius = t, this.theta = e, this.y = n, this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.radius = t.radius, this.theta = t.theta, this.y = t.y, this
        },
        setFromVector3: function(t) {
            return this.radius = Math.sqrt(t.x * t.x + t.z * t.z), this.theta = Math.atan2(t.x, t.z), this.y = t.y, this
        }
    }), Object.assign(zs.prototype, {
        set: function(t, e) {
            return this.min.copy(t), this.max.copy(e), this
        },
        setFromPoints: function(t) {
            this.makeEmpty();
            for (var e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
            return this
        },
        setFromCenterAndSize: function() {
            var t = new Ue;
            return function(e, n) {
                var i = t.copy(n).multiplyScalar(.5);
                return this.min.copy(e).sub(i), this.max.copy(e).add(i), this
            }
        }(),
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.min.copy(t.min), this.max.copy(t.max), this
        },
        makeEmpty: function() {
            return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this
        },
        isEmpty: function() {
            return this.max.x < this.min.x || this.max.y < this.min.y
        },
        getCenter: function(t) {
            return void 0 === t && (console.warn("THREE.Box2: .getCenter() target is now required"), t = new Ue), this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
        },
        getSize: function(t) {
            return void 0 === t && (console.warn("THREE.Box2: .getSize() target is now required"), t = new Ue), this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min)
        },
        expandByPoint: function(t) {
            return this.min.min(t), this.max.max(t), this
        },
        expandByVector: function(t) {
            return this.min.sub(t), this.max.add(t), this
        },
        expandByScalar: function(t) {
            return this.min.addScalar(-t), this.max.addScalar(t), this
        },
        containsPoint: function(t) {
            return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y)
        },
        containsBox: function(t) {
            return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y
        },
        getParameter: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box2: .getParameter() target is now required"), e = new Ue), e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y))
        },
        intersectsBox: function(t) {
            return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y)
        },
        clampPoint: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box2: .clampPoint() target is now required"), e = new Ue), e.copy(t).clamp(this.min, this.max)
        },
        distanceToPoint: function() {
            var t = new Ue;
            return function(e) {
                return t.copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }(),
        intersect: function(t) {
            return this.min.max(t.min), this.max.min(t.max), this
        },
        union: function(t) {
            return this.min.min(t.min), this.max.max(t.max), this
        },
        translate: function(t) {
            return this.min.add(t), this.max.add(t), this
        },
        equals: function(t) {
            return t.min.equals(this.min) && t.max.equals(this.max)
        }
    }), Object.assign(Fs.prototype, {
        set: function(t, e) {
            return this.start.copy(t), this.end.copy(e), this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.start.copy(t.start), this.end.copy(t.end), this
        },
        getCenter: function(t) {
            return void 0 === t && (console.warn("THREE.Line3: .getCenter() target is now required"), t = new He), t.addVectors(this.start, this.end).multiplyScalar(.5)
        },
        delta: function(t) {
            return void 0 === t && (console.warn("THREE.Line3: .delta() target is now required"), t = new He), t.subVectors(this.end, this.start)
        },
        distanceSq: function() {
            return this.start.distanceToSquared(this.end)
        },
        distance: function() {
            return this.start.distanceTo(this.end)
        },
        at: function(t, e) {
            return void 0 === e && (console.warn("THREE.Line3: .at() target is now required"), e = new He), this.delta(e).multiplyScalar(t).add(this.start)
        },
        closestPointToPointParameter: function() {
            var t = new He,
                e = new He;
            return function(n, i) {
                t.subVectors(n, this.start), e.subVectors(this.end, this.start);
                var r = e.dot(e),
                    a = e.dot(t) / r;
                return i && (a = ke.clamp(a, 0, 1)), a
            }
        }(),
        closestPointToPoint: function(t, e, n) {
            var i = this.closestPointToPointParameter(t, e);
            return void 0 === n && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), n = new He), this.delta(n).multiplyScalar(i).add(this.start)
        },
        applyMatrix4: function(t) {
            return this.start.applyMatrix4(t), this.end.applyMatrix4(t), this
        },
        equals: function(t) {
            return t.start.equals(this.start) && t.end.equals(this.end)
        }
    }), Hs.prototype = Object.create(un.prototype), Hs.prototype.constructor = Hs, Hs.prototype.isImmediateRenderObject = !0, Gs.prototype = Object.create(gr.prototype), Gs.prototype.constructor = Gs, Gs.prototype.update = function() {
        var t = new He,
            e = new He,
            n = new Ge;
        return function() {
            var i = ["a", "b", "c"];
            this.object.updateMatrixWorld(!0), n.getNormalMatrix(this.object.matrixWorld);
            var r = this.object.matrixWorld,
                a = this.geometry.attributes.position,
                o = this.object.geometry;
            if (o && o.isGeometry)
                for (var s = o.vertices, c = o.faces, l = 0, h = 0, u = c.length; h < u; h++)
                    for (var p = c[h], d = 0, f = p.vertexNormals.length; d < f; d++) {
                        var m = s[p[i[d]]],
                            g = p.vertexNormals[d];
                        t.copy(m).applyMatrix4(r), e.copy(g).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t), a.setXYZ(l, t.x, t.y, t.z), l += 1, a.setXYZ(l, e.x, e.y, e.z), l += 1
                    } else if (o && o.isBufferGeometry) {
                        var v = o.attributes.position,
                            y = o.attributes.normal;
                        for (l = 0, d = 0, f = v.count; d < f; d++) t.set(v.getX(d), v.getY(d), v.getZ(d)).applyMatrix4(r), e.set(y.getX(d), y.getY(d), y.getZ(d)), e.applyMatrix3(n).normalize().multiplyScalar(this.size).add(t), a.setXYZ(l, t.x, t.y, t.z), l += 1, a.setXYZ(l, e.x, e.y, e.z), l += 1
                    } a.needsUpdate = !0
        }
    }(), js.prototype = Object.create(un.prototype), js.prototype.constructor = js, js.prototype.dispose = function() {
        this.cone.geometry.dispose(), this.cone.material.dispose()
    }, js.prototype.update = function() {
        var t = new He,
            e = new He;
        return function() {
            this.light.updateMatrixWorld();
            var n = this.light.distance ? this.light.distance : 1e3,
                i = n * Math.tan(this.light.angle);
            this.cone.scale.set(i, i, n), t.setFromMatrixPosition(this.light.matrixWorld), e.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(e.sub(t)), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color)
        }
    }(), Vs.prototype = Object.create(gr.prototype), Vs.prototype.constructor = Vs, Vs.prototype.updateMatrixWorld = function() {
        var t = new He,
            e = new ze,
            n = new ze;
        return function(i) {
            var r = this.bones,
                a = this.geometry,
                o = a.getAttribute("position");
            n.getInverse(this.root.matrixWorld);
            for (var s = 0, c = 0; s < r.length; s++) {
                var l = r[s];
                l.parent && l.parent.isBone && (e.multiplyMatrices(n, l.matrixWorld), t.setFromMatrixPosition(e), o.setXYZ(c, t.x, t.y, t.z), e.multiplyMatrices(n, l.parent.matrixWorld), t.setFromMatrixPosition(e), o.setXYZ(c + 1, t.x, t.y, t.z), c += 2)
            }
            a.getAttribute("position").needsUpdate = !0, un.prototype.updateMatrixWorld.call(this, i)
        }
    }(), Ws.prototype = Object.create(Hn.prototype), Ws.prototype.constructor = Ws, Ws.prototype.dispose = function() {
        this.geometry.dispose(), this.material.dispose()
    }, Ws.prototype.update = function() {
        void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color)
    }, Ys.prototype = Object.create(un.prototype), Ys.prototype.constructor = Ys, Ys.prototype.dispose = function() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose()
    }, Ys.prototype.update = function() {
        var t = .5 * this.light.width,
            e = .5 * this.light.height,
            n = this.line.geometry.attributes.position,
            i = n.array;
        i[0] = t, i[1] = -e, i[2] = 0, i[3] = t, i[4] = e, i[5] = 0, i[6] = -t, i[7] = e, i[8] = 0, i[9] = -t, i[10] = -e, i[11] = 0, i[12] = t, i[13] = -e, i[14] = 0, n.needsUpdate = !0, void 0 !== this.color ? this.line.material.color.set(this.color) : this.line.material.color.copy(this.light.color)
    }, Xs.prototype = Object.create(un.prototype), Xs.prototype.constructor = Xs, Xs.prototype.dispose = function() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose()
    }, Xs.prototype.update = function() {
        var t = new He,
            e = new rn,
            n = new rn;
        return function() {
            var i = this.children[0];
            if (void 0 !== this.color) this.material.color.set(this.color);
            else {
                var r = i.geometry.getAttribute("color");
                e.copy(this.light.color), n.copy(this.light.groundColor);
                for (var a = 0, o = r.count; a < o; a++) {
                    var s = a < o / 2 ? e : n;
                    r.setXYZ(a, s.r, s.g, s.b)
                }
                r.needsUpdate = !0
            }
            i.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())
        }
    }(), qs.prototype = Object.create(gr.prototype), qs.prototype.constructor = qs, Zs.prototype = Object.create(gr.prototype), Zs.prototype.constructor = Zs, Ks.prototype = Object.create(gr.prototype), Ks.prototype.constructor = Ks, Ks.prototype.update = function() {
        var t = new He,
            e = new He,
            n = new Ge;
        return function() {
            this.object.updateMatrixWorld(!0), n.getNormalMatrix(this.object.matrixWorld);
            for (var i = this.object.matrixWorld, r = this.geometry.attributes.position, a = this.object.geometry, o = a.vertices, s = a.faces, c = 0, l = 0, h = s.length; l < h; l++) {
                var u = s[l],
                    p = u.normal;
                t.copy(o[u.a]).add(o[u.b]).add(o[u.c]).divideScalar(3).applyMatrix4(i), e.copy(p).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t), r.setXYZ(c, t.x, t.y, t.z), c += 1, r.setXYZ(c, e.x, e.y, e.z), c += 1
            }
            r.needsUpdate = !0
        }
    }(), Js.prototype = Object.create(un.prototype), Js.prototype.constructor = Js, Js.prototype.dispose = function() {
        this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose()
    }, Js.prototype.update = function() {
        var t = new He,
            e = new He,
            n = new He;
        return function() {
            t.setFromMatrixPosition(this.light.matrixWorld), e.setFromMatrixPosition(this.light.target.matrixWorld), n.subVectors(e, t), this.lightPlane.lookAt(n), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(n), this.targetLine.scale.z = n.length()
        }
    }(), Qs.prototype = Object.create(gr.prototype), Qs.prototype.constructor = Qs, Qs.prototype.update = function() {
        var t, e, n = new He,
            i = new pn;

        function r(r, a, o, s) {
            n.set(a, o, s).unproject(i);
            var c = e[r];
            if (void 0 !== c)
                for (var l = t.getAttribute("position"), h = 0, u = c.length; h < u; h++) l.setXYZ(c[h], n.x, n.y, n.z)
        }
        return function() {
            t = this.geometry, e = this.pointMap, i.projectionMatrix.copy(this.camera.projectionMatrix), r("c", 0, 0, -1), r("t", 0, 0, 1), r("n1", -1, -1, -1), r("n2", 1, -1, -1), r("n3", -1, 1, -1), r("n4", 1, 1, -1), r("f1", -1, -1, 1), r("f2", 1, -1, 1), r("f3", -1, 1, 1), r("f4", 1, 1, 1), r("u1", .7, 1.1, -1), r("u2", -.7, 1.1, -1), r("u3", 0, 2, -1), r("cf1", -1, 0, 1), r("cf2", 1, 0, 1), r("cf3", 0, -1, 1), r("cf4", 0, 1, 1), r("cn1", -1, 0, -1), r("cn2", 1, 0, -1), r("cn3", 0, -1, -1), r("cn4", 0, 1, -1), t.getAttribute("position").needsUpdate = !0
        }
    }(), $s.prototype = Object.create(gr.prototype), $s.prototype.constructor = $s, $s.prototype.update = function() {
        var t = new Ke;
        return function(e) {
            if (void 0 !== e && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && t.setFromObject(this.object), !t.isEmpty()) {
                var n = t.min,
                    i = t.max,
                    r = this.geometry.attributes.position,
                    a = r.array;
                a[0] = i.x, a[1] = i.y, a[2] = i.z, a[3] = n.x, a[4] = i.y, a[5] = i.z, a[6] = n.x, a[7] = n.y, a[8] = i.z, a[9] = i.x, a[10] = n.y, a[11] = i.z, a[12] = i.x, a[13] = i.y, a[14] = n.z, a[15] = n.x, a[16] = i.y, a[17] = n.z, a[18] = n.x, a[19] = n.y, a[20] = n.z, a[21] = i.x, a[22] = n.y, a[23] = n.z, r.needsUpdate = !0, this.geometry.computeBoundingSphere()
            }
        }
    }(), $s.prototype.setFromObject = function(t) {
        return this.object = t, this.update(), this
    }, tc.prototype = Object.create(gr.prototype), tc.prototype.constructor = tc, tc.prototype.updateMatrixWorld = function(t) {
        var e = this.box;
        e.isEmpty() || (e.getCenter(this.position), e.getSize(this.scale), this.scale.multiplyScalar(.5), un.prototype.updateMatrixWorld.call(this, t))
    }, ec.prototype = Object.create(mr.prototype), ec.prototype.constructor = ec, ec.prototype.updateMatrixWorld = function(t) {
        var e = -this.plane.constant;
        Math.abs(e) < 1e-8 && (e = 1e-8), this.scale.set(.5 * this.size, .5 * this.size, e), this.children[0].material.side = e < 0 ? g : m, this.lookAt(this.plane.normal), un.prototype.updateMatrixWorld.call(this, t)
    }, nc.prototype = Object.create(un.prototype), nc.prototype.constructor = nc, nc.prototype.setDirection = function() {
        var t, e = new He;
        return function(n) {
            n.y > .99999 ? this.quaternion.set(0, 0, 0, 1) : n.y < -.99999 ? this.quaternion.set(1, 0, 0, 0) : (e.set(n.z, 0, -n.x).normalize(), t = Math.acos(n.y), this.quaternion.setFromAxisAngle(e, t))
        }
    }(), nc.prototype.setLength = function(t, e, n) {
        void 0 === e && (e = .2 * t), void 0 === n && (n = .2 * e), this.line.scale.set(1, Math.max(0, t - e), 1), this.line.updateMatrix(), this.cone.scale.set(n, e, n), this.cone.position.y = t, this.cone.updateMatrix()
    }, nc.prototype.setColor = function(t) {
        this.line.material.color.copy(t), this.cone.material.color.copy(t)
    }, ic.prototype = Object.create(gr.prototype), ic.prototype.constructor = ic;
    var ac = 0,
        oc = 1;

    function sc(t) {
        return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."), t
    }

    function cc(t) {
        return void 0 === t && (t = []), console.warn("THREE.MultiMaterial has been removed. Use an Array instead."), t.isMultiMaterial = !0, t.materials = t, t.clone = function() {
            return t.slice()
        }, t
    }

    function lc(t, e) {
        return console.warn("THREE.PointCloud has been renamed to THREE.Points."), new xr(t, e)
    }

    function hc(t) {
        return console.warn("THREE.Particle has been renamed to THREE.Sprite."), new lr(t)
    }

    function uc(t, e) {
        return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."), new xr(t, e)
    }

    function pc(t) {
        return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."), new yr(t)
    }

    function dc(t) {
        return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."), new yr(t)
    }

    function fc(t) {
        return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."), new yr(t)
    }

    function mc(t, e, n) {
        return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."), new He(t, e, n)
    }

    function gc(t, e) {
        return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."), new vn(t, e).setDynamic(!0)
    }

    function vc(t, e) {
        return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."), new yn(t, e)
    }

    function yc(t, e) {
        return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."), new xn(t, e)
    }

    function xc(t, e) {
        return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."), new wn(t, e)
    }

    function wc(t, e) {
        return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."), new bn(t, e)
    }

    function bc(t, e) {
        return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."), new Mn(t, e)
    }

    function Mc(t, e) {
        return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."), new _n(t, e)
    }

    function _c(t, e) {
        return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."), new Sn(t, e)
    }

    function Sc(t, e) {
        return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."), new En(t, e)
    }

    function Ec(t, e) {
        return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."), new Tn(t, e)
    }

    function Tc(t) {
        console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), ho.call(this, t), this.type = "catmullrom", this.closed = !0
    }

    function Ac(t) {
        console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), ho.call(this, t), this.type = "catmullrom"
    }

    function Lc(t) {
        console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."), ho.call(this, t), this.type = "catmullrom"
    }

    function Rc(t) {
        return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."), new ic(t)
    }

    function Pc(t, e) {
        return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."), new $s(t, e)
    }

    function Cc(t, e) {
        return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."), new gr(new La(t.geometry), new fr({
            color: void 0 !== e ? e : 16777215
        }))
    }

    function Ic(t, e) {
        return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."), new gr(new Sr(t.geometry), new fr({
            color: void 0 !== e ? e : 16777215
        }))
    }

    function Oc(t) {
        return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."), new Ka(t)
    }

    function Dc(t) {
        return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."), new Qa(t)
    }
    no.create = function(t, e) {
        return console.log("THREE.Curve.create() has been deprecated"), t.prototype = Object.create(no.prototype), t.prototype.constructor = t, t.prototype.getPoint = e, t
    }, Object.assign(_o.prototype, {
        createPointsGeometry: function(t) {
            console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            var e = this.getPoints(t);
            return this.createGeometry(e)
        },
        createSpacedPointsGeometry: function(t) {
            console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            var e = this.getSpacedPoints(t);
            return this.createGeometry(e)
        },
        createGeometry: function(t) {
            console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            for (var e = new gn, n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                e.vertices.push(new He(r.x, r.y, r.z || 0))
            }
            return e
        }
    }), Object.assign(So.prototype, {
        fromPoints: function(t) {
            console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(t)
        }
    }), Tc.prototype = Object.create(ho.prototype), Ac.prototype = Object.create(ho.prototype), Lc.prototype = Object.create(ho.prototype), Object.assign(Lc.prototype, {
        initFromArray: function() {
            console.error("THREE.Spline: .initFromArray() has been removed.")
        },
        getControlPointsArray: function() {
            console.error("THREE.Spline: .getControlPointsArray() has been removed.")
        },
        reparametrizeByArcLength: function() {
            console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")
        }
    }), qs.prototype.setColors = function() {
        console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")
    }, Vs.prototype.update = function() {
        console.error("THREE.SkeletonHelper: update() no longer needs to be called.")
    }, Object.assign(ts.prototype, {
        extractUrlBase: function(t) {
            return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), es.extractUrlBase(t)
        }
    }), Object.assign(zs.prototype, {
        center: function(t) {
            return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(t)
        },
        empty: function() {
            return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty()
        },
        isIntersectionBox: function(t) {
            return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t)
        },
        size: function(t) {
            return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(t)
        }
    }), Object.assign(Ke.prototype, {
        center: function(t) {
            return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(t)
        },
        empty: function() {
            return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty()
        },
        isIntersectionBox: function(t) {
            return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t)
        },
        isIntersectionSphere: function(t) {
            return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t)
        },
        size: function(t) {
            return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(t)
        }
    }), Fs.prototype.center = function(t) {
        return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(t)
    }, Object.assign(ke, {
        random16: function() {
            return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random()
        },
        nearestPowerOfTwo: function(t) {
            return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), ke.floorPowerOfTwo(t)
        },
        nextPowerOfTwo: function(t) {
            return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), ke.ceilPowerOfTwo(t)
        }
    }), Object.assign(Ge.prototype, {
        flattenToArrayOffset: function(t, e) {
            return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e)
        },
        multiplyVector3: function(t) {
            return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), t.applyMatrix3(this)
        },
        multiplyVector3Array: function() {
            console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")
        },
        applyToBuffer: function(t) {
            return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."), this.applyToBufferAttribute(t)
        },
        applyToVector3Array: function() {
            console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")
        }
    }), Object.assign(ze.prototype, {
        extractPosition: function(t) {
            return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(t)
        },
        flattenToArrayOffset: function(t, e) {
            return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e)
        },
        getPosition: function() {
            var t;
            return function() {
                return void 0 === t && (t = new He), console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), t.setFromMatrixColumn(this, 3)
            }
        }(),
        setRotationFromQuaternion: function(t) {
            return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(t)
        },
        multiplyToArray: function() {
            console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")
        },
        multiplyVector3: function(t) {
            return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this)
        },
        multiplyVector4: function(t) {
            return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this)
        },
        multiplyVector3Array: function() {
            console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")
        },
        rotateAxis: function(t) {
            console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), t.transformDirection(this)
        },
        crossVector: function(t) {
            return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this)
        },
        translate: function() {
            console.error("THREE.Matrix4: .translate() has been removed.")
        },
        rotateX: function() {
            console.error("THREE.Matrix4: .rotateX() has been removed.")
        },
        rotateY: function() {
            console.error("THREE.Matrix4: .rotateY() has been removed.")
        },
        rotateZ: function() {
            console.error("THREE.Matrix4: .rotateZ() has been removed.")
        },
        rotateByAxis: function() {
            console.error("THREE.Matrix4: .rotateByAxis() has been removed.")
        },
        applyToBuffer: function(t) {
            return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."), this.applyToBufferAttribute(t)
        },
        applyToVector3Array: function() {
            console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")
        },
        makeFrustum: function(t, e, n, i, r, a) {
            return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(t, e, i, n, r, a)
        }
    }), Qe.prototype.isIntersectionLine = function(t) {
        return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(t)
    }, Fe.prototype.multiplyVector3 = function(t) {
        return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), t.applyQuaternion(this)
    }, Object.assign(zn.prototype, {
        isIntersectionBox: function(t) {
            return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t)
        },
        isIntersectionPlane: function(t) {
            return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(t)
        },
        isIntersectionSphere: function(t) {
            return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t)
        }
    }), Object.assign(Fn.prototype, {
        area: function() {
            return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea()
        },
        barycoordFromPoint: function(t, e) {
            return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(t, e)
        },
        midpoint: function(t) {
            return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(t)
        },
        normal: function(t) {
            return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(t)
        },
        plane: function(t) {
            return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(t)
        }
    }), Object.assign(Fn, {
        barycoordFromPoint: function(t, e, n, i, r) {
            return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), Fn.getBarycoord(t, e, n, i, r)
        },
        normal: function(t, e, n, i) {
            return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), Fn.getNormal(t, e, n, i)
        }
    }), Object.assign(Eo.prototype, {
        extractAllPoints: function(t) {
            return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(t)
        },
        extrude: function(t) {
            return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new da(this, t)
        },
        makeGeometry: function(t) {
            return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Ea(this, t)
        }
    }), Object.assign(Ue.prototype, {
        fromAttribute: function(t, e, n) {
            return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n)
        },
        distanceToManhattan: function(t) {
            return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t)
        },
        lengthManhattan: function() {
            return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength()
        }
    }), Object.assign(He.prototype, {
        setEulerFromRotationMatrix: function() {
            console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")
        },
        setEulerFromQuaternion: function() {
            console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")
        },
        getPositionFromMatrix: function(t) {
            return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(t)
        },
        getScaleFromMatrix: function(t) {
            return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(t)
        },
        getColumnFromMatrix: function(t, e) {
            return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e, t)
        },
        applyProjection: function(t) {
            return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(t)
        },
        fromAttribute: function(t, e, n) {
            return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n)
        },
        distanceToManhattan: function(t) {
            return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t)
        },
        lengthManhattan: function() {
            return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength()
        }
    }), Object.assign(Ye.prototype, {
        fromAttribute: function(t, e, n) {
            return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n)
        },
        lengthManhattan: function() {
            return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength()
        }
    }), Object.assign(gn.prototype, {
        computeTangents: function() {
            console.error("THREE.Geometry: .computeTangents() has been removed.")
        },
        computeLineDistances: function() {
            console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")
        }
    }), Object.assign(un.prototype, {
        getChildByName: function(t) {
            return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(t)
        },
        renderDepth: function() {
            console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")
        },
        translate: function(t, e) {
            return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e, t)
        },
        getWorldRotation: function() {
            console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")
        }
    }), Object.defineProperties(un.prototype, {
        eulerOrder: {
            get: function() {
                return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order
            },
            set: function(t) {
                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = t
            }
        },
        useQuaternion: {
            get: function() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
            },
            set: function() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
            }
        }
    }), Object.defineProperties(hr.prototype, {
        objects: {
            get: function() {
                return console.warn("THREE.LOD: .objects has been renamed to .levels."), this.levels
            }
        }
    }), Object.defineProperty(ur.prototype, "useVertexTexture", {
        get: function() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.")
        },
        set: function() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.")
        }
    }), Object.defineProperty(no.prototype, "__arcLengthDivisions", {
        get: function() {
            return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions
        },
        set: function(t) {
            console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions = t
        }
    }), $i.prototype.setLens = function(t, e) {
        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== e && (this.filmGauge = e), this.setFocalLength(t)
    }, Object.defineProperties(To.prototype, {
        onlyShadow: {
            set: function() {
                console.warn("THREE.Light: .onlyShadow has been removed.")
            }
        },
        shadowCameraFov: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = t
            }
        },
        shadowCameraLeft: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = t
            }
        },
        shadowCameraRight: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = t
            }
        },
        shadowCameraTop: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = t
            }
        },
        shadowCameraBottom: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = t
            }
        },
        shadowCameraNear: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = t
            }
        },
        shadowCameraFar: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = t
            }
        },
        shadowCameraVisible: {
            set: function() {
                console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")
            }
        },
        shadowBias: {
            set: function(t) {
                console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = t
            }
        },
        shadowDarkness: {
            set: function() {
                console.warn("THREE.Light: .shadowDarkness has been removed.")
            }
        },
        shadowMapWidth: {
            set: function(t) {
                console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = t
            }
        },
        shadowMapHeight: {
            set: function(t) {
                console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = t
            }
        }
    }), Object.defineProperties(vn.prototype, {
        length: {
            get: function() {
                return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length
            }
        },
        copyIndicesArray: function() {
            console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")
        }
    }), Object.assign(Pn.prototype, {
        addIndex: function(t) {
            console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(t)
        },
        addDrawCall: function(t, e, n) {
            void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(t, e)
        },
        clearDrawCalls: function() {
            console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups()
        },
        computeTangents: function() {
            console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")
        },
        computeOffsets: function() {
            console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")
        }
    }), Object.defineProperties(Pn.prototype, {
        drawcalls: {
            get: function() {
                return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups
            }
        },
        offsets: {
            get: function() {
                return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups
            }
        }
    }), Object.assign(fa.prototype, {
        getArrays: function() {
            console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")
        },
        addShapeList: function() {
            console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")
        },
        addShape: function() {
            console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")
        }
    }), Object.defineProperties(Rs.prototype, {
        dynamic: {
            set: function() {
                console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")
            }
        },
        onUpdate: {
            value: function() {
                return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this
            }
        }
    }), Object.defineProperties(Nn.prototype, {
        wrapAround: {
            get: function() {
                console.warn("THREE.Material: .wrapAround has been removed.")
            },
            set: function() {
                console.warn("THREE.Material: .wrapAround has been removed.")
            }
        },
        wrapRGB: {
            get: function() {
                return console.warn("THREE.Material: .wrapRGB has been removed."), new rn
            }
        },
        shading: {
            get: function() {
                console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.")
            },
            set: function(t) {
                console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = t === y
            }
        }
    }), Object.defineProperties(Fa.prototype, {
        metal: {
            get: function() {
                return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."), !1
            },
            set: function() {
                console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")
            }
        }
    }), Object.defineProperties(Un.prototype, {
        derivatives: {
            get: function() {
                return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives
            },
            set: function(t) {
                console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = t
            }
        }
    }), Object.assign(nr.prototype, {
        animate: function(t) {
            console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(t)
        },
        getCurrentRenderTarget: function() {
            return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget()
        },
        getMaxAnisotropy: function() {
            return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy()
        },
        getPrecision: function() {
            return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision
        },
        resetGLState: function() {
            return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset()
        },
        supportsFloatTextures: function() {
            return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float")
        },
        supportsHalfFloatTextures: function() {
            return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float")
        },
        supportsStandardDerivatives: function() {
            return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives")
        },
        supportsCompressedTextureS3TC: function() {
            return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc")
        },
        supportsCompressedTexturePVRTC: function() {
            return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc")
        },
        supportsBlendMinMax: function() {
            return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax")
        },
        supportsVertexTextures: function() {
            return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures
        },
        supportsInstancedArrays: function() {
            return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays")
        },
        enableScissorTest: function(t) {
            console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(t)
        },
        initMaterial: function() {
            console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")
        },
        addPrePlugin: function() {
            console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")
        },
        addPostPlugin: function() {
            console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")
        },
        updateShadowMap: function() {
            console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")
        },
        setFaceCulling: function() {
            console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")
        }
    }), Object.defineProperties(nr.prototype, {
        shadowMapEnabled: {
            get: function() {
                return this.shadowMap.enabled
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = t
            }
        },
        shadowMapType: {
            get: function() {
                return this.shadowMap.type
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = t
            }
        },
        shadowMapCullFace: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
            }
        }
    }), Object.defineProperties(Zi.prototype, {
        cullFace: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
            }
        },
        renderReverseSided: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
            }
        },
        renderSingleSided: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
            }
        }
    }), Object.defineProperties(Xe.prototype, {
        wrapS: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = t
            }
        },
        wrapT: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = t
            }
        },
        magFilter: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = t
            }
        },
        minFilter: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = t
            }
        },
        anisotropy: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = t
            }
        },
        offset: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = t
            }
        },
        repeat: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = t
            }
        },
        format: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = t
            }
        },
        type: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = t
            }
        },
        generateMipmaps: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = t
            }
        }
    }), Object.defineProperties(er.prototype, {
        standing: {
            set: function() {
                console.warn("THREE.WebVRManager: .standing has been removed.")
            }
        }
    }), ws.prototype.load = function(t) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
        var e = this;
        return (new gs).load(t, function(t) {
            e.setBuffer(t)
        }), this
    }, Ms.prototype.getData = function() {
        return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData()
    }, ys.prototype.updateCubeMap = function(t, e) {
        return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(t, e)
    };
    var Bc = {
        merge: function(t, e, n) {
            var i;
            console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."), e.isMesh && (e.matrixAutoUpdate && e.updateMatrix(), i = e.matrix, e = e.geometry), t.merge(e, i, n)
        },
        center: function(t) {
            return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."), t.center()
        }
    };

    function Nc() {
        console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."), this.projectVector = function(t, e) {
            console.warn("THREE.Projector: .projectVector() is now vector.project()."), t.project(e)
        }, this.unprojectVector = function(t, e) {
            console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."), t.unproject(e)
        }, this.pickingRay = function() {
            console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")
        }
    }

    function kc() {
        console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"), this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), this.clear = function() {}, this.render = function() {}, this.setClearColor = function() {}, this.setSize = function() {}
    }
    je.crossOrigin = void 0, je.loadTexture = function(t, e, n, i) {
        console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
        var r = new eo;
        r.setCrossOrigin(this.crossOrigin);
        var a = r.load(t, n, void 0, i);
        return e && (a.mapping = e), a
    }, je.loadTextureCube = function(t, e, n, i) {
        console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
        var r = new to;
        r.setCrossOrigin(this.crossOrigin);
        var a = r.load(t, n, void 0, i);
        return e && (a.mapping = e), a
    }, je.loadCompressedTexture = function() {
        console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")
    }, je.loadCompressedTextureCube = function() {
        console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")
    };
    var Uc = {
        createMultiMaterialObject: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
        },
        detach: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
        },
        attach: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
        }
    };

    function zc() {
        console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")
    }
}, function(t, e) {
    t.exports.keyboardMap = "   CANCEL   HELP  BACK_SPACE TAB   CLEAR ENTER ENTER_SPECIAL  SHIFT CONTROL ALT PAUSE CAPS_LOCK KANA EISU JUNJA FINAL HANJA  ESCAPE CONVERT NONCONVERT ACCEPT MODECHANGE SPACE PAGE_UP PAGE_DOWN END HOME LEFT UP RIGHT DOWN SELECT PRINT EXECUTE PRINTSCREEN INSERT DELETE  0 1 2 3 4 5 6 7 8 9 COLON SEMICOLON LESS_THAN EQUALS GREATER_THAN QUESTION_MARK AT A B C D E F G H I J K L M N O P Q R S T U V W X Y Z OS_KEY  CONTEXT_MENU  SLEEP NUMPAD0 NUMPAD1 NUMPAD2 NUMPAD3 NUMPAD4 NUMPAD5 NUMPAD6 NUMPAD7 NUMPAD8 NUMPAD9 MULTIPLY ADD SEPARATOR SUBTRACT DECIMAL DIVIDE F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24         NUM_LOCK SCROLL_LOCK WIN_OEM_FJ_JISHO WIN_OEM_FJ_MASSHOU WIN_OEM_FJ_TOUROKU WIN_OEM_FJ_LOYA WIN_OEM_FJ_ROYA          CIRCUMFLEX EXCLAMATION DOUBLE_QUOTE HASH DOLLAR PERCENT AMPERSAND UNDERSCORE OPEN_PAREN CLOSE_PAREN ASTERISK PLUS PIPE HYPHEN_MINUS OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET TILDE     VOLUME_MUTE VOLUME_DOWN VOLUME_UP   SEMICOLON EQUALS COMMA MINUS PERIOD SLASH BACK_QUOTE                           OPEN_BRACKET BACK_SLASH CLOSE_BRACKET QUOTE  META ALTGR  WIN_ICO_HELP WIN_ICO_00  WIN_ICO_CLEAR   WIN_OEM_RESET WIN_OEM_JUMP WIN_OEM_PA1 WIN_OEM_PA2 WIN_OEM_PA3 WIN_OEM_WSCTRL WIN_OEM_CUSEL WIN_OEM_ATTN WIN_OEM_FINISH WIN_OEM_COPY WIN_OEM_AUTO WIN_OEM_ENLW WIN_OEM_BACKTAB ATTN CRSEL EXSEL EREOF PLAY ZOOM  PA1 WIN_OEM_CLEAR ".split(" "), Number.prototype.round = function(t) {
        return +this.toFixed(t)
    }, String.prototype.escape = function() {
        return (this + "").replace(/[\\"']/g, "\\$&").replace(/\u0000/g, "\\0")
    }, Number.prototype.roundToNearest = function(t) {
        return this > 0 ? Math.ceil(this / t) * t : this < 0 ? Math.floor(this / t) * t : this
    }, t.exports.countInArray = function(t, e) {
        for (var n = 0, i = 0; i < t.length; i++) t[i] === e && n++;
        return n
    }, t.exports.formatNum = function(t) {
        var e = Math.floor(Math.log(Math.abs(t)) / Math.log(1e3)),
            n = "kmb" [e - 1];
        return n ? (t / Math.pow(1e3, e)).toFixed(1) + n : "" + t
    }, t.exports.randInt = function(t, e) {
        return Math.floor(Math.random() * (e - t + 1)) + t
    }, t.exports.randFloat = function(t, e) {
        return Math.random() * (e - t) + t
    }, t.exports.getRandom = function(e) {
        return e[t.exports.randInt(0, e.length - 1)]
    }, t.exports.getDistance = function(t, e, n, i) {
        return Math.sqrt((n -= t) * n + (i -= e) * i)
    }, t.exports.getDistance3D = function(t, e, n, i, r, a) {
        var o = t - i,
            s = e - r,
            c = n - a;
        return Math.sqrt(o * o + s * s + c * c)
    }, t.exports.getAnglesSSS = function(t, e, n) {
        var i = Math.acos((e * e + n * n - t * t) / (2 * e * n)),
            r = Math.acos((n * n + t * t - e * e) / (2 * n * t)),
            a = Math.PI - i - r;
        return [-i - Math.PI / 2, r, a]
    }, t.exports.getXDir = function(e, n, i, r, a, o) {
        var s = Math.abs(n - a),
            c = t.exports.getDistance3D(e, n, i, r, a, o);
        return Math.asin(s / c) * (n > a ? -1 : 1)
    }, t.exports.getAngleDist = function(t, e) {
        return Math.atan2(Math.sin(e - t), Math.cos(t - e))
    }, t.exports.toRad = function(t) {
        return t * (Math.PI / 180)
    }, t.exports.getDirection = function(t, e, n, i) {
        return Math.atan2(e - i, t - n)
    }, t.exports.lerp = function(t, e, n) {
        return t + (e - t) * n
    }, t.exports.orderByScore = function(t, e) {
        return e.score - t.score
    }, t.exports.orderByKills = function(t, e) {
        return e.kills - t.kills
    }, t.exports.orderByDst = function(t, e) {
        return t.dst - e.dst
    }, t.exports.orderByNum = function(t, e) {
        return t - e
    }, t.exports.capFirst = function(t) {
        return t.charAt(0).toUpperCase() + t.slice(1)
    }, t.exports.truncateText = function(t, e) {
        return t.length > e ? t.substring(0, e) + "..." : t
    }, t.exports.randomString = function(t) {
        for (var e = "", n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", i = 0; i < t; i++) e += n.charAt(Math.floor(Math.random() * n.length));
        return e
    }, t.exports.formatNumCash = function(t) {
        return parseFloat(Math.round(100 * t) / 100).toFixed(2)
    }, t.exports.getKeyName = function(e) {
        return t.exports.keyboardMap[e]
    }, t.exports.getTime = function(t) {
        var e = Math.floor(t / 6e4),
            n = (t % 6e4 / 1e3).toFixed(0);
        return e + ":" + (n < 10 ? "0" : "") + n
    }, t.exports.getReadableTime = function(t) {
        var e = t / 1e3 / 60,
            n = parseInt(e % 60);
        e /= 60;
        var i = parseInt(e % 24);
        e /= 24;
        var r = parseInt(e);
        return (r ? r + "d " : "") + (i ? i + "h " : "") + (n || 0) + "m "
    }, t.exports.fixTo = function(t, e) {
        return parseFloat(t.toFixed(e))
    }, t.exports.limit = function(t, e) {
        return t < -e ? -e : t > e ? e : t
    }, t.exports.limitMM = function(t, e, n) {
        return t < e ? e : t > n ? n : t
    }, t.exports.cropVal = function(t, e) {
        return t <= e && t >= -e ? 0 : t
    }, t.exports.isNumber = function(t) {
        return null !== t && void 0 !== t && "number" == typeof t && !isNaN(t) && isFinite(t)
    }, t.exports.arrayInts = function(e) {
        for (var n = 0; n < e.length; ++n)
            if (!t.exports.isNumber(e[n])) return !1;
        return !0
    }, t.exports.isArray = function(t) {
        return !!t && t.constructor === Array
    }, t.exports.isString = function(t) {
        return t && "string" == typeof t
    }, t.exports.lineInRect = function(t, e, n, i, r, a, o, s, c, l, h, u) {
        var p = (o - t) * i,
            d = (l - t) * i,
            f = (c - n) * a,
            m = (u - n) * a,
            g = (s - e) * r,
            v = (h - e) * r,
            y = Math.max(Math.max(Math.min(p, d), Math.min(f, m)), Math.min(g, v)),
            x = Math.min(Math.min(Math.max(p, d), Math.max(f, m)), Math.max(g, v));
        return !(x < 0) && !(y > x) && y
    }, t.exports.pointInBox3D = function(t, e, n, i) {
        return t >= i.x - i.width && t <= i.x + i.width && e >= i.y - i.height && e <= i.y + i.height && n >= i.z - i.length && n <= i.z + i.length
    }, t.exports.pointInBox = function(t, e, n, i, r, a, o) {
        return o ? t >= n && t <= r && e >= i && e <= a : t > n && t < r && e > i && e < a
    }, t.exports.sharePos = function(t, e, n) {
        return n = n || 0, Math.abs(t.x - e.x) <= n && Math.abs(t.y - e.y) <= n && Math.abs(t.z - e.z) <= n && Math.abs(t.d - e.d) <= n
    }, t.exports.cdv = {
        x: "width",
        y: "height",
        z: "length"
    }, t.exports.boxIntersection = function(e, n, i, r, a) {
        var o = t.exports.cdv[i],
            s = t.exports.cdv[r],
            c = e[i] - e[o] - .1,
            l = n[i] - n[o] - .1,
            h = e[i] + e[o] + .1,
            u = n[i] + n[o] + .1,
            p = e[r] - e[s] - .1,
            d = n[r] - n[s] - .1,
            f = e[r] + e[s] + .1,
            m = n[r] + n[s] + .1,
            g = Math.max(c, l),
            v = Math.min(h, u);
        if (v >= g) {
            var y = Math.max(p, d),
                x = Math.min(f, m);
            if (x >= y) {
                for (var w = [{
                        [i]: g,
                        [r]: y,
                        d: a[0]
                    }, {
                        [i]: v,
                        [r]: x,
                        d: a[1]
                    }, {
                        [i]: g,
                        [r]: x,
                        d: a[2]
                    }, {
                        [i]: v,
                        [r]: y,
                        d: a[3]
                    }], b = w.length - 1; b >= 0; --b)(w[b][i] == h && w[b][i] == u || w[b][i] == c && w[b][i] == l || w[b][r] == f && w[b][r] == m || w[b][r] == p && w[b][r] == d || t.exports.pointInBox(w[b][i], w[b][r], c, p, h, f) || t.exports.pointInBox(w[b][i], w[b][r], l, d, u, m)) && w.splice(b, 1);
                return w.length ? w : null
            }
        }
        return null
    }, t.exports.boxCornerIntersection = function(e, n, i, r) {
        for (var a = t.exports.cdv[i], o = t.exports.cdv[r], s = e[i] - e[a], c = n[i] - n[a], l = e[i] + e[a], h = n[i] + n[a], u = e[r] - e[o], p = n[r] - n[o], d = e[r] + e[o], f = n[r] + n[o], m = [{
                [i]: s,
                [r]: u,
                d: Math.PI / 2
            }, {
                [i]: s,
                [r]: d,
                d: Math.PI
            }, {
                [i]: l,
                [r]: u,
                d: 0
            }, {
                [i]: l,
                [r]: d,
                d: -Math.PI / 2
            }], g = m.length - 1; g >= 0; --g) m[g].i = g, t.exports.pointInBox(m[g][i], m[g][r], c, p, h, f, !0) || m.splice(g, 1);
        return m.length ? m : null
    }, t.exports.getIntersection = function(e, n, i) {
        var r = t.exports.cdv[i],
            a = e[i] - e[r],
            o = n[i] - n[r],
            s = e[i] + e[r],
            c = n[i] + n[r],
            l = Math.max(a, o),
            h = Math.min(s, c);
        if (h >= l) {
            var u = (h - l) / 2;
            return {
                [i]: l + u,
                [r]: u
            }
        }
        return null
    }, t.exports.limitRectVal = function(e, n, i) {
        var r = t.exports.cdv[i];
        if (e[i] - e[r] < n[i] - n[r]) {
            var a = (n[i] - n[r] - (e[i] - e[r])) / 2;
            e[r] -= a, e[i] += a
        }
        e[i] + e[r] > n[i] + n[r] && (a = (e[i] + e[r] - (n[i] + n[r])) / 2, e[r] -= a, e[i] -= a)
    }, t.exports.limitRect = function(e, n, i, r, a, o, s, c) {
        var l = t.exports.cdv[s],
            h = t.exports.cdv[c],
            u = {};
        if (u[s] = e, u[c] = n, u[l] = i, u[h] = r, t.exports.limitRectVal(u, o, s), t.exports.limitRectVal(u, o, c), 0 == a || a == Math.PI) {
            var p = u[l];
            u[l] = u[h], u[h] = p
        }
        return u
    }, t.exports.progressOnLine = function(t, e, n, i, r, a) {
        var o = n - t,
            s = i - e,
            c = Math.sqrt(o * o + s * s);
        return ((o /= c) * (r - t) + (s /= c) * (a - e)) / Math.sqrt(Math.pow(n - t, 2) + Math.pow(i - e, 2))
    }, t.exports.generateSID = function(t) {
        for (var e = 0, n = !0; n;) {
            n = !1, e++;
            for (var i = 0; i < t.length; ++i)
                if (t[i].sid == e) {
                    n = !0;
                    break
                }
        }
        return e
    };
    var n = function(t, e) {
        return t.concat(e)
    };
    Array.prototype.flatMap = function(t) {
        return function(t, e) {
            return e.map(t).reduce(n, [])
        }(t, this)
    }
}, function(t, e, n) {
    var i = n(5);
    e.createCodec = s, e.install = function(t) {
        for (var e in t) a.prototype[e] = o(a.prototype[e], t[e])
    }, e.filter = function(t) {
        return i(t) ? function(t) {
            return t = t.slice(),
                function(n) {
                    return t.reduce(e, n)
                };

            function e(t, e) {
                return e(t)
            }
        }(t) : t
    };
    var r = n(0);

    function a(t) {
        if (!(this instanceof a)) return new a(t);
        this.options = t, this.init()
    }

    function o(t, e) {
        return t && e ? function() {
            return t.apply(this, arguments), e.apply(this, arguments)
        } : t || e
    }

    function s(t) {
        return new a(t)
    }
    a.prototype.init = function() {
        var t = this.options;
        return t && t.uint8array && (this.bufferish = r.Uint8Array), this
    }, e.preset = s({
        preset: !0
    })
}, function(t, e) {
    var n = {}.toString;
    t.exports = Array.isArray || function(t) {
        return "[object Array]" == n.call(t)
    }
}, function(t, e, n) {
    var i = n(2);
    const r = n(1);
    n(3);
    var a, o = {};
    t.exports.getColor = function(t, e) {
        var n = t + "-" + (e || ""),
            r = o[n];
        return r || (r = new i.Color(t), e && r.multiplyScalar(e), o[n] = r), r
    }, t.exports.colorize = function(e, n, i) {
        n = i || t.exports.getColor(n);
        for (var r = 0; r < e.faces.length; ++r) e.faces[r].vertexColors[0] = n, e.faces[r].vertexColors[1] = n, e.faces[r].vertexColors[2] = n
    };
    var s = function(t, e, n, r) {
            for (var a = new i.Vector2(e, n).multiplyScalar(r || 1), o = 0; o < t.faceVertexUvs.length; o++)
                for (var s = t.faceVertexUvs[o], c = 0; c < s.length; c++)
                    for (var l = 0; l < 3; l++) {
                        var h = s[c][l].multiply(a);
                        h.x = .5 + h.x - a.x / 2
                    }
        },
        c = function(t, e, n, i, r, a) {
            return t >= n - r && t <= n + r && e >= i - a && e <= i + a
        },
        l = [],
        h = ["a", "b", "c", "d"];
    t.exports.generatePlane = function(e, n, o) {
        e *= o.ratio || 1;
        var u = (o.scale ? e + "_" + n + "_" : "") + (o.scale || "") + (o.tilesX || "") + (o.tilesZ || "") + (void 0 != o.colr ? o.colr : "");
        if (!(a = l[u])) {
            if (a = new i.PlaneGeometry(1, 1, o.tilesX || 1, o.tilesZ || 1), o.noise) {
                for (var p = {}, d = o.margin || 0, f = 0; f < a.vertices.length; ++f) {
                    var m = a.vertices[f].x,
                        g = a.vertices[f].y;
                    if (!o.pinEdges || -.5 != m && .5 != m && -.5 != g && .5 != g)
                        if (o.objects) {
                            for (var v = 0; v < o.objects.length; ++v)
                                if (o.objects[v].y - o.objects[v].height <= .1 && 2 * o.objects[v].height > o.noise && c(-g * e * 2, m * n * 2, o.objects[v].z, o.objects[v].x, o.objects[v].length + d, o.objects[v].width + d)) {
                                    a.vertices[f].z = Math.random() * o.noise + 1, p[f] = t.exports.getColor(o.colr, .65);
                                    break
                                }
                        } else a.vertices[f].z = Math.random() * o.noise;
                    p[f] || (p[f] = t.exports.getColor(o.colr))
                }
                for (f = 0; f < a.faces.length; f++) {
                    for (var y = a.faces[f], x = 0, w = 0; w < 3; w++) y.vertexColors[w] = p[y[h[w]]], a.vertices[y[h[w]]].z <= 0 && x++;
                    x >= 3 && delete a.faces[f]
                }
                a.faces = a.faces.filter(function(t) {
                    return t
                }), a.elementsNeedUpdate = !0
            } else o.colr && t.exports.colorize(a, o.colr);
            o.scale && s(a, n / r.worldUV, e / r.worldUV, o.scale), l[u] = a
        }
        return a
    };
    var u = [];
    t.exports.generateCube = function(e, n, o, c, l) {
        e = e || [1, 1, 1, 1, 1, 1];
        for (var h = (l.scale ? n + "_" + o + "_" + c + "_" : "") + (void 0 != l.colr ? l.colr : "") + (l.scale || "") + (l.amb || "") + (l.useScale || ""), p = 0; p < e.length; ++p) h += "_" + e[p];
        if (!(a = u[h])) {
            l.colr = void 0 != l.colr ? l.colr : 16777215;
            var d = t.exports.getColor(l.colr),
                f = l.noAmb ? d : l.amb ? t.exports.getColor(l.colr, r.ambientVal + l.amb * (1 - r.ambientVal)) : d;
            a = new i.Geometry;
            var m, g = [];
            for (e[0] && ((m = new i.PlaneGeometry(1, 1)).rotateY(Math.PI / 2), m.translate(.5, .5, 0), m.faces[0].vertexColors = [d, f, d], m.faces[1].vertexColors = [f, f, d], l.scale && s(m, c / r.worldUV, o / r.worldUV, l.scale), g.push(m)), e[1] && ((m = new i.PlaneGeometry(1, 1)).rotateY(-Math.PI / 2), m.translate(-.5, .5, 0), m.faces[0].vertexColors = [d, f, d], m.faces[1].vertexColors = [f, f, d], l.scale && s(m, c / r.worldUV, o / r.worldUV, l.scale), g.push(m)), e[2] && ((m = new i.PlaneGeometry(1, 1)).rotateX(-Math.PI / 2), m.translate(0, 1, 0), m.faces[0].vertexColors = [d, d, d], m.faces[1].vertexColors = [d, d, d], l.scale && s(m, n / r.worldUV, c / r.worldUV, l.scale), g.push(m)), e[3] && ((m = new i.PlaneGeometry(1, 1)).rotateX(Math.PI / 2), m.translate(0, 0, 0), m.faces[0].vertexColors = [f, f, f], m.faces[1].vertexColors = [f, f, f], l.scale && s(m, n / r.worldUV, c / r.worldUV, l.scale), g.push(m)), e[4] && ((m = new i.PlaneGeometry(1, 1)).translate(0, .5, .5), m.faces[0].vertexColors = [d, f, d], m.faces[1].vertexColors = [f, f, d], l.scale && s(m, n / r.worldUV, o / r.worldUV, l.scale), g.push(m)), e[5] && ((m = new i.PlaneGeometry(1, 1)).rotateY(Math.PI), m.translate(0, .5, -.5), m.faces[0].vertexColors = [d, f, d], m.faces[1].vertexColors = [f, f, d], l.scale && s(m, n / r.worldUV, o / r.worldUV, l.scale), g.push(m)), p = 0; p < g.length; p++) a.merge(g[p], new i.Matrix4);
            l && l.useScale && (a.scale(n, o, c), a.translate(0, -o / 2, 0)), u[h] = a
        }
        return a
    }
}, function(t, e, n) {
    let i = n(2);
    const r = n(1),
        a = n(6);
    let o = new i.TextureLoader;

    function s(t, e, n, r) {
        return new Promise(a => {
            (new i.OBJLoader).load(e, e => {
                let s;
                n && (s = o.load(n, t => {
                    t.wrapS = i.RepeatWrapping, t.wrapT = i.RepeatWrapping, t.repeat.set(1, 1), t.minFilter = i.NearestFilter, t.magFilter = i.NearestFilter, t.needsUpdate = !0
                }));
                let c = new i.MeshLambertMaterial({
                        map: s
                    }),
                    l = new i.Geometry;
                e.traverse(t => {
                    t instanceof i.Mesh && (t.geometry.isBufferGeometry ? (l.fromBufferGeometry(t.geometry), l.computeFlatVertexNormals(), t.geometry.fromGeometry(l)) : t.geometry.computeFlatVertexNormals(), t.material = c)
                }), e.scale.setScalar(r || 1), t.add(e), a()
            })
        })
    }

    function c(t, e, n) {
        let r = (new i.TextureLoader).load(e);
        r.magFilter = i.NearestFilter;
        let a = new i.SpriteMaterial({
                map: r,
                color: 16777215
            }),
            o = new i.Sprite(a);
        n && o.scale.set(n, n, 1), t.add(o)
    }

    function l(t, e) {
        let n = new i.PlaneGeometry(t, e);
        return n.rotateX(-Math.PI / 2), n
    }

    function h(t, e, n, r) {
        var o = a.generateCube([1, 1, 1, 1, 1, 1], t, e, n, {
            scale: 1,
            amb: r,
            useScale: !0
        });
        return (new i.BufferGeometry).fromGeometry(o)
    }
    new i.BoxBufferGeometry(1, 1, 1), new i.PlaneBufferGeometry(1, 1).rotateX(-Math.PI / 2), new i.MeshLambertMaterial({
        color: 65280
    }), new i.MeshLambertMaterial({
        color: 5592405
    }), t.exports.prefabs = {
        CRATE: {
            dontRound: !0,
            gen: t => s(t, "models/crate_0.obj", "textures/crate_0.png", r.crateScale),
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        STACK: {
            dontRound: !0,
            gen: t => s(t, "models/stack_0.obj", "textures/stack_0.png", r.crateScale),
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        BARREL: {
            dontRound: !0,
            complex: !0,
            gen: t => s(t, "models/barrel_0.obj", "textures/barrel_0.png", r.barrelScale),
            castShadow: !0,
            receiveShadow: !0
        },
        VEHICLE: {
            dontRound: !0,
            complex: !0,
            gen: t => s(t, "models/vehicle_0.obj", "textures/vehicle_0.png", r.vehicleScale),
            castShadow: !0,
            receiveShadow: !0
        },
        LADDER: {
            defaultSize: [2, 10, 4],
            scalable: !0,
            scaleWithSize: !1,
            hideBoundingBox: !1,
            texturable: !1,
            genGeo: async t => h(...t),
            customDirection: !0,
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        CUBE: {
            defaultSize: [10, 10, 10],
            scalable: !0,
            editAmb: !0,
            scaleWithSize: !1,
            editColor: !0,
            editEmissive: !0,
            editOpac: !0,
            hideBoundingBox: !1,
            editPen: !0,
            texturable: !0,
            genGeo: async (t, e) => h(...t, e),
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        RAMP: {
            defaultSize: [10, 5, 10],
            scalable: !0,
            scaleWithSize: !1,
            hideBoundingBox: !1,
            boostable: !0,
            editColor: !0,
            texturable: !0,
            genGeo: async t => h(...t),
            shootable: !0,
            customDirection: !0,
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        PLANE: {
            defaultSize: [4, .01, 4],
            dontRound: !0,
            particles: !0,
            scalable: !0,
            canTerrain: !0,
            scaleWithSize: !0,
            editColor: !0,
            editPen: !0,
            editEmissive: !0,
            editOpac: !0,
            hideBoundingBox: !1,
            texturable: !0,
            genGeo: async t => l(t[0], t[2]),
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        BILLBOARD: {
            defaultSize: [40, .01, 10],
            lineCol: 16776960,
            dontRound: !0,
            scalable: !0,
            canTerrain: !0,
            scaleWithSize: !0,
            hideBoundingBox: !1,
            genGeo: async t => l(t[0], t[2]),
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        SCORE_ZONE: {
            defaultSize: [10, 10, 10],
            scalable: !0,
            noTexture: !0,
            opacity: .3,
            lineCol: 16776960,
            tool: !0,
            genGeo: async (t, e) => h(...t, e),
            stepSrc: "a"
        },
        DEATH_ZONE: {
            defaultSize: [10, 10, 10],
            scalable: !0,
            noTexture: !0,
            opacity: .3,
            lineCol: 16711680,
            tool: !0,
            genGeo: async (t, e) => h(...t, e),
            stepSrc: "a"
        },
        SPAWN_POINT: {
            defaultSize: [8, 8, 8],
            scalable: !1,
            alwaysSee: !0,
            tool: !0,
            scaleWithSize: !1,
            teamable: !0,
            hideBoundingBox: !0,
            editorGen: t => c(t, "img/favicon.png", 8),
            stepSrc: "a",
            dummy: !1,
            castShadow: !1,
            receiveShadow: !1
        },
        CAMERA_POSITION: {
            defaultSize: [2, 2, 2],
            scalable: !1,
            alwaysSee: !0,
            tool: !0,
            scaleWithSize: !1,
            hideBoundingBox: !0,
            editorGen: t => c(t, "img/crosshair.png", 5),
            stepSrc: "a",
            dummy: !1,
            castShadow: !1,
            receiveShadow: !1
        }
    }, t.exports.texturePrefabs = {
        WALL: {
            src: "wall_0",
            filter: i.NearestFilter
        },
        DIRT: {
            src: "dirt_0",
            filter: i.NearestFilter
        },
        FLOOR: {
            src: "floor_0",
            filter: i.NearestFilter
        },
        GRID: {
            src: "grid_0",
            filter: i.NearestFilter
        },
        GREY: {
            src: "grey_0",
            filter: i.NearestFilter
        },
        DEFAULT: {
            src: "default",
            filter: i.NearestFilter
        },
        ROOF: {
            src: "roof_0",
            filter: i.NearestFilter
        },
        FLAG: {
            src: "flag_0",
            filter: i.NearestFilter
        }
    }, t.exports.loadTexturePrefab = function(e) {
        let n = t.exports.texturePrefabs[e];
        if ("default" != n.src) return o.load("/textures/" + n.src + ".png", t => {
            t.wrapS = i.RepeatWrapping, t.wrapT = i.RepeatWrapping, t.minFilter = n.filter, t.magFilter = n.filter, t.needsUpdate = !0
        })
    }
}, function(t, e, n) {
    const i = n(1);
    var r = [{
        id: "ffa",
        name: "Free for All",
        alias: "ffa"
    }, {
        id: "tdm",
        name: "Team Deathmatch",
        alias: "tdm",
        teams: !0
    }, {
        id: "social",
        name: "Social",
        alias: "social",
        noKick: !0,
        noWeap: !0,
        friendly: !0
    }, {
        id: "bhop",
        name: "Parkour",
        endStats: ["sid", "name", "score", "deaths"],
        alias: "bhop",
        noKick: !0,
        friendly: !0
    }, {
        id: "clan",
        name: "Clan War",
        alias: "clan",
        clanWar: !0,
        teams: !0
    }, {
        id: "hide",
        name: "Hide & Seek",
        alias: "hide",
        endStats: ["sid", "name", "score", "found", "reward"],
        winCondition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n) t.players.list[n].active && "hide" == t.players.list[n].team && e++;
            return e > 0 ? "hide" : "seek"
        },
        condition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n) t.players.list[n].active && "hide" == t.players.list[n].team && e++;
            return e > 0
        },
        minPlayers: 2,
        waitTimers: [{
            time: 1e4,
            msg: "picking seeker in ",
            trigger: function(t) {
                t.pickSeeker()
            }
        }, {
            time: 45e3,
            msg: "releasing seeker in ",
            trigger: function(t) {
                t.releaseSeeker()
            }
        }],
        spdMlt: {
            hide: .8
        },
        killConv: !0,
        noKick: !0,
        showTeam: !0,
        startTeam: "hide",
        convTeam: "seek",
        convWord: "found",
        noWeap: !0,
        friendly: !0,
        hideNames: !0
    }, {
        id: "infect",
        name: "Infected",
        alias: "infect",
        endStats: ["sid", "name", "score", "kills", "infected", "reward"],
        winCondition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n) t.players.list[n].active && "surv" == t.players.list[n].team && e++;
            return e > 0 ? "surv" : "inf"
        },
        condition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n) t.players.list[n].active && "surv" == t.players.list[n].team && e++;
            return e > 0
        },
        minPlayers: 2,
        waitTimers: [{
            time: 2e4,
            msg: "infection in ",
            trigger: function(t) {
                t.infectRandom()
            }
        }],
        teamClass: {
            inf: 8
        },
        spdMlt: {
            inf: 1.15
        },
        killConv: !0,
        noKick: !0,
        startTeam: "surv",
        convWord: "infected",
        convTeam: "inf"
    }, {
        id: "race",
        name: "Race",
        alias: "race",
        endStats: ["sid", "name", "score", "time"],
        gameTime: 0,
        timed: !0,
        endSort: function(t, e) {
            return t.score === e.score && t.gameTimer && e.gameTimer ? t.gameTimer - e.gameTimer : e.score - t.score
        },
        gameStart: function(t) {
            t.lockMove = !0, t.targetScore = 0;
            for (var e = 0; e < t.map.manager.objects.length; ++e) t.map.manager.objects[e].score && t.targetScore++
        },
        condition: function(t) {
            for (var e = 0; e < t.players.list.length; ++e) t.players.list[e].score >= t.targetScore && !t.players.list[e].timer && (t.players.list[e].timer = t.lastTimer, t.players.list[e].gameTimer = t.gameTimer, t.waitTimers || (t.waitTimers = [{
                time: 1e4,
                contTime: !0,
                msg: "race ends in ",
                trigger: function(t) {
                    t.gameTimer = "skip"
                }
            }]));
            return !0
        },
        waitTimers: [{
            time: 15e3,
            msg: "race starting in ",
            trigger: function(t) {
                t.lockMove = !1
            }
        }],
        noWeap: !0,
        friendly: !0
    }, {
        id: "boss",
        name: "Boss Hunt",
        alias: "boss",
        winCondition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n) t.players.list[n].active && "boss" == t.players.list[n].team && e++;
            return e > 0 ? "boss" : "heros"
        },
        condition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n) t.players.list[n].active && "boss" == t.players.list[n].team && e++;
            return e > 0
        },
        waitTimers: [{
            time: 15e3,
            msg: "picking boss in ",
            trigger: function(t) {
                t.pickBoss()
            }
        }],
        noReward: !0,
        minPlayers: 1,
        startTeam: "heros"
    }, {
        id: "comp",
        name: "Competitive",
        alias: "comp",
        endStats: ["sid", "name", "score", "kills", "deaths"],
        noReward: !0,
        killSort: !0,
        winCondition: function(t) {
            for (var e = 0; e < t.players.list.length; ++e)
                if (t.players.list[e].kills >= 10) return t.players.list[e];
            return null
        },
        condition: function(t) {
            for (var e = 0; e < t.players.list.length; ++e)
                if (t.players.list[e].kills >= 10) return !1;
            return !0
        },
        gameTime: 6e5,
        regenDelay: 15e3,
        waitTimers: [{
            time: 25e3,
            msg: "match begins in "
        }]
    }];
    t.exports.mapModes = [
        [0],
        [0, 1]
    ], t.exports.modes = r;
    for (var a = [{
            name: "Burg",
            modURL: "",
            ambient: 9207163,
            light: 16772075,
            sky: 14608620,
            fog: 13746882,
            fogD: 900,
            modes: [0, 1],
            shadScale: 170,
            camPos: [-205, 26, -428],
            spawns: [
                [-80, 18, 35],
                [187, 0, -188],
                [215, 14, -494],
                [-229, 0, -532],
                [-328, 0, -255],
                [-154, 0, -134],
                [-125, -28, -341],
                [32, -28, -509],
                [332, 0, -227],
                [114, 0, -365]
            ],
            objects: [{
                p: [-96, 0, 57],
                s: [288, 18, 94],
                t: 1
            }, {
                p: [73, 0, 33],
                s: [50, 18, 46],
                id: 9,
                t: 1,
                d: 2
            }, {
                p: [28, 0, 8],
                s: [152, 24, 4],
                a: .32
            }, {
                p: [0, -4, -45],
                s: [516, 4, 304],
                t: 1
            }, {
                p: [-76, 0, -48],
                s: [56, 74, 122],
                a: .24
            }, {
                p: [37, 0, -68],
                s: [110, 54, 80],
                a: .22
            }, {
                p: [-112, 0, 74],
                s: [126, 76, 38],
                a: .21
            }, {
                p: [90, 0, 77],
                s: [158, 76, 44],
                a: .5
            }, {
                p: [-136, 0, -16],
                s: [64, 18, 52],
                t: 1
            }, {
                p: [-136, 0, -44],
                s: [64, 24, 4],
                a: .64
            }, {
                p: [-170, 0, -18],
                s: [4, 24, 56],
                a: .64
            }, {
                p: [-234, 0, -27],
                s: [32, 60, 96],
                a: .4
            }, {
                p: [-240, 0, 41],
                s: [20, 50, 44],
                a: .5
            }, {
                p: [-218, 13, 74],
                s: [88, 38, 54],
                a: .6
            }, {
                p: [185, 0, -9],
                s: [16, 46, 84],
                a: .66
            }, {
                p: [180, 0, 45],
                s: [60, 92, 44],
                a: .55
            }, {
                p: [213, 0, -61],
                s: [94, 88, 60],
                a: .55
            }, {
                p: [96, 0, -175],
                s: [110, 44, 44],
                a: .43
            }, {
                p: [-85, 0, -140],
                s: [56, 84, 112],
                a: .36
            }, {
                p: [126, -4, -300],
                s: [228, 4, 206],
                t: 1
            }, {
                p: [-82, -28, -252],
                s: [60, 94, 138],
                a: .52
            }, {
                p: [9, -28, -274],
                s: [6, 34, 168],
                a: .48
            }, {
                p: [49, -28, -385],
                s: [96, 104, 66],
                a: .61
            }, {
                p: [-23, -28, -252],
                s: [58, 28, 110],
                id: 9,
                t: 1,
                d: 1
            }, {
                p: [-4, -32, -365],
                s: [352, 4, 378],
                t: 1
            }, {
                p: [-116, -28, -377],
                s: [146, 88, 42],
                a: .57
            }, {
                p: [-21, 6, -377],
                s: [44, 38, 20]
            }, {
                p: [-243, 0, -105],
                s: [20, 50, 96],
                a: .48
            }, {
                p: [190, -28, -346],
                s: [116, 86, 118],
                a: .12
            }, {
                p: [-195, 0, -17],
                s: [46, 18, 54],
                id: 9,
                t: 1,
                d: 1
            }, {
                p: [-134, 0, -191],
                s: [90, 72, 76],
                a: .36
            }, {
                p: [-278, 0, -191],
                s: [130, 72, 76],
                a: .48
            }, {
                p: [-230, -22, -238],
                s: [272, 22, 82],
                t: 1
            }, {
                p: [-210, -28, -323],
                s: [132, 90, 66],
                a: .44
            }, {
                p: [-128, -28, -300],
                s: [32, 28, 42],
                id: 9,
                t: 1,
                d: 1
            }, {
                p: [-254, -22, -419],
                s: [214, 22, 280],
                t: 1
            }, {
                p: [-326, -22, -321],
                s: [34, 84, 88],
                a: .44
            }, {
                p: [-341, -2, -253],
                s: [4, 56, 48],
                a: .44
            }, {
                p: [-158, -28, -274],
                s: [28, 90, 32],
                a: .44
            }, {
                p: [-263, -20, -322],
                s: [30, 94, 94],
                a: .44
            }, {
                p: [-330, -23, -394],
                s: [22, 72, 210],
                a: .25
            }, {
                p: [-88, -28, -429],
                s: [78, 28, 62],
                id: 9,
                t: 1,
                d: 2
            }, {
                p: [-103, -22, -497],
                s: [48, 84, 86],
                a: .4
            }, {
                p: [-160, 0, -477],
                s: [66, 26, 4],
                a: .4
            }, {
                p: [-137, -22, -489],
                s: [20, 22, 182],
                t: 1
            }, {
                p: [-164, 0, -547],
                s: [98, 86, 40],
                a: .35
            }, {
                p: [-283, 0, -506],
                s: [72, 10, 86],
                t: 1
            }, {
                p: [-262, 0, -452],
                s: [30, 10, 22],
                t: 1
            }, {
                p: [-300, 0, -450],
                s: [38, 10, 26],
                id: 9,
                t: 1,
                d: 3
            }, {
                p: [-245, 0, -493],
                s: [4, 16, 112],
                a: .4
            }, {
                p: [-262, 0, -439],
                s: [30, 16, 4],
                a: .4
            }, {
                p: [-347, 0, -535],
                s: [72, 72, 76],
                a: .3
            }, {
                p: [-262, 0, -567],
                s: [98, 48, 40],
                a: .19
            }, {
                p: [-319, 0, -587],
                s: [48, 120, 54],
                a: .31
            }, {
                p: [-1, -28, -377],
                s: [4, 34, 20],
                a: .48
            }, {
                p: [-41, -28, -377],
                s: [4, 34, 20],
                a: .48
            }, {
                p: [-63, -28, -506],
                s: [52, 118, 92],
                a: .52
            }, {
                p: [85, -28, -498],
                s: [32, 112, 88],
                a: .47
            }, {
                p: [173, -24, -525],
                s: [148, 34, 128],
                t: 1
            }, {
                p: [39, -29, -544],
                s: [218, 94, 46],
                a: .41
            }, {
                p: [182, 7, -540],
                s: [72, 90, 60],
                a: .5
            }, {
                p: [298, -4, -329],
                s: [116, 4, 264],
                t: 1
            }, {
                p: [279, 0, -485],
                s: [64, 10, 48],
                id: 9,
                t: 1,
                d: 3
            }, {
                p: [278, -24, -541],
                s: [62, 34, 64],
                t: 1
            }, {
                p: [264, 9, -557],
                s: [94, 36, 24],
                a: .48
            }, {
                p: [331, -23, -552],
                s: [54, 98, 110],
                a: .33
            }, {
                p: [332, -5, -499],
                s: [42, 60, 110],
                a: .22
            }, {
                p: [342, -4, -411],
                s: [20, 36, 110],
                a: .61
            }, {
                p: [332, -23, -303],
                s: [54, 96, 110],
                a: .33
            }, {
                p: [128, -28, -425],
                s: [64, 42, 4],
                a: .4
            }, {
                p: [171, -28, -461],
                s: [152, 44, 4],
                a: .25
            }, {
                p: [249, -24, -484],
                s: [4, 40, 50],
                a: .25
            }, {
                p: [204, -28, -440],
                s: [72, 28, 38],
                id: 9,
                t: 1,
                d: 0
            }, {
                p: [228, 0, -120],
                s: [10, 48, 60],
                a: .51
            }, {
                p: [156, 0, -188],
                s: [32, 70, 82],
                a: .34
            }, {
                p: [228, 0, -188],
                s: [32, 86, 82],
                a: .34
            }, {
                p: [324, -37, -144],
                s: [4, 44, 106],
                a: .29
            }, {
                p: [260, -37, -144],
                s: [4, 44, 106],
                a: .29
            }, {
                p: [293, -28, -153],
                s: [64, 28, 88],
                id: 9,
                t: 1,
                d: 3
            }, {
                p: [367, 0, -146],
                s: [58, 50, 118],
                a: .37
            }, {
                p: [347, -28, -63],
                s: [194, 86, 80],
                a: .21
            }, {
                p: [335, 51, -64],
                s: [60, 88, 56],
                a: .79
            }, {
                p: [348, -4, -227],
                s: [8, 48, 52],
                a: .57
            }, {
                p: [393, 0, -404],
                s: [88, 64, 110],
                a: .26
            }, {
                p: [397, 0, -195],
                s: [58, 76, 80],
                a: .52
            }, {
                p: [-356, 0, -369],
                s: [42, 82, 50],
                a: .09
            }, {
                p: [-264, 0, -84],
                s: [42, 106, 50],
                a: .13
            }, {
                p: [292, -30, -106],
                s: [116, 2, 6],
                t: 1
            }, {
                p: [1, 0, 0],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-42, 0, -79],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-42, 12, -79],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-42, 0, -67],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [0, -28, -325],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [0, -28, -337],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [0, -16, -333],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-76, -28, -327],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-76, -16, -327],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [237, 10, -469],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [224, 10, -520],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [155, 10, -504],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [167, 10, -504],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [163, 22, -504],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [214, 10, -467],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [312, 0, -401],
                s: [2, 2, 86],
                a: .61
            }, {
                p: [313, 0, -242],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [210, 0, -281],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [198, 0, -281],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [204, 12, -281],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-59, 18, 19],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-110, 18, -36],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-110, 0, -52],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-122, 0, -52],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-164, 18, -38],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-214, 18, 15],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-154, 0, -252],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-313, 0, -235],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-253, 10, -447],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-305, 10, -521],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-251, 10, -457],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-211, 0, -494],
                s: [12, 12, 12],
                id: 8
            }, {
                p: [-199, 0, -493],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-199, 12, -498],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [206, 0, -207],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [206, 0, -195],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [98, 0, -61],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [98, 0, -73],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [96, 0, -51],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [136, 0, -149],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [192, 34, -188],
                s: [40, 24, 82],
                a: .62
            }, {
                p: [128, -4, -415],
                s: [68, 12, 20],
                t: 1
            }, {
                p: [94, -28, -422],
                s: [4, 42, 10],
                a: .4
            }, {
                p: [337, -4, -150],
                s: [22, 4, 94],
                t: 1
            }, {
                p: [-261, 0, -375],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-181, 0, -404],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-11, -28, -384],
                s: [20, 34, 2],
                t: 2
            }, {
                p: [-32, -28, -370],
                s: [18, 34, 2],
                t: 2
            }, {
                p: [173, 0, -233],
                s: [2, 34, 24],
                t: 2
            }, {
                p: [202, 0, -226],
                s: [20, 34, 2],
                t: 2
            }, {
                p: [182, 0, -150],
                s: [20, 34, 2],
                t: 2
            }, {
                p: [211, 0, -162],
                s: [2, 34, 24],
                t: 2
            }, {
                p: [20, -28, -438],
                s: [28, 76, 40],
                a: .47
            }, {
                p: [114, 0, -388],
                s: [36, 8, 34],
                id: 9,
                t: 1,
                d: 3
            }, {
                p: [-279, 0, -451],
                s: [4, 16, 28],
                a: .4
            }, {
                p: [-337, 120, -563],
                s: [12, 4, 6],
                col: 1
            }, {
                p: [-299, 120, -566],
                s: [8, 4, 12],
                col: 1
            }, {
                p: [-297, 120, -586],
                s: [4, 4, 12],
                col: 1
            }, {
                p: [-300, 120, -608],
                s: [10, 6, 12],
                col: 1
            }, {
                p: [-316, 120, -563],
                s: [12, 2, 6],
                col: 1
            }, {
                p: [-206, 86, -535],
                s: [14, 4, 16],
                col: 1
            }, {
                p: [-126, 86, -535],
                s: [22, 6, 16],
                col: 1
            }, {
                p: [-165, 86, -530],
                s: [22, 4, 6],
                col: 1
            }, {
                p: [-209, 86, -560],
                s: [8, 4, 14],
                col: 1
            }, {
                p: [-230, 48, -550],
                s: [24, 2, 6],
                col: 1
            }, {
                p: [-264, 48, -550],
                s: [18, 2, 6],
                col: 1
            }, {
                p: [-295, 48, -550],
                s: [14, 4, 6],
                col: 1
            }, {
                p: [-316, 70, -502],
                s: [6, 12, 6],
                col: 1,
                a: .56,
                t: 2
            }, {
                p: [-378, 73, -502],
                s: [6, 8, 6],
                col: 1,
                a: .56,
                t: 2
            }, {
                p: [-318, 72, -504],
                s: [14, 4, 14],
                col: 1
            }, {
                p: [-378, 72, -504],
                s: [10, 2, 14],
                col: 1
            }, {
                p: [-358, 72, -499],
                s: [14, 2, 4],
                col: 1
            }, {
                p: [-314, 72, -536],
                s: [6, 4, 16],
                col: 1
            }, {
                p: [-321, 49, -480],
                s: [4, 2, 24],
                col: 1
            }, {
                p: [-321, 49, -384],
                s: [4, 6, 16],
                col: 1
            }, {
                p: [-321, 49, -413],
                s: [4, 4, 16],
                col: 1
            }, {
                p: [-321, 49, -446],
                s: [4, 4, 12],
                col: 1
            }, {
                p: [-53, 60, -392],
                s: [20, 6, 12],
                col: 1
            }, {
                p: [-182, 60, -362],
                s: [14, 6, 12],
                col: 1
            }, {
                p: [233, 45, -548],
                s: [12, 2, 6],
                col: 1
            }, {
                p: [262, 45, -548],
                s: [20, 2, 6],
                col: 1
            }, {
                p: [288, 45, -548],
                s: [16, 2, 6],
                col: 1
            }, {
                p: [-82, 90, -466],
                s: [14, 4, 12],
                col: 1
            }, {
                p: [-43, 90, -467],
                s: [12, 4, 14],
                col: 1
            }, {
                p: [-44, 90, -519],
                s: [14, 6, 30],
                col: 1
            }, {
                p: [-60, 90, -463],
                s: [14, 2, 6],
                col: 1
            }, {
                p: [-39, 90, -490],
                s: [4, 2, 16],
                col: 1
            }, {
                p: [-84, 90, -524],
                s: [10, 6, 26],
                col: 1
            }, {
                p: [-87, 90, -492],
                s: [4, 2, 10],
                col: 1
            }, {
                p: [-63, 71, -450],
                s: [4, 4, 20],
                t: 2
            }, {
                p: [-122, 62, -459],
                s: [6, 10, 6],
                col: 1,
                a: .56,
                t: 2
            }, {
                p: [-124, 62, -507],
                s: [6, 4, 22],
                col: 1
            }, {
                p: [-124, 62, -476],
                s: [6, 4, 14],
                col: 1
            }, {
                p: [-88, 62, -457],
                s: [18, 4, 6],
                col: 1
            }, {
                p: [-132, 60, -396],
                s: [26, 4, 4],
                col: 1
            }, {
                p: [-179, 60, -392],
                s: [20, 6, 12],
                col: 1
            }, {
                p: [-89, 60, -396],
                s: [14, 4, 4],
                col: 1
            }, {
                p: [85, 66, -447],
                s: [4, 4, 16],
                t: 2
            }, {
                p: [-34, 44, -377],
                s: [12, 4, 20],
                col: 1
            }, {
                p: [-14, 44, -377],
                s: [10, 2, 20],
                col: 1
            }, {
                p: [-341, 82, -387],
                s: [12, 4, 14],
                col: 1
            }, {
                p: [-341, 82, -350],
                s: [12, 6, 12],
                col: 1
            }, {
                p: [-338, 82, -369],
                s: [6, 2, 12],
                col: 1
            }, {
                p: [-371, 82, -389],
                s: [12, 4, 10],
                col: 1
            }, {
                p: [-356, 82, -392],
                s: [8, 2, 4],
                col: 1
            }, {
                p: [53, 65, -523],
                s: [18, 4, 4],
                col: 1
            }, {
                p: [135, 65, -523],
                s: [12, 4, 4],
                col: 1
            }, {
                p: [114, 65, -523],
                s: [12, 4, 4],
                col: 1
            }, {
                p: [211, 97, -517],
                s: [14, 6, 14],
                col: 1
            }, {
                p: [153, 97, -518],
                s: [14, 4, 16],
                col: 1
            }, {
                p: [184, 97, -514],
                s: [12, 2, 8],
                col: 1
            }, {
                p: [215, 97, -539],
                s: [6, 2, 18],
                col: 1
            }, {
                p: [211, 97, -564],
                s: [14, 6, 12],
                col: 1
            }, {
                p: [153, 97, -562],
                s: [14, 6, 16],
                col: 1
            }, {
                p: [149, 97, -539],
                s: [6, 2, 12],
                col: 1
            }, {
                p: [107, 16, -461],
                s: [6, 2, 4]
            }, {
                p: [149, 16, -461],
                s: [14, 2, 4]
            }, {
                p: [242, 16, -461],
                s: [18, 2, 4]
            }, {
                p: [249, 16, -497],
                s: [4, 2, 10]
            }, {
                p: [96, 84, -459],
                s: [6, 12, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [74, 84, -459],
                s: [6, 10, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [74, 84, -537],
                s: [6, 18, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [96, 84, -537],
                s: [6, 14, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [94, 84, -463],
                s: [14, 4, 18],
                col: 1
            }, {
                p: [74, 84, -463],
                s: [10, 4, 18],
                col: 1
            }, {
                p: [76, 84, -533],
                s: [14, 4, 18],
                col: 1
            }, {
                p: [96, 84, -533],
                s: [10, 4, 18],
                col: 1
            }, {
                p: [98, 84, -498],
                s: [6, 4, 20],
                col: 1
            }, {
                p: [72, 84, -498],
                s: [6, 4, 26],
                col: 1
            }, {
                p: [91, 76, -413],
                s: [6, 16, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [85, 76, -409],
                s: [24, 6, 18],
                col: 1
            }, {
                p: [13, 76, -409],
                s: [24, 6, 18],
                col: 1
            }, {
                p: [48, 76, -415],
                s: [20, 4, 6],
                col: 1
            }, {
                p: [12, 76, -359],
                s: [22, 6, 14],
                col: 1
            }, {
                p: [5, 76, -382],
                s: [8, 4, 14],
                col: 1
            }, {
                p: [53, 76, -355],
                s: [22, 4, 6],
                col: 1
            }, {
                p: [85, 76, -361],
                s: [24, 6, 18],
                col: 1
            }, {
                p: [93, 76, -387],
                s: [8, 4, 14],
                col: 1
            }, {
                p: [6, 76, -413],
                s: [6, 20, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [6, 76, -357],
                s: [6, 20, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [334, 32, -432],
                s: [4, 2, 18],
                col: 1
            }, {
                p: [334, 32, -376],
                s: [4, 4, 18],
                col: 1
            }, {
                p: [334, 32, -406],
                s: [4, 2, 22],
                col: 1
            }, {
                p: [147, 58, -402],
                s: [30, 12, 6],
                col: 1
            }, {
                p: [136, 58, -378],
                s: [8, 18, 42],
                col: 1
            }, {
                p: [198, 58, -418],
                s: [10, 6, 6],
                col: 1
            }, {
                p: [245, 58, -375],
                s: [6, 4, 20],
                col: 1
            }, {
                p: [234, 58, -413],
                s: [28, 8, 16],
                col: 1
            }, {
                p: [236, 58, -299],
                s: [24, 8, 24],
                col: 1
            }, {
                p: [245, 58, -341],
                s: [6, 4, 20],
                col: 1
            }, {
                p: [243, 61, -416],
                s: [6, 16, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [311, 73, -349],
                s: [12, 6, 18],
                col: 1
            }, {
                p: [331, 73, -356],
                s: [12, 4, 4],
                col: 1
            }, {
                p: [353, 73, -349],
                s: [12, 6, 18],
                col: 1
            }, {
                p: [308, 73, -306],
                s: [6, 4, 38],
                col: 1
            }, {
                p: [312, 73, -259],
                s: [14, 6, 22],
                col: 1
            }, {
                p: [332, 73, -250],
                s: [12, 4, 4],
                col: 1
            }, {
                p: [353, 73, -257],
                s: [12, 6, 18],
                col: 1
            }, {
                p: [285, 58, -84],
                s: [2, 40, 2],
                col: 1,
                a: .58,
                t: 2
            }, {
                p: [285, 58, -48],
                s: [2, 40, 2],
                col: 1,
                a: .58,
                t: 2
            }, {
                p: [294, 93, -66],
                s: [22, 2, 40],
                a: .58,
                t: 2
            }, {
                p: [193, 58, -290],
                s: [24, 4, 6],
                col: 1
            }, {
                p: [136, 58, -332],
                s: [8, 6, 24],
                col: 1
            }, {
                p: [397, 76, -195],
                s: [64, 2, 86],
                t: 2
            }, {
                p: [348, 44, -236],
                s: [8, 4, 16],
                col: 1
            }, {
                p: [348, 44, -216],
                s: [8, 2, 8],
                col: 1
            }, {
                p: [352, 64, -379],
                s: [6, 4, 24],
                col: 1
            }, {
                p: [352, 64, -415],
                s: [6, 2, 20],
                col: 1
            }, {
                p: [355, 64, -448],
                s: [12, 4, 22],
                col: 1
            }, {
                p: [313, 55, -490],
                s: [4, 4, 14],
                col: 1
            }, {
                p: [318, 55, -451],
                s: [14, 4, 14],
                col: 1
            }, {
                p: [313, 55, -473],
                s: [4, 2, 10],
                col: 1
            }, {
                p: [342, 55, -446],
                s: [14, 4, 4],
                col: 1
            }, {
                p: [315, 75, -509],
                s: [22, 6, 24],
                col: 1
            }, {
                p: [307, 75, -544],
                s: [6, 4, 20],
                col: 1
            }, {
                p: [307, 75, -576],
                s: [6, 4, 22],
                col: 1
            }, {
                p: [350, 75, -500],
                s: [16, 6, 6],
                col: 1
            }, {
                p: [385, 58, -100],
                s: [34, 6, 6],
                col: 1
            }, {
                p: [333, 58, -100],
                s: [26, 4, 6],
                col: 1
            }, {
                p: [289, 58, -100],
                s: [22, 2, 6],
                col: 1
            }, {
                p: [257, 58, -95],
                s: [14, 6, 16],
                col: 1
            }, {
                p: [335, 139, -89],
                s: [16, 4, 6],
                col: 1
            }, {
                p: [313, 139, -84],
                s: [16, 6, 16],
                col: 1
            }, {
                p: [359, 139, -84],
                s: [12, 6, 16],
                col: 1
            }, {
                p: [313, 139, -44],
                s: [16, 6, 16],
                col: 1
            }, {
                p: [308, 139, -64],
                s: [6, 4, 12],
                col: 1
            }, {
                p: [228, 48, -132],
                s: [10, 2, 16],
                col: 1
            }, {
                p: [228, 48, -106],
                s: [10, 4, 20],
                col: 1
            }, {
                p: [-293, 40, -321],
                s: [32, 22, 88],
                a: .88
            }, {
                p: [-192, 62, -323],
                s: [20, 4, 66],
                col: 1
            }, {
                p: [-328, 62, -361],
                s: [20, 4, 8],
                col: 1
            }, {
                p: [-296, 62, -361],
                s: [20, 4, 8],
                col: 1
            }, {
                p: [-253, 73, -364],
                s: [6, 10, 6],
                col: 1,
                a: .56,
                t: 2
            }, {
                p: [-274, 73, -364],
                s: [6, 14, 6],
                col: 1,
                a: .56,
                t: 2
            }, {
                p: [-274, 74, -322],
                s: [8, 4, 94],
                col: 1
            }, {
                p: [-252, 74, -283],
                s: [8, 4, 16],
                col: 1
            }, {
                p: [9, 6, -313],
                s: [6, 2, 18]
            }, {
                p: [9, 6, -199],
                s: [6, 4, 18]
            }, {
                p: [9, 6, -252],
                s: [6, 2, 10]
            }, {
                p: [-341, 54, -237],
                s: [4, 4, 12],
                col: 1
            }, {
                p: [-341, 54, -263],
                s: [4, 2, 16],
                col: 1
            }, {
                p: [164, 0, -61],
                s: [4, 62, 4],
                a: .55,
                t: 2
            }, {
                p: [154, 54, -61],
                s: [16, 4, 4],
                t: 2
            }, {
                p: [158, 51, -61],
                s: [16, 2, 2],
                col: 1,
                r: [0, 0, -.7],
                t: 2
            }, {
                p: [-263, 0, -273],
                s: [4, 54, 4],
                a: .73,
                t: 2
            }, {
                p: [-263, 47, -263],
                s: [4, 4, 16],
                t: 2
            }, {
                p: [-263, 43, -268],
                s: [2, 2, 16],
                col: 1,
                r: [-.7, 0, 0],
                t: 2
            }, {
                p: [238, 86, -224],
                s: [12, 4, 10],
                col: 1
            }, {
                p: [240, 86, -152],
                s: [8, 4, 10],
                col: 1
            }, {
                p: [217, 86, -222],
                s: [10, 4, 14],
                col: 1
            }, {
                p: [242, 86, -189],
                s: [4, 4, 28],
                col: 1
            }, {
                p: [251, 88, -82],
                s: [18, 6, 18],
                col: 1
            }, {
                p: [176, 88, -82],
                s: [20, 6, 18],
                col: 1
            }, {
                p: [173, 88, -40],
                s: [14, 6, 18],
                col: 1
            }, {
                p: [207, 88, -88],
                s: [20, 4, 6],
                col: 1
            }, {
                p: [168, 88, -61],
                s: [4, 2, 12],
                col: 1
            }, {
                p: [254, 88, -41],
                s: [12, 6, 20],
                col: 1
            }, {
                p: [214, 88, -34],
                s: [30, 4, 6],
                col: 1
            }, {
                p: [433, 58, -92],
                s: [22, 6, 22],
                col: 1
            }, {
                p: [145, 70, -158],
                s: [10, 4, 22],
                col: 1
            }, {
                p: [168, 70, -154],
                s: [8, 4, 14],
                col: 1
            }, {
                p: [145, 70, -218],
                s: [10, 4, 22],
                col: 1
            }, {
                p: [168, 70, -222],
                s: [8, 4, 14],
                col: 1
            }, {
                p: [214, 86, -184],
                s: [4, 2, 24],
                col: 1
            }, {
                p: [216, 86, -152],
                s: [8, 4, 10],
                col: 1
            }, {
                p: [179, 46, -22],
                s: [4, 4, 18],
                col: 1
            }, {
                p: [179, 46, 0],
                s: [4, 2, 14],
                col: 1
            }, {
                p: [179, 46, 18],
                s: [4, 4, 12],
                col: 1
            }, {
                p: [136, 44, -157],
                s: [4, 38, 4],
                a: .73,
                t: 2
            }, {
                p: [45, 44, -157],
                s: [4, 38, 4],
                a: .73,
                t: 2
            }, {
                p: [45, 44, -193],
                s: [4, 38, 4],
                a: .73,
                t: 2
            }, {
                p: [136, 44, -193],
                s: [4, 42, 4],
                a: .73,
                t: 2
            }, {
                p: [91, 58, -175],
                s: [100, 2, 44],
                a: .73,
                t: 2
            }, {
                p: [127, 44, -155],
                s: [26, 4, 4],
                col: 1
            }, {
                p: [48, 44, -159],
                s: [14, 4, 12],
                col: 1
            }, {
                p: [44, 44, -191],
                s: [6, 4, 12],
                col: 1
            }, {
                p: [90, 44, -155],
                s: [18, 2, 4],
                col: 1
            }, {
                p: [195, 58, -226],
                s: [18, 4, 6],
                col: 1
            }, {
                p: [186, 58, -150],
                s: [18, 4, 6],
                col: 1
            }, {
                p: [-3, 54, -100],
                s: [30, 6, 16],
                col: 1
            }, {
                p: [77, 54, -98],
                s: [30, 6, 20],
                col: 1
            }, {
                p: [79, 54, -35],
                s: [26, 6, 14],
                col: 1
            }, {
                p: [-5, 54, -35],
                s: [26, 6, 14],
                col: 1
            }, {
                p: [89, 54, -66],
                s: [6, 4, 20],
                col: 1
            }, {
                p: [37, 54, -105],
                s: [30, 4, 6],
                col: 1
            }, {
                p: [-15, 54, -66],
                s: [6, 4, 20],
                col: 1
            }, {
                p: [38, 54, -31],
                s: [18, 4, 6],
                col: 1
            }, {
                p: [-53, 60, -364],
                s: [20, 6, 16],
                col: 1
            }, {
                p: [-237, 50, 35],
                s: [14, 2, 10],
                col: 1
            }, {
                p: [164, 92, 31],
                s: [28, 6, 16],
                col: 1
            }, {
                p: [203, 92, 31],
                s: [14, 6, 16],
                col: 1
            }, {
                p: [156, 92, 60],
                s: [12, 6, 14],
                col: 1
            }, {
                p: [-260, 47, 19],
                s: [4, 22, 158],
                a: .6
            }, {
                p: [-216, 47, 99],
                s: [108, 22, 4],
                a: .6
            }, {
                p: [-178, 13, 51],
                s: [4, 74, 4],
                a: .6,
                t: 2
            }, {
                p: [-254, 13, 51],
                s: [4, 74, 4],
                a: .6,
                t: 2
            }, {
                p: [-216, 80, 72],
                s: [84, 2, 50],
                t: 2
            }, {
                p: [-260, 69, 73],
                s: [4, 4, 20],
                col: 1
            }, {
                p: [-189, 69, 99],
                s: [26, 4, 4],
                col: 1
            }, {
                p: [-239, 69, 99],
                s: [24, 6, 4],
                col: 1
            }, {
                p: [-55, 74, 2],
                s: [14, 6, 22],
                col: 1
            }, {
                p: [-97, 74, 1],
                s: [14, 6, 24],
                col: 1
            }, {
                p: [-102, 74, -42],
                s: [4, 4, 24],
                col: 1
            }, {
                p: [-102, 74, -75],
                s: [4, 4, 14],
                col: 1
            }, {
                p: [-77, 74, 11],
                s: [14, 4, 4],
                col: 1
            }, {
                p: [-50, 74, -45],
                s: [4, 4, 24],
                col: 1
            }, {
                p: [-54, 74, -97],
                s: [12, 4, 24],
                col: 1
            }, {
                p: [-236, 50, -131],
                s: [6, 4, 24],
                col: 1
            }, {
                p: [-236, 50, -96],
                s: [6, 4, 22],
                col: 1
            }, {
                p: [-221, 60, 14],
                s: [6, 2, 14],
                col: 1
            }, {
                p: [-244, 60, 13],
                s: [12, 2, 16],
                col: 1
            }, {
                p: [-224, 60, -61],
                s: [12, 2, 28],
                col: 1
            }, {
                p: [-220, 60, -17],
                s: [4, 2, 8],
                col: 1
            }, {
                p: [-246, 106, -84],
                s: [6, 4, 14],
                col: 1
            }, {
                p: [-251, 106, -64],
                s: [16, 6, 10],
                col: 1
            }, {
                p: [-251, 106, -104],
                s: [16, 6, 10],
                col: 1
            }, {
                p: [-278, 106, -66],
                s: [14, 4, 14],
                col: 1
            }, {
                p: [-278, 106, -105],
                s: [14, 4, 8],
                col: 1
            }, {
                p: [-109, 60, -359],
                s: [34, 4, 6],
                col: 1
            }, {
                p: [-141, 72, -191],
                s: [30, 4, 76],
                col: 1
            }, {
                p: [-189, 72, -191],
                s: [26, 6, 76],
                col: 1
            }, {
                p: [-240, 72, -191],
                s: [26, 4, 76],
                col: 1
            }, {
                p: [-297, 72, -191],
                s: [36, 6, 76],
                col: 1
            }, {
                p: [-260, 69, 35],
                s: [4, 4, 16],
                col: 1
            }, {
                p: [-260, 69, -35],
                s: [4, 4, 16],
                col: 1
            }, {
                p: [-260, 69, -1],
                s: [4, 4, 14],
                col: 1
            }, {
                p: [336, 139, -39],
                s: [16, 4, 6],
                col: 1
            }, {
                p: [361, 139, -44],
                s: [8, 6, 16],
                col: 1
            }, {
                p: [-296, 62, -281],
                s: [20, 4, 8],
                col: 1
            }, {
                p: [-323, 62, -281],
                s: [14, 4, 8],
                col: 1
            }, {
                p: [9, -2, -180],
                s: [4, 56, 4],
                a: .73,
                t: 2
            }, {
                p: [9, 44, -175],
                s: [2, 2, 12],
                col: 1,
                r: [-.7, 0, 0],
                t: 2
            }, {
                p: [-106, 84, -96],
                s: [14, 6, 24],
                col: 1
            }, {
                p: [-110, 84, -137],
                s: [6, 4, 24],
                col: 1
            }, {
                p: [-108, 84, -184],
                s: [10, 4, 24],
                col: 1
            }, {
                p: [-64, 84, -96],
                s: [14, 6, 24],
                col: 1
            }, {
                p: [-64, 84, -184],
                s: [14, 6, 24],
                col: 1
            }, {
                p: [-60, 84, -137],
                s: [6, 4, 16],
                col: 1
            }, {
                p: [-182, 51, 55],
                s: [16, 4, 16],
                col: 1
            }, {
                p: [-250, 51, 50],
                s: [16, 4, 6],
                col: 1
            }, {
                p: [-212, 51, 50],
                s: [16, 2, 6],
                col: 1
            }, {
                p: [-252, 51, 60],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [343, 32, -383],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [260, 7, -178],
                s: [4, 2, 22]
            }, {
                p: [260, 7, -129],
                s: [4, 4, 22]
            }, {
                p: [324, 7, -129],
                s: [4, 4, 22]
            }, {
                p: [324, 7, -182],
                s: [4, 2, 16]
            }, {
                p: [243, 61, -292],
                s: [6, 14, 6],
                col: 1,
                a: .93,
                t: 2
            }, {
                p: [10, 24, 8],
                s: [18, 2, 4]
            }, {
                p: [82, 24, 8],
                s: [20, 2, 4]
            }, {
                p: [-42, 24, 8],
                s: [10, 2, 4]
            }, {
                p: [-129, 24, -44],
                s: [16, 2, 4]
            }, {
                p: [-164, 24, -44],
                s: [16, 2, 4]
            }, {
                p: [-170, 24, -31],
                s: [4, 2, 22]
            }, {
                p: [-170, 24, 4],
                s: [4, 2, 12]
            }, {
                p: [-259, 16, -439],
                s: [14, 2, 4]
            }, {
                p: [-245, 16, -522],
                s: [4, 2, 12]
            }, {
                p: [-245, 16, -479],
                s: [4, 2, 12]
            }, {
                p: [-227, 62, -323],
                s: [20, 4, 66],
                col: 1
            }, {
                p: [-108, 88, -89],
                s: [6, 12, 6],
                col: 1,
                a: .73,
                t: 2
            }, {
                p: [-250, 44, -124],
                s: [4, 36, 4],
                a: .73,
                t: 2
            }, {
                p: [-280, 44, -124],
                s: [4, 40, 4],
                a: .73,
                t: 2
            }, {
                p: [-265, 74, -117],
                s: [38, 2, 22],
                a: .73,
                t: 2
            }, {
                p: [-57, 66, -201],
                s: [10, 6, 36],
                col: 1
            }, {
                p: [-57, 66, -260],
                s: [10, 4, 26],
                col: 1
            }, {
                p: [-61, 66, -308],
                s: [18, 4, 26],
                col: 1
            }, {
                p: [-103, 66, -308],
                s: [18, 4, 26],
                col: 1
            }, {
                p: [-107, 66, -260],
                s: [10, 4, 26],
                col: 1
            }, {
                p: [-168, 62, -268],
                s: [8, 4, 20],
                col: 1
            }, {
                p: [-150, 62, -268],
                s: [12, 4, 20],
                col: 1
            }, {
                p: [-148, 62, -304],
                s: [8, 4, 20],
                col: 1
            }, {
                p: [-148, 62, -342],
                s: [8, 4, 28],
                col: 1
            }, {
                p: [335, 100, -64],
                s: [6, 20, 58],
                col: 1,
                c: 0
            }, {
                p: [196, 51, -91],
                s: [6, 20, 2],
                col: 1,
                c: 0
            }, {
                p: [-243, 79, -84],
                s: [2, 16, 6],
                col: 1,
                c: 0
            }, {
                p: [-295, 84, -587],
                s: [2, 18, 6],
                col: 1,
                c: 0
            }, {
                p: [-319, 91, -560],
                s: [4, 16, 2],
                col: 1,
                c: 0
            }, {
                p: [305, 105, -64],
                s: [2, 20, 6],
                col: 1,
                c: 0
            }, {
                p: [304, 46, -518],
                s: [2, 14, 6],
                col: 1,
                c: 0
            }, {
                p: [203, 70, -510],
                s: [6, 14, 2],
                col: 1,
                c: 0
            }, {
                p: [183, 70, -510],
                s: [6, 14, 2],
                col: 1,
                c: 0
            }, {
                p: [162, 70, -510],
                s: [6, 14, 2],
                col: 1,
                c: 0
            }, {
                p: [38, 18, 51],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [296, 60, -301],
                s: [18, 4, 4],
                t: 2
            }, {
                p: [-225, 0, -145],
                s: [8, 2, 6],
                col: 1,
                a: .62
            }, {
                p: [-208, 0, -158],
                s: [4, 2, 6],
                col: 1,
                a: .62
            }, {
                p: [-177, 0, -259],
                s: [4, 2, 6],
                col: 1,
                a: .62
            }, {
                p: [-273, 0, -270],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [-242, 0, -431],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [-285, 0, -434],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-195, 0, -397],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [-167, -1, -404],
                s: [8, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-249, 0, -375],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [-5, -28, -393],
                s: [6, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [306, 0, -434],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [334, 0, -200],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [301, 0, -255],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [304, 0, -365],
                s: [6, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [253, 0, -190],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [223, 0, -232],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [183, 0, -284],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [106, 10, -473],
                s: [6, 2, 10],
                col: 1
            }, {
                p: [101, 0, -355],
                s: [4, 2, 8],
                col: 1
            }, {
                p: [15, 0, -345],
                s: [4, 2, 8],
                col: 1,
                a: .67
            }, {
                p: [15, 0, -197],
                s: [4, 2, 8],
                col: 1,
                a: .86
            }, {
                p: [-50, 0, -175],
                s: [6, 2, 8],
                col: 1
            }, {
                p: [97, 0, -87],
                s: [6, 2, 8],
                col: 1
            }, {
                p: [217, 0, -140],
                s: [6, 2, 8],
                col: 1
            }, {
                p: [94, 0, 0],
                s: [10, 2, 4],
                col: 1
            }, {
                p: [-43, 0, -1],
                s: [6, 2, 8],
                col: 1
            }, {
                p: [-11, 18, 15],
                s: [10, 2, 4],
                col: 1
            }, {
                p: [-147, 18, -37],
                s: [10, 2, 4],
                col: 1
            }, {
                p: [-108, 18, 4],
                s: [4, 2, 10],
                col: 1
            }, {
                p: [-136, 0, -52],
                s: [8, 2, 6],
                col: 1,
                a: .62
            }, {
                p: [161, 0, -52],
                s: [6, 2, 8],
                col: 1
            }, {
                p: [42, 0, -147],
                s: [8, 2, 6],
                col: 1
            }, {
                p: [-305, 0, -349],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-332, 0, -270],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-66, -28, -327],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-140, -28, -350],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-7, 0, -112],
                s: [8, 2, 4],
                col: 1
            }, {
                p: [-182, 0, -218],
                s: [4, 2, 8],
                col: 1,
                a: .62
            }, {
                p: [-210, 18, 43],
                s: [8, 2, 4],
                col: 1
            }, {
                p: [-41, 18, 52],
                s: [6, 2, 8],
                col: 1
            }, {
                p: [118, 0, -147],
                s: [6, 2, 8],
                col: 1,
                a: .84
            }, {
                p: [-218, 0, -470],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [-202, 0, -523],
                s: [8, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [258, 0, -386],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [252, 0, -319],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [324, 0, -203],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [221, 0, -278],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [194, 0, -270],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [160, 0, -70],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [-52, 0, -163],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [15, 0, -329],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [251, 0, -407],
                s: [4, 2, 6],
                col: 1
            }, {
                p: [-5, -28, -411],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [252, 0, -301],
                s: [4, 2, 8],
                col: 1
            }, {
                p: [302, 0, -349],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [321, 0, -364],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [132, 0, -209],
                s: [4, 2, 8],
                col: 1,
                a: .86
            }, {
                p: [185, 0, -96],
                s: [4, 2, 4],
                col: 1,
                a: .62
            }, {
                p: [36, 0, -195],
                s: [4, 2, 8],
                col: 1,
                a: .86
            }, {
                p: [38, 0, -307],
                s: [4, 6, 38],
                a: .82
            }, {
                p: [77, 0, -231],
                s: [58, 4, 4],
                a: .82
            }, {
                p: [94, 0, -325],
                s: [22, 6, 4],
                a: .82
            }, {
                p: [107, 0, -314],
                s: [4, 6, 26],
                a: .82
            }, {
                p: [38, 6, -316],
                s: [4, 2, 10]
            }, {
                p: [86, 4, -231],
                s: [14, 2, 4]
            }, {
                p: [107, 6, -321],
                s: [4, 2, 12]
            }, {
                p: [99, 6, -325],
                s: [12, 4, 4]
            }, {
                p: [76, 0, -325],
                s: [14, 2, 4],
                a: .82
            }, {
                p: [101, -2, -239],
                s: [4, 56, 4],
                a: .73,
                t: 2
            }, {
                p: [9, 47, -171],
                s: [4, 4, 14],
                t: 2
            }, {
                p: [101, 47, -248],
                s: [4, 4, 14],
                t: 2
            }, {
                p: [101, 44, -244],
                s: [2, 2, 12],
                col: 1,
                r: [.7, 0, 0],
                t: 2
            }, {
                p: [92, 0, -237],
                s: [6, 2, 4],
                col: 1,
                a: .86
            }, {
                p: [75, 0, -225],
                s: [6, 2, 4],
                col: 1,
                a: .86
            }, {
                p: [-124, 61, -114],
                s: [22, 4, 4],
                t: 2
            }, {
                p: [22, 45, -352],
                s: [6, 14, 2],
                col: 1,
                c: 0
            }, {
                p: [51, 45, -352],
                s: [6, 14, 2],
                col: 1,
                c: 0
            }, {
                p: [79, 45, -352],
                s: [6, 14, 2],
                col: 1,
                c: 0
            }, {
                p: [-52, 30, -283],
                s: [2, 16, 6],
                col: 1,
                c: 0
            }, {
                p: [-63, 68, -456],
                s: [2, 2, 14],
                col: 1,
                r: [-.7, 0, 0],
                t: 2
            }, {
                p: [-115, 57, -114],
                s: [14, 2, 2],
                col: 1,
                r: [0, 0, -.7],
                t: 2
            }, {
                p: [91, 77, -175],
                s: [100, 2, 44],
                a: .73,
                t: 2
            }, {
                p: [146, 14, -425],
                s: [12, 2, 4]
            }, {
                p: [106, 14, -425],
                s: [12, 2, 4]
            }, {
                p: [119, 10, -469],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [204, -28, -413],
                s: [88, 86, 16],
                a: .12
            }, {
                p: [165, 58, -413],
                s: [10, 6, 16],
                col: 1
            }, {
                p: [185, 16, -461],
                s: [20, 2, 4]
            }, {
                p: [72, 0, -279],
                s: [4, 40, 4],
                a: .69,
                c: 14145495,
                t: 2
            }, {
                p: [62, 18, -278],
                s: [8, 6, 8],
                c: 7438128,
                t: 5
            }, {
                p: [72, -1, -279],
                s: [22, 2, 22],
                col: 1,
                a: .86,
                c: 10987431,
                t: 1
            }, {
                p: [72, 0, -291],
                s: [26, 2, 2],
                a: .86
            }, {
                p: [72, 0, -267],
                s: [26, 2, 2],
                a: .86
            }, {
                p: [60, 0, -279],
                s: [2, 2, 22],
                a: .86
            }, {
                p: [84, 0, -279],
                s: [2, 2, 22],
                a: .86
            }, {
                p: [72, 35, -279],
                s: [24, 22, 24],
                c: 7438128,
                t: 5
            }, {
                p: [66, 19, -279],
                s: [8, 2, 2],
                c: 14145495,
                t: 2
            }, {
                p: [78, 26, -279],
                s: [8, 2, 2],
                c: 14145495,
                t: 2
            }, {
                p: [85, 24, -278],
                s: [8, 6, 8],
                c: 7438128,
                t: 5
            }, {
                p: [344, 50, -196],
                s: [12, 4, 18],
                col: 1
            }, {
                p: [340, 50, -160],
                s: [4, 2, 18],
                col: 1
            }, {
                p: [340, 50, -123],
                s: [4, 4, 22],
                col: 1
            }, {
                p: [322, -1, -401],
                s: [20, 2, 96],
                a: .86,
                c: 10987431,
                t: 1
            }, {
                p: [323, 0, -425],
                s: [4, 40, 4],
                a: .69,
                c: 14145495,
                t: 2
            }, {
                p: [323, 0, -382],
                s: [4, 18, 4],
                a: .69,
                c: 14145495,
                t: 2
            }, {
                p: [323, 18, -383],
                s: [4, 2, 2],
                c: 14145495,
                t: 2
            }, {
                p: [317, 26, -425],
                s: [8, 2, 2],
                c: 14145495,
                t: 2
            }, {
                p: [323, 32, -419],
                s: [2, 2, 8],
                c: 14145495,
                t: 2
            }, {
                p: [311, 24, -425],
                s: [8, 6, 8],
                c: 7438128,
                t: 5
            }, {
                p: [324, 30, -413],
                s: [8, 6, 8],
                c: 7438128,
                t: 5
            }, {
                p: [323, 39, -425],
                s: [26, 26, 28],
                c: 7438128,
                t: 5
            }, {
                p: [252, 0, -385],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [144, 58, -294],
                s: [24, 4, 14],
                col: 1
            }, {
                p: [305, -23, -750],
                s: [76, 142, 60],
                col: 1,
                a: .66
            }, {
                p: [277, 119, -727],
                s: [20, 4, 14],
                col: 1
            }, {
                p: [333, 119, -729],
                s: [20, 6, 18],
                col: 1
            }, {
                p: [305, 119, -723],
                s: [14, 4, 6],
                col: 1
            }, {
                p: [306, 80, -720],
                s: [8, 20, 2],
                col: 1,
                c: 0
            }, {
                p: [302, 56, -301],
                s: [14, 2, 2],
                col: 1,
                r: [0, 0, -.7],
                t: 2
            }, {
                p: [85, 62, -453],
                s: [2, 2, 14],
                col: 1,
                r: [-.7, 0, 0],
                t: 2
            }, {
                p: [-22, 65, -523],
                s: [18, 4, 4],
                col: 1
            }, {
                p: [16, 65, -523],
                s: [20, 2, 4],
                col: 1
            }, {
                p: [-191, 0, -503],
                s: [4, 26, 48],
                a: .4
            }, {
                p: [-191, 26, -518],
                s: [4, 2, 12]
            }, {
                p: [-191, 26, -481],
                s: [4, 2, 12]
            }, {
                p: [-155, 26, -477],
                s: [12, 2, 4]
            }, {
                p: [-158, 4, -503],
                s: [62, 16, 48],
                t: 2
            }, {
                p: [-140, 0, -474],
                s: [8, 28, 2],
                id: 3,
                d: 1
            }, {
                p: [-191, 28, -477],
                s: [2, 34, 2],
                c: 7034172,
                t: 5
            }, {
                p: [-199, 52, -477],
                s: [14, 8, 2],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [185, 97, -534],
                s: [2, 38, 2],
                t: 2
            }, {
                p: [193, 126, -534],
                s: [14, 8, 2],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [335, 138, -67],
                s: [2, 38, 2],
                col: 1,
                t: 2
            }, {
                p: [327, 166, -67],
                s: [14, 8, 2],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [-264, 46, -618],
                s: [36, 32, 26],
                col: 1,
                a: .4,
                c: 7438128,
                t: 5
            }, {
                p: [-199, 0, -505],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-243, 34, -594],
                s: [34, 30, 30],
                col: 1,
                a: .46,
                c: 5792804,
                t: 5
            }, {
                p: [-157, 20, -502],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-55, 65, -319],
                s: [2, 46, 2],
                col: 1,
                t: 2
            }, {
                p: [-47, 101, -319],
                s: [14, 8, 2],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [-192, -2, -357],
                s: [2, 36, 2],
                a: .44,
                t: 2
            }, {
                p: [-234, -2, -357],
                s: [2, 36, 2],
                a: .44,
                t: 2
            }, {
                p: [-234, -1, -379],
                s: [2, 26, 2],
                a: .67,
                t: 2
            }, {
                p: [-192, -1, -379],
                s: [2, 26, 2],
                a: .67,
                t: 2
            }, {
                p: [-213, -1, -379],
                s: [40, 8, 2],
                a: .65,
                c: 14935011,
                t: 2
            }, {
                p: [-234, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                t: 5
            }, {
                p: [-228, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                c: 12472400,
                t: 5
            }, {
                p: [-222, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                t: 5
            }, {
                p: [-216, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                c: 12472400,
                t: 5
            }, {
                p: [-210, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                t: 5
            }, {
                p: [-204, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                c: 12472400,
                t: 5
            }, {
                p: [-198, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                t: 5
            }, {
                p: [-192, 34, -357],
                s: [6, 28, 2],
                col: 1,
                r: [-1.92, 0, 0],
                c: 12472400,
                t: 5
            }, {
                p: [-193, 0, -384],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-210, 0, -276],
                s: [76, 4, 2],
                c: 13158600
            }, {
                p: [-210, -1, -284],
                s: [76, 4, 14],
                col: 1,
                c: 2638441,
                t: 5
            }, {
                p: [-253, 0, -269],
                s: [4, 2, 6],
                col: 1,
                a: .62
            }, {
                p: [-176, 0, -270],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-302, 0, -233],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-128, 0, -115],
                s: [6, 2, 66],
                t: 2
            }, {
                p: [-121, 0, -114],
                s: [6, 2, 66],
                c: 13290186,
                t: 2
            }, {
                p: [-132, 2, -113],
                s: [6, 2, 66],
                t: 2
            }, {
                p: [-125, 2, -114],
                s: [6, 2, 66],
                t: 2
            }, {
                p: [-128, 4, -112],
                s: [6, 2, 66],
                c: 12632256,
                t: 2
            }, {
                p: [-135, 0, -112],
                s: [6, 2, 66],
                c: 12303291,
                t: 2
            }, {
                p: [-264, 106, -85],
                s: [2, 38, 2],
                col: 1,
                t: 2
            }, {
                p: [-264, 134, -77],
                s: [2, 8, 14],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [-132, 23, -114],
                s: [2, 40, 2],
                col: 1,
                c: 11645361,
                t: 2
            }, {
                p: [-196, 46, -191],
                s: [34, 26, 76],
                a: .78
            }, {
                p: [-183, 40, -157],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-192, 42, -157],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-201, 41, -157],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-209, 40, -157],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-192, 41, -227],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-183, 40, -227],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-201, 42, -227],
                s: [2, 4, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-209, 40, -227],
                s: [2, 6, 2],
                col: 1,
                a: .78,
                c: 3421236,
                t: 5
            }, {
                p: [-386, 48, -442],
                s: [36, 28, 40],
                col: 1,
                a: .39,
                c: 8820284,
                t: 5
            }, {
                p: [-373, 29, -425],
                s: [36, 32, 44],
                col: 1,
                a: .31,
                c: 7438128,
                t: 5
            }, {
                p: [-373, 29, -472],
                s: [40, 36, 36],
                col: 1,
                a: .5,
                c: 7438128,
                t: 5
            }, {
                p: [-199, 37, -611],
                s: [42, 34, 46],
                col: 1,
                a: .37,
                c: 7438128,
                t: 5
            }, {
                p: [-371, 40, -271],
                s: [38, 34, 34],
                col: 1,
                a: .44,
                c: 5265957,
                t: 5
            }, {
                p: [-411, 39, -504],
                s: [44, 40, 40],
                col: 1,
                a: .37,
                c: 8886333,
                t: 5
            }, {
                p: [269, 11, -631],
                s: [42, 46, 40],
                col: 1,
                a: .46,
                c: 6582317,
                t: 5
            }, {
                p: [235, 29, -672],
                s: [42, 40, 40],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [385, 23, -129],
                s: [42, 46, 40],
                col: 1,
                a: .31,
                c: 7438128,
                t: 5
            }, {
                p: [367, 27, -183],
                s: [28, 36, 42],
                col: 1,
                a: .33,
                c: 9478716,
                t: 5
            }, {
                p: [388, 31, -256],
                s: [28, 30, 30],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [181, 92, 48],
                s: [2, 38, 2],
                col: 1,
                t: 2
            }, {
                p: [181, 120, 40],
                s: [2, 8, 14],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [-295, 48, -617],
                s: [26, 20, 28],
                col: 1,
                a: .57,
                c: 7438128,
                t: 5
            }, {
                p: [238, 27, -10],
                s: [32, 34, 30],
                col: 1,
                a: .31,
                c: 7438128,
                t: 5
            }, {
                p: [298, 46, 62],
                s: [52, 66, 56],
                col: 1,
                a: .53,
                c: 5858344,
                t: 5
            }, {
                p: [310, 35, -2],
                s: [34, 42, 46],
                col: 1,
                a: .31,
                c: 7438128,
                t: 5
            }, {
                p: [228, 20, -591],
                s: [42, 40, 40],
                col: 1,
                a: .69,
                c: 5397538,
                t: 5
            }, {
                p: [427, 39, -38],
                s: [84, 52, 52],
                col: 1,
                a: .52,
                c: 6055470,
                t: 5
            }, {
                p: [287, 30, -583],
                s: [28, 30, 26],
                col: 1,
                a: .33,
                c: 6582317,
                t: 5
            }, {
                p: [260, 44, 32],
                s: [38, 36, 40],
                col: 1,
                a: .35,
                c: 7438128,
                t: 5
            }, {
                p: [-309, 119, -576],
                s: [2, 34, 2],
                col: 1,
                t: 2
            }, {
                p: [-317, 143, -576],
                s: [14, 8, 2],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [-260, 29, -129],
                s: [36, 32, 28],
                col: 1,
                a: .18,
                c: 7438128,
                t: 5
            }, {
                p: [-374, 36, -228],
                s: [36, 36, 44],
                col: 1,
                a: .34,
                c: 7438128,
                t: 5
            }, {
                p: [-400, 40, -389],
                s: [38, 34, 34],
                col: 1,
                c: 5265957,
                t: 5
            }, {
                p: [-287, 54, -40],
                s: [38, 34, 42],
                col: 1,
                a: .6,
                c: 5265957,
                t: 5
            }, {
                p: [-292, 56, 33],
                s: [36, 36, 40],
                col: 1,
                a: .34,
                c: 7438128,
                t: 5
            }, {
                p: [-297, 57, 103],
                s: [38, 34, 48],
                col: 1,
                c: 5265957,
                t: 5
            }, {
                p: [-295, 38, -135],
                s: [38, 34, 34],
                col: 1,
                c: 5265957,
                t: 5
            }, {
                p: [-340, 50, 61],
                s: [36, 36, 40],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-442, 0, 157],
                s: [62, 206, 72],
                col: 1,
                a: .13
            }, {
                p: [-418, 206, 129],
                s: [14, 6, 16],
                col: 1
            }, {
                p: [-414, 206, 157],
                s: [6, 6, 22],
                col: 1
            }, {
                p: [-414, 206, 186],
                s: [6, 4, 14],
                col: 1
            }, {
                p: [-444, 206, 123],
                s: [20, 6, 4],
                col: 1
            }, {
                p: [-468, 206, 123],
                s: [10, 6, 4],
                col: 1
            }, {
                p: [-442, 163, 121],
                s: [8, 20, 2],
                col: 1,
                c: 0
            }, {
                p: [-178, 13, 93],
                s: [4, 74, 4],
                a: .6,
                t: 2
            }, {
                p: [-254, 13, 93],
                s: [4, 74, 4],
                a: .6,
                t: 2
            }, {
                p: [-250, 49, 140],
                s: [36, 36, 40],
                col: 1,
                a: .12,
                c: 7438128,
                t: 5
            }, {
                p: [-194, 50, 125],
                s: [36, 36, 40],
                col: 1,
                a: .32,
                c: 7438128,
                t: 5
            }, {
                p: [189, 46, -30],
                s: [8, 46, 2],
                id: 3,
                d: 1
            }, {
                p: [-19, 64, 74],
                s: [60, 12, 38],
                a: .87
            }, {
                p: [123, 76, 57],
                s: [28, 4, 4],
                col: 1
            }, {
                p: [70, 76, 57],
                s: [34, 2, 4],
                col: 1
            }, {
                p: [21, 76, 57],
                s: [26, 4, 4],
                col: 1
            }, {
                p: [-41, 76, 57],
                s: [12, 2, 4],
                col: 1
            }, {
                p: [-75, 76, 57],
                s: [16, 2, 4],
                col: 1
            }, {
                p: [-127, 76, 57],
                s: [26, 4, 4],
                col: 1
            }, {
                p: [-19, 0, 73],
                s: [60, 64, 2],
                a: .35,
                t: 2
            }, {
                p: [-45, 18, 61],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-13, 32, 71],
                s: [4, 4, 2],
                col: 1,
                a: .41,
                c: 3092271,
                t: 5
            }, {
                p: [-26, 32, 71],
                s: [4, 4, 2],
                col: 1,
                a: .41,
                c: 3092271,
                t: 5
            }, {
                p: [19, 63, 48],
                s: [4, 4, 16],
                t: 2
            }, {
                p: [-56, 63, 48],
                s: [4, 4, 16],
                t: 2
            }, {
                p: [-56, 59, 53],
                s: [2, 2, 12],
                col: 1,
                r: [.87, 0, 0],
                t: 2
            }, {
                p: [19, 59, 53],
                s: [2, 2, 12],
                col: 1,
                r: [.87, 0, 0],
                t: 2
            }, {
                p: [-139, 301, 405],
                s: [110, 66, 86],
                t: 5
            }, {
                p: [-73, 281, 361],
                s: [70, 42, 56],
                t: 5
            }, {
                p: [-527, 412, 373],
                s: [146, 90, 116],
                t: 5
            }, {
                p: [-571, 369, 297],
                s: [118, 72, 94],
                t: 5
            }, {
                p: [673, 319, 120],
                s: [110, 66, 86],
                t: 5
            }, {
                p: [485, 337, 84],
                s: [146, 88, 82],
                t: 5
            }, {
                p: [334, 337, 95],
                s: [58, 26, 46],
                col: 1,
                t: 5
            }, {
                p: [-866, 323, -277],
                s: [146, 90, 196],
                col: 1,
                t: 5
            }, {
                p: [-926, 303, -516],
                s: [122, 76, 160],
                col: 1,
                t: 5
            }, {
                p: [-1998, 360, -35],
                s: [260, 76, 368],
                col: 1,
                t: 5
            }, {
                p: [1593, 397, -140],
                s: [218, 132, 256],
                t: 5
            }, {
                p: [1593, 377, -267],
                s: [118, 72, 92],
                t: 5
            }, {
                p: [-130, 234, -914],
                s: [146, 90, 116],
                t: 5
            }, {
                p: [-46, 204, -952],
                s: [118, 74, 94],
                t: 5
            }, {
                p: [98, 204, -952],
                s: [96, 38, 48],
                col: 1,
                t: 5
            }, {
                p: [735, 363, -1249],
                s: [224, 104, 178],
                t: 5
            }, {
                p: [186, 263, 500],
                s: [104, 58, 112],
                col: 1,
                t: 5
            }, {
                p: [81, 263, 500],
                s: [48, 28, 52],
                col: 1,
                t: 5
            }, {
                p: [-561, 204, -851],
                s: [118, 74, 94],
                t: 5
            }, {
                p: [-21, -28, -517],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-33, -16, -517],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-31, -28, -515],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [60, -28, -424],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [120, 52, 162],
                s: [44, 58, 50],
                col: 1,
                c: 6384434,
                t: 5
            }, {
                p: [-221, 40, 169],
                s: [54, 44, 50],
                col: 1,
                a: .11,
                c: 7438128,
                t: 5
            }, {
                p: [145, 51, 129],
                s: [44, 58, 50],
                col: 1,
                a: .23,
                c: 6384434,
                t: 5
            }, {
                p: [63, -28, -515],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [63, -28, -503],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [53, -28, -517],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [218, 70, -541],
                s: [2, 14, 6],
                col: 1,
                c: 0
            }, {
                p: [170, -47, -750],
                s: [76, 152, 60],
                col: 1,
                a: .66
            }, {
                p: [198, 105, -731],
                s: [20, 6, 22],
                col: 1
            }, {
                p: [142, 105, -731],
                s: [20, 4, 22],
                col: 1
            }, {
                p: [172, 105, -723],
                s: [16, 4, 6],
                col: 1
            }, {
                p: [205, 105, -763],
                s: [6, 6, 16],
                col: 1
            }, {
                p: [-13, 76, 57],
                s: [10, 4, 4],
                col: 1
            }, {
                p: [-19, 70, 102],
                s: [220, 40, 58],
                a: .87
            }, {
                p: [89, 110, 108],
                s: [4, 4, 18],
                col: 1
            }, {
                p: [-119, 110, 80],
                s: [20, 4, 14],
                col: 1
            }, {
                p: [36, 110, 75],
                s: [16, 4, 4],
                col: 1
            }, {
                p: [-2, 110, 75],
                s: [24, 2, 4],
                col: 1
            }, {
                p: [-78, 110, 75],
                s: [14, 2, 4],
                col: 1
            }, {
                p: [-44, 110, 75],
                s: [14, 4, 4],
                col: 1
            }, {
                p: [81, 110, 80],
                s: [20, 4, 14],
                col: 1
            }, {
                p: [-127, 110, 108],
                s: [4, 4, 18],
                col: 1
            }, {
                p: [-121, 99, 70],
                s: [4, 4, 8],
                t: 2
            }, {
                p: [82, 99, 70],
                s: [4, 4, 8],
                t: 2
            }, {
                p: [92, 99, 82],
                s: [12, 4, 4],
                t: 2
            }, {
                p: [-131, 99, 82],
                s: [10, 4, 4],
                t: 2
            }, {
                p: [292, 40, -108],
                s: [60, 2, 10],
                t: 2
            }, {
                p: [320, -28, -111],
                s: [2, 104, 2],
                t: 2
            }, {
                p: [264, -28, -111],
                s: [2, 106, 2],
                t: 2
            }, {
                p: [292, 71, -102],
                s: [60, 2, 24],
                t: 2
            }, {
                p: [264, 52, -93],
                s: [2, 24, 2],
                t: 2
            }, {
                p: [11, -28, -462],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-16, 102, 82],
                s: [2, 38, 2],
                col: 1,
                t: 2
            }, {
                p: [-25, 128, 82],
                s: [16, 10, 2],
                col: 1,
                c: 9190460,
                t: 5
            }, {
                p: [16, 18, 49],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [20, 18, 53],
                s: [2, 6, 2],
                col: 1,
                c: 8886328,
                t: 5
            }, {
                p: [13, 18, 53],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [64, -1, -287],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [79, -1, -271],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [133, -2, -284],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [129, -1, -289],
                s: [2, 6, 2],
                col: 1,
                c: 8622905,
                t: 5
            }, {
                p: [12, -33, -467],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [7, -29, -519],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [64, -32, -491],
                s: [2, 8, 2],
                col: 1,
                c: 9280837,
                t: 5
            }, {
                p: [60, -33, -494],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [68, -29, -495],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [5, -31, -460],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-14, -32, -519],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [35, -31, -461],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [37, -34, -455],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [30, -29, -460],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-35, -29, -460],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [66, 0, -273],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [138, -2, -228],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [142, -4, -232],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [105, -2, -242],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-35, -30, -464],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-243, 0, -270],
                s: [2, 4, 2],
                col: 1,
                a: .62,
                t: 5
            }, {
                p: [-249, -2, -272],
                s: [2, 4, 2],
                col: 1,
                a: .62,
                t: 5
            }, {
                p: [-249, 2, -272],
                s: [4, 2, 4],
                col: 1,
                c: 10518105,
                t: 5
            }, {
                p: [-243, 3, -270],
                s: [4, 2, 4],
                col: 1,
                c: 8874571,
                t: 5
            }, {
                p: [-184, 0, -270],
                s: [2, 4, 2],
                col: 1,
                a: .62,
                t: 5
            }, {
                p: [-184, 3, -270],
                s: [4, 2, 4],
                col: 1,
                c: 10845781,
                t: 5
            }, {
                p: [-245, -1, -280],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-177, -1, -279],
                s: [2, 10, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-188, -1, -272],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-247, -1, -268],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-266, -1, -268],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-222, -1, -231],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-227, -1, -230],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-295, -1, -232],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-291, -4, -231],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [174, 0, -218],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [205, 0, -220],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [201, 0, -216],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [174, 0, -190],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [208, 0, -184],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [209, 0, -179],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-49, 18, 52],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-46, 18, 55],
                s: [2, 4, 2],
                col: 1,
                c: 7043120,
                t: 5
            }, {
                p: [-134, -1, -73],
                s: [2, 10, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-129, -1, -71],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-133, 0, -68],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [250, 0, -372],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [253, 0, -376],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [251, 0, -379],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [317, 0, -370],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [317, 1, -432],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [324, 1, -419],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [323, 1, -391],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [329, 0, -441],
                s: [2, 2, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [38, -2, -176],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [38, -2, -171],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [35, -2, -174],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [162, 0, -89],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [165, 0, -92],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [94, 0, -27],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [91, -2, -24],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [94, -2, -31],
                s: [2, 8, 2],
                col: 1,
                c: 8754743,
                t: 5
            }, {
                p: [-17, -2, -25],
                s: [2, 8, 2],
                col: 1,
                c: 8754743,
                t: 5
            }, {
                p: [-21, -2, -30],
                s: [2, 4, 2],
                col: 1,
                c: 8754743,
                t: 5
            }, {
                p: [-20, -1, -26],
                s: [2, 4, 2],
                col: 1,
                c: 7569967,
                t: 5
            }, {
                p: [-21, 0, -38],
                s: [2, 4, 2],
                col: 1,
                a: .62,
                t: 5
            }, {
                p: [-21, 3, -38],
                s: [4, 2, 4],
                col: 1,
                c: 10845781,
                t: 5
            }, {
                p: [-33, -1, 4],
                s: [2, 4, 2],
                col: 1,
                c: 7569967,
                t: 5
            }, {
                p: [152, 0, 20],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [148, 0, 21],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-217, -1, -148],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-214, -1, -76],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-215, -1, -71],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-219, -1, -78],
                s: [2, 6, 2],
                col: 1,
                c: 9018169,
                t: 5
            }, {
                p: [-213, -1, -150],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-316, -1, -368],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-312, -1, -368],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-316, -2, -372],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-199, 0, -382],
                s: [2, 4, 2],
                col: 1,
                c: 7372586,
                t: 5
            }, {
                p: [-199, -3, -385],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-205, -3, -382],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-195, -3, -483],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-199, 0, -484],
                s: [2, 4, 2],
                col: 1,
                c: 7372586,
                t: 5
            }, {
                p: [-195, -3, -476],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-240, -2, -440],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-243, -2, -435],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-249, 0, -435],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-317, 0, -420],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-176, 18, 44],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-171, 18, 47],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-223, 18, 24],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-228, 18, 44],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-89, -30, -354],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-94, -30, -353],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-109, -30, -324],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-115, -30, -320],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-114, -30, -326],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [1, -1, -190],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-51, -1, -168],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-55, -1, -158],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [73, -31, -451],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [80, -32, -452],
                s: [2, 8, 2],
                col: 1,
                c: 7108662,
                t: 5
            }, {
                p: [157, -32, -430],
                s: [2, 8, 2],
                col: 1,
                c: 6187310,
                t: 5
            }, {
                p: [163, -31, -430],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [192, -31, -423],
                s: [2, 16, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [90, -31, -429],
                s: [2, 8, 2],
                col: 1,
                c: 6187310,
                t: 5
            }, {
                p: [202, -31, -457],
                s: [2, 24, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [106, -28, -454],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [3, -32, -421],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [4, -30, -455],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [251, 0, -288],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [248, 0, -284],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [311, 0, -233],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [323, 0, -244],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-159, -3, -402],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-154, 0, -400],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-313, 10, -493],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-317, 8, -490],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-252, 10, -541],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-256, 8, -545],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-274, 8, -445],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-40, -30, -360],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-43, -30, -354],
                s: [2, 4, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-3, -30, -349],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [1, -30, -310],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [20, 48, -433],
                s: [28, 4, 14],
                col: 1
            }, {
                p: [-58, -28, -457],
                s: [2, 10, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-69, -28, -402],
                s: [2, 12, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-73, -28, -404],
                s: [2, 10, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [20, 48, -453],
                s: [28, 2, 10],
                col: 1
            }, {
                p: [303, 0, -325],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [222, 8, -511],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [218, 10, -507],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [302, 9, -511],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [162, -28, -424],
                s: [4, 42, 6],
                a: .4
            }, {
                p: [251, -1, -416],
                s: [2, 8, 2],
                col: 1,
                c: 7438128,
                t: 5
            }, {
                p: [-109, 40, -404],
                s: [4, 4, 14],
                t: 2
            }, {
                p: [-109, 37, -400],
                s: [2, 2, 14],
                col: 1,
                r: [.7, 0, 0],
                t: 2
            }, {
                p: [20, 34, -461],
                s: [4, 4, 20],
                t: 2
            }, {
                p: [20, 32, -461],
                s: [2, 2, 12],
                col: 1,
                r: [.87, 0, 0],
                t: 2
            }, {
                p: [21, -28, -464],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [21, -16, -464],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-253, 53, -559],
                s: [74, 32, 2],
                c: 6904648,
                t: 5
            }, {
                p: [-286, 48, -562],
                s: [4, 40, 4],
                t: 2
            }, {
                p: [-221, 48, -562],
                s: [4, 40, 4],
                t: 2
            }, {
                p: [260, 53, -560],
                s: [74, 32, 2],
                c: 7363405,
                t: 5
            }, {
                p: [229, 45, -563],
                s: [4, 44, 4],
                t: 2
            }, {
                p: [291, 43, -563],
                s: [4, 46, 4],
                t: 2
            }, {
                p: [-253, 69, -557],
                s: [69, 0, 28],
                id: 11,
                col: 1,
                r: [1.57, 0, 0]
            }, {
                p: [260, 69, -558],
                s: [69, 0, 28],
                id: 11,
                col: 1,
                r: [1.57, 0, 0]
            }, {
                p: [-242, 67, -18],
                s: [2, 26, 62],
                c: 6903619,
                t: 5
            }, {
                p: [-245, 60, 8],
                s: [4, 36, 4],
                t: 2
            }, {
                p: [-245, 60, -45],
                s: [4, 36, 4],
                t: 2
            }, {
                p: [-240, 80, -18],
                s: [57, 0, 22],
                id: 11,
                col: 1,
                r: [1.57, 0, 1.57]
            }, {
                p: [-130, -1, -471],
                s: [2, 6, 2],
                col: 1,
                c: 7438128,
                t: 5
            }]
        }, {
            name: "Littletown",
            modURL: "",
            ambient: 8093324,
            light: 5461350,
            sky: 6716054,
            fog: 7832738,
            fogD: 722.1829102596926,
            camPos: [36, 53, 252],
            spawns: [
                [414, 0, -102],
                [-276, 0, 12],
                [-274, 0, 186],
                [270, 38, 32],
                [-156, 38, 33],
                [-95, 38, -4],
                [371, 0, 87],
                [141, 0, 337]
            ],
            objects: [{
                p: [138, 2, 6],
                s: [4, 36, 60],
                c: 12927811,
                t: 5
            }, {
                p: [205, 36, 30],
                s: [62, 2, 108],
                c: 7368816,
                t: 5
            }, {
                p: [238, 38, 45],
                s: [4, 26, 74],
                c: 16767158,
                t: 5
            }, {
                p: [170, 2, 123],
                s: [30, 116, 18],
                c: 7368816,
                t: 5
            }, {
                p: [-65, 2, 69],
                s: [4, 30, 10],
                c: 5799880,
                t: 5
            }, {
                p: [304, 2, -7],
                s: [2, 52, 12],
                id: 3,
                d: 0
            }, {
                p: [138, 38, 3],
                s: [4, 6, 38],
                c: 12927811,
                t: 5
            }, {
                p: [138, 38, 81],
                s: [4, 6, 34],
                c: 12927811,
                t: 5
            }, {
                p: [138, 38, 43],
                s: [4, 28, 42],
                c: 12927811,
                t: 5
            }, {
                p: [138, 38, 104],
                s: [4, 28, 12],
                c: 12927811,
                t: 5
            }, {
                p: [138, 38, -20],
                s: [4, 28, 8],
                c: 12927811,
                t: 5
            }, {
                p: [138, 66, 43],
                s: [4, 10, 134],
                c: 12927811,
                t: 5
            }, {
                p: [138, 2, 81],
                s: [4, 36, 58],
                c: 12927811,
                t: 5
            }, {
                p: [138, 26, 44],
                s: [4, 12, 16],
                c: 12927811,
                t: 5
            }, {
                p: [220, 2, 112],
                s: [168, 74, 4],
                c: 12927811,
                t: 5
            }, {
                p: [205, 2, -26],
                s: [138, 74, 4],
                c: 12927811,
                t: 5
            }, {
                p: [297, 2, -26],
                s: [14, 74, 4],
                c: 12927811,
                t: 5
            }, {
                p: [282, 26, -26],
                s: [16, 50, 4],
                c: 12927811,
                t: 5
            }, {
                p: [302, 38, 16],
                s: [4, 38, 80],
                c: 12927811,
                t: 5
            }, {
                p: [302, 38, 91],
                s: [4, 38, 38],
                c: 12927811,
                t: 5
            }, {
                p: [302, 62, 64],
                s: [4, 14, 16],
                c: 12927811,
                t: 5
            }, {
                p: [302, 2, 25],
                s: [4, 36, 98],
                c: 12927811,
                t: 5
            }, {
                p: [302, 2, 100],
                s: [4, 36, 20],
                c: 12927811,
                t: 5
            }, {
                p: [302, 26, 82],
                s: [4, 12, 16],
                c: 12927811,
                t: 5
            }, {
                p: [238, 38, -16],
                s: [4, 26, 16],
                c: 16767158,
                t: 5
            }, {
                p: [238, 64, 29],
                s: [4, 12, 106],
                c: 16767158,
                t: 5
            }, {
                p: [176, 34, 98],
                s: [4, 42, 24],
                c: 16767158,
                t: 5
            }, {
                p: [291, 38, 84],
                s: [18, 38, 4],
                c: 16767158,
                t: 5
            }, {
                p: [262, 38, 84],
                s: [8, 38, 4],
                c: 16767158,
                t: 5
            }, {
                p: [274, 62, 84],
                s: [16, 14, 4],
                c: 16767158,
                t: 5
            }, {
                p: [216, 2, 84],
                s: [84, 74, 4],
                c: 16767158,
                t: 5
            }, {
                p: [256, 2, 98],
                s: [4, 36, 24],
                c: 16767158,
                t: 5
            }, {
                p: [238, 2, 67],
                s: [4, 24, 30],
                c: 16767158,
                t: 5
            }, {
                p: [238, 2, -5],
                s: [4, 24, 38],
                c: 16767158,
                t: 5
            }, {
                p: [238, 26, 29],
                s: [4, 12, 107],
                c: 16767158,
                t: 5
            }, {
                p: [157, 36, 43],
                s: [34, 2, 134],
                c: 7368816,
                t: 5
            }, {
                p: [270, 36, 30],
                s: [60, 2, 108],
                c: 7368816,
                t: 5
            }, {
                p: [279, 36, 97],
                s: [42, 2, 26],
                c: 7368816,
                t: 5
            }, {
                p: [220, 0, 43],
                s: [172, 2, 146],
                c: 7368816,
                t: 5
            }, {
                p: [183, 0, -75],
                s: [150, 2, 98],
                c: 7368816,
                t: 5
            }, {
                p: [158, 2, -31],
                s: [4, 30, 6],
                c: 12927811,
                t: 5
            }, {
                p: [158, 2, -74],
                s: [4, 30, 4],
                c: 12927811,
                t: 5
            }, {
                p: [158, 2, -119],
                s: [4, 30, 6],
                c: 12927811,
                t: 5
            }, {
                p: [158, 32, -75],
                s: [4, 12, 94],
                c: 12927811,
                t: 5
            }, {
                p: [254, 2, -60],
                s: [4, 24, 64],
                c: 12927811,
                t: 5
            }, {
                p: [254, 2, -115],
                s: [4, 24, 14],
                c: 12927811,
                t: 5
            }, {
                p: [254, 26, -75],
                s: [4, 18, 94],
                c: 12927811,
                t: 5
            }, {
                p: [206, 2, -120],
                s: [92, 42, 4],
                c: 12927811,
                t: 5
            }, {
                p: [158, 2, -96],
                s: [2, 30, 42],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [170, 0, 125],
                s: [34, 2, 18],
                c: 7368816,
                t: 5
            }, {
                p: [260, 0, -100],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [308, 0, 82],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [-41, 0, -24],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [282, 0, -32],
                s: [20, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [29, -1, 323],
                s: [106, 2, 845],
                c: 3750201,
                t: 5
            }, {
                p: [-65, 32, 115],
                s: [4, 12, 102],
                c: 5799880,
                t: 5
            }, {
                p: [-65, 2, 115],
                s: [4, 30, 10],
                c: 5799880,
                t: 5
            }, {
                p: [-65, 2, 161],
                s: [4, 30, 10],
                c: 5799880,
                t: 5
            }, {
                p: [-145, 2, 161],
                s: [4, 24, 10],
                c: 5799880,
                t: 5
            }, {
                p: [-145, 2, 102],
                s: [4, 24, 76],
                c: 5799880,
                t: 5
            }, {
                p: [-105, 2, 168],
                s: [84, 42, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-145, 26, 115],
                s: [4, 18, 102],
                c: 5799880,
                t: 5
            }, {
                p: [-65, 2, 139],
                s: [2, 30, 42],
                pe: 1,
                t: 5
            }, {
                p: [-91, 0, 118],
                s: [116, 2, 108],
                c: 7368816,
                t: 5
            }, {
                p: [-113, 0, -16],
                s: [140, 2, 164],
                c: 7368816,
                t: 5
            }, {
                p: [-142, 2, 62],
                s: [30, 74, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-78, 2, 62],
                s: [66, 74, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-113, 2, -94],
                s: [136, 74, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 66, -16],
                s: [4, 10, 152],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 38, -77],
                s: [4, 28, 30],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 38, -3],
                s: [4, 28, 42],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 38, 35],
                s: [4, 6, 34],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 38, -43],
                s: [4, 6, 38],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 38, 56],
                s: [4, 28, 8],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 2, -62],
                s: [4, 36, 60],
                c: 5799880,
                t: 5
            }, {
                p: [-47, 26, -24],
                s: [4, 12, 16],
                c: 5799880,
                t: 5
            }, {
                p: [-177, 2, 62],
                s: [8, 74, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-179, 2, 5],
                s: [4, 74, 110],
                c: 5799880,
                t: 5
            }, {
                p: [-179, 2, -79],
                s: [4, 74, 26],
                c: 5799880,
                t: 5
            }, {
                p: [-119, 26, 62],
                s: [16, 50, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-165, 26, 62],
                s: [16, 50, 4],
                c: 5799880,
                t: 5
            }, {
                p: [-140, 2, -80],
                s: [4, 36, 24],
                c: 16767158,
                t: 5
            }, {
                p: [-105, 2, -66],
                s: [74, 74, 4],
                c: 16767158,
                t: 5
            }, {
                p: [-70, 34, -80],
                s: [4, 42, 24],
                c: 16767158,
                t: 5
            }, {
                p: [-179, 26, -58],
                s: [4, 12, 16],
                c: 5799880,
                t: 5
            }, {
                p: [-58, 36, -16],
                s: [20, 2, 152],
                c: 7368816,
                t: 5
            }, {
                p: [-134, 2, 32],
                s: [4, 28, 56],
                c: 16767158,
                t: 5
            }, {
                p: [-134, 2, -49],
                s: [4, 28, 30],
                c: 16767158,
                t: 5
            }, {
                p: [-134, 30, -2],
                s: [4, 8, 124],
                c: 16767158,
                t: 5
            }, {
                p: [-100, 36, -2],
                s: [64, 2, 124],
                c: 7368816,
                t: 5
            }, {
                p: [-157, 36, -3],
                s: [42, 2, 126],
                c: 7368816,
                t: 5
            }, {
                p: [-160, 36, -79],
                s: [36, 2, 26],
                c: 7368816,
                t: 5
            }, {
                p: [-179, 62, -58],
                s: [4, 14, 16],
                c: 5799880,
                t: 5
            }, {
                p: [-134, 38, -57],
                s: [4, 38, 14],
                c: 16767158,
                t: 5
            }, {
                p: [-134, 38, 13],
                s: [4, 38, 94],
                c: 16767158,
                t: 5
            }, {
                p: [-134, 60, -42],
                s: [4, 16, 16],
                c: 16767158,
                t: 5
            }, {
                p: [337, -2, 99],
                s: [4, 40, 4],
                c: 7692103,
                t: 5
            }, {
                p: [306, -2, 99],
                s: [4, 40, 4],
                c: 7692103,
                t: 5
            }, {
                p: [337, -2, 5],
                s: [4, 40, 4],
                c: 7692103,
                t: 5
            }, {
                p: [306, -2, 5],
                s: [4, 40, 4],
                c: 7692103,
                t: 5
            }, {
                p: [322, 34, 52],
                s: [36, 2, 100],
                c: 7692103,
                t: 5
            }, {
                p: [-199, 34, -47],
                s: [36, 2, 82],
                c: 7692103,
                t: 5
            }, {
                p: [-214, -1, -9],
                s: [4, 38, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-214, -1, -85],
                s: [4, 38, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-183, -1, -85],
                s: [4, 38, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-183, -1, -9],
                s: [4, 38, 4],
                c: 7692103,
                t: 5
            }, {
                p: [132, 0, 44],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [-185, 0, -58],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [-151, 0, 148],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [-165, 0, 68],
                s: [18, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [-113, 76, -16],
                s: [146, 4, 170],
                c: 5263440,
                t: 5
            }, {
                p: [-105, 44, 119],
                s: [94, 4, 112],
                c: 5263440,
                t: 5
            }, {
                p: [220, 76, 43],
                s: [178, 4, 152],
                c: 5263440,
                t: 5
            }, {
                p: [206, 44, -77],
                s: [108, 4, 98],
                c: 5263440,
                t: 5
            }, {
                p: [-79, 2, -105],
                s: [30, 118, 18],
                c: 7368816,
                t: 5
            }, {
                p: [-79, 0, -107],
                s: [34, 2, 18],
                c: 7368816,
                t: 5
            }, {
                p: [32, 2, -207],
                s: [124, 74, 150],
                c: 12958048,
                t: 5
            }, {
                p: [32, 74, -207],
                s: [136, 4, 162],
                c: 5263440,
                t: 5
            }, {
                p: [32, 0, -207],
                s: [128, 2, 154],
                c: 7368816,
                t: 5
            }, {
                p: [94, -1, 159],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [94, -1, 217],
                s: [2, 24, 113],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [246, -1, 159],
                s: [302, 24, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [-37, -1, 235],
                s: [2, 24, 58],
                c: 7692103,
                t: 5
            }, {
                p: [-37, -1, 205],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-163, -1, 205],
                s: [254, 24, 2],
                c: 7692103,
                t: 5
            }, {
                p: [398, -1, 159],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [399, -1, 59],
                s: [2, 24, 206],
                c: 7692103,
                t: 5
            }, {
                p: [399, -1, -156],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [260, -1, -157],
                s: [340, 24, 2],
                c: 7692103,
                t: 5
            }, {
                p: [-161, -1, -157],
                s: [262, 24, 2],
                c: 7692103,
                t: 5
            }, {
                p: [-290, -1, 204],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-291, -1, 24],
                s: [2, 24, 358],
                c: 7692103,
                t: 5
            }, {
                p: [-290, -1, -156],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-181, 2, 3],
                s: [2, 52, 12],
                id: 3,
                d: 2
            }, {
                p: [32, 0, -121],
                s: [48, 2, 18],
                c: 7368816,
                t: 5
            }, {
                p: [32, 39, -123],
                s: [46, 3, 19],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [-251, -1, 171],
                s: [2, 24, 64],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [-267, 0, 73],
                s: [46, 30, 42],
                c: 5799880,
                t: 5
            }, {
                p: [-267, 30, 73],
                s: [54, 2, 50],
                c: 5395026,
                t: 5
            }, {
                p: [343, 0, -138],
                s: [52, 32, 36],
                c: 12927811,
                t: 5
            }, {
                p: [343, 32, -138],
                s: [56, 2, 40],
                c: 5263440,
                t: 5
            }, {
                p: [399, -1, -46],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [416, -1, -45],
                s: [30, 24, 2],
                c: 7692103,
                t: 5
            }, {
                p: [431, -1, -46],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [432, -1, -101],
                s: [2, 24, 110],
                c: 7692103,
                t: 5
            }, {
                p: [431, -1, -156],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-250, -1, 16],
                s: [8, 24, 72],
                pe: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-213, -1, -120],
                s: [8, 10, 20],
                pe: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-232, 26, -143],
                s: [58, 2, 32],
                c: 7039851,
                t: 5
            }, {
                p: [-232, 0, -143],
                s: [52, 26, 26],
                c: 5799880,
                t: 5
            }, {
                p: [-233, -1, 86],
                s: [22, 10, 8],
                c: 6984507,
                t: 5
            }, {
                p: [313, -1, -134],
                s: [8, 10, 44],
                c: 6984507,
                t: 5
            }, {
                p: [-144, -1, -154],
                s: [124, 10, 5],
                c: 6984507,
                t: 5
            }, {
                p: [435, 0, -16],
                s: [52, 32, 36],
                c: 12927811,
                t: 5
            }, {
                p: [435, 32, -16],
                s: [56, 2, 40],
                c: 5263440,
                t: 5
            }, {
                p: [399, -2, -100],
                s: [8, 20, 56],
                pe: 1,
                c: 6984507,
                t: 5
            }, {
                p: [342, -1, 52],
                s: [6, 10, 104],
                c: 6984507,
                t: 5
            }, {
                p: [-251, -1, 205],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-251, -1, 107],
                s: [2, 24, 26],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [151, 2, -99],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [340, 0, -114],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [108, 0, 152],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [108, 12, 152],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [191, 2, -112],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [246, 2, -50],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-137, 2, 116],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-104, 2, 160],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-56, 0, 198],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-56, 12, 198],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-139, 2, 106],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [248, 2, -60],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-202, 0, -148],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-92, 2, 160],
                s: [12, 12, 12],
                id: 8
            }, {
                p: [203, 2, -112],
                s: [12, 12, 12],
                id: 8
            }, {
                p: [130, 34, 79],
                s: [12, 2, 42],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [136, 2, 105],
                s: [2, 42, 8],
                id: 3,
                d: 2
            }, {
                p: [-47, 44, 35],
                s: [1, 22, 34],
                pe: 1,
                c: 9533019,
                t: 5
            }, {
                p: [-219, -1, 176],
                s: [4, 32, 4],
                c: 6574655,
                t: 5
            }, {
                p: [-219, 30, 176],
                s: [26, 26, 28],
                c: 6193707,
                t: 5
            }, {
                p: [-219, 20, 181],
                s: [2, 2, 8],
                c: 6574655,
                t: 5
            }, {
                p: [-219, 19, 188],
                s: [6, 6, 8],
                c: 6193707,
                t: 5
            }, {
                p: [-224, 18, 176],
                s: [6, 2, 2],
                c: 6574655,
                t: 5
            }, {
                p: [-229, 17, 176],
                s: [6, 4, 6],
                c: 6193707,
                t: 5
            }, {
                p: [375, -1, 138],
                s: [4, 32, 4],
                c: 6574655,
                t: 5
            }, {
                p: [375, 29, 138],
                s: [26, 26, 28],
                c: 6193707,
                t: 5
            }, {
                p: [375, 19, 133],
                s: [2, 2, 8],
                c: 6574655,
                t: 5
            }, {
                p: [375, 18, 127],
                s: [6, 6, 8],
                c: 6193707,
                t: 5
            }, {
                p: [371, 15, 138],
                s: [6, 2, 2],
                c: 6574655,
                t: 5
            }, {
                p: [365, 14, 138],
                s: [6, 4, 6],
                c: 6193707,
                t: 5
            }, {
                p: [33, 3, 67],
                s: [32, 32, 116],
                t: 5
            }, {
                p: [33, 1, 67],
                s: [34, 2, 118],
                c: 9012870,
                t: 5
            }, {
                p: [33, 35, 67],
                s: [34, 2, 118],
                c: 9012870,
                t: 5
            }, {
                p: [37, 1, -78],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [49, 1, -78],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [44, 1, -66],
                s: [12, 12, 12],
                id: 8
            }, {
                p: [42, 0, 4],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [35, 0, 4],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [29, 0, 4],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [41, 13, -78],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [130, 2, 51],
                s: [16, 24, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [-39, 2, -31],
                s: [16, 24, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [29, 1, 225],
                s: [51, 15, 20],
                id: 7,
                col: 1
            }, {
                p: [-125, -1, 175],
                s: [4, 22, 2],
                col: 1,
                r: [-.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [-113, 0, 175],
                s: [4, 22, 2],
                col: 1,
                r: [-.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [154, 2, -46],
                s: [51, 15, 20],
                id: 7,
                col: 1,
                r: [-3.14, 0, -3.14]
            }, {
                p: [54, 1, 116],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-59, 2, 115],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [11, 1, 76],
                s: [6, 2, 92],
                c: 8678483,
                t: 5
            }, {
                p: [4, 1, 75],
                s: [6, 2, 92],
                c: 7692103,
                t: 5
            }, {
                p: [-3, 1, 77],
                s: [6, 2, 92],
                c: 5259054,
                t: 5
            }, {
                p: [-1, 3, 76],
                s: [6, 2, 92],
                c: 7692103,
                t: 5
            }, {
                p: [7, 3, 77],
                s: [6, 2, 92],
                c: 7692103,
                t: 5
            }, {
                p: [3, 5, 77],
                s: [6, 2, 92],
                c: 7035206,
                t: 5
            }, {
                p: [33, 1, 126],
                s: [8, 38, 2],
                id: 3,
                d: 1
            }, {
                p: [33, 3, 125],
                s: [10, 34, 2],
                v: 1,
                t: 5
            }, {
                p: [169, 0, -150],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [89, 0, 175],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [394, 0, 28],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-246, 0, 112],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [29, 1, 225],
                s: [48, 8, 16],
                v: 1,
                t: 5
            }, {
                p: [34, 8, 225],
                s: [24, 8, 16],
                v: 1,
                t: 5
            }, {
                p: [148, 9, -45],
                s: [24, 8, 16],
                v: 1,
                t: 5
            }, {
                p: [154, 3, -45],
                s: [48, 8, 16],
                v: 1,
                t: 5
            }, {
                p: [138, 44, 3],
                s: [1, 22, 38],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [117, 21, 180],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [117, -1, 180],
                s: [4, 28, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-64, -1, 235],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-64, 21, 235],
                s: [26, 28, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [-42, 23, 288],
                s: [27, 28, 24],
                pe: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-37, -1, 265],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [94, -1, 275],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-42, -1, 289],
                s: [4, 31, 4],
                pe: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-315, -1, 13],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-321, -1, -132],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [459, 14, -62],
                s: [26, 27, 35],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [207, 17, -188],
                s: [26, 25, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-102, 16, -181],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-320, 19, 175],
                s: [26, 28, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [85, 0, 188],
                s: [2, 73, 2],
                c: 7368816,
                t: 5
            }, {
                p: [79, 71, 188],
                s: [10, 2, 2],
                c: 7368816,
                t: 5
            }, {
                p: [75, 70, 498],
                s: [10, 2, 4],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [75, 69, 188],
                s: [9, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-27, 0, 332],
                s: [2, 73, 2],
                c: 7368816,
                t: 5
            }, {
                p: [-21, 71, 332],
                s: [10, 2, 2],
                c: 7368816,
                t: 5
            }, {
                p: [-17, 70, 332],
                s: [10, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [-17, 69, 332],
                s: [9, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-9, 0, -104],
                s: [2, 73, 2],
                c: 7368816,
                t: 5
            }, {
                p: [-9, 71, -99],
                s: [2, 2, 8],
                c: 7368816,
                t: 5
            }, {
                p: [-9, 69, -96],
                s: [2, 1, 8],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-9, 70, -96],
                s: [3, 2, 9],
                c: 7368816,
                t: 5
            }, {
                p: [279, 15, 184],
                s: [26, 28, 28],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-33, -1, 202],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-32, -1, 208],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-41, -2, 201],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-27, -2, 237],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [84, 0, 169],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [90, -2, 166],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [131, -1, -22],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [60, 0, -124],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [64, 0, -126],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-14, 0, -105],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-5, 0, -102],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-10, -1, -108],
                s: [1, 8, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-32, -3, 65],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-34, -1, 61],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-39, -1, -96],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-25, -4, 122],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-26, -3, 37],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-69, -1, 174],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [85, 0, -29],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [86, 0, 119],
                s: [1, 3, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [114, -1, 144],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [132, 0, 112],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [131, 0, 27],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [106, 0, -118],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [98, 0, -135],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [90, -2, -128],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [84, -2, 116],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-31, -4, 149],
                s: [1, 8, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-96, -2, 201],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-67, -1, 201],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-26, -1, -44],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [87, -2, 238],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-99, -2, -113],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-35, -1, -153],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-204, -1, -143],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-196, -2, -147],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-184, 0, -46],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-180, 0, 68],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-151, 0, 69],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-147, -1, 174],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-216, -1, 180],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-216, -3, 172],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-247, -2, 118],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-243, -2, 50],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-241, -3, 79],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-254, -2, -128],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-251, -4, -127],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [292, -1, -154],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [177, -1, -147],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [177, -3, -154],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [296, -1, -34],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [260, -1, -72],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [260, -2, -35],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [404, -2, -49],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [429, -2, -60],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [405, -2, -153],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [307, -3, -18],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [391, -2, 22],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [371, -3, 135],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [334, -2, 156],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [308, -3, 114],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [189, -2, 132],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [151, -2, 131],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [229, -2, 156],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [308, -2, 59],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-218, 0, -88],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-158, -1, -100],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [133, 0, 69],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [84, 0, 12],
                s: [1, 5, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [36, -1, -101],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-321, 11, -132],
                s: [26, 30, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [206, -1, -125],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [230, 2, 2],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [246, 2, 62],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [246, 38, 28],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [190, 38, 76],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-126, 38, 36],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-171, 38, -16],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-126, 2, -58],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-55, 2, -1],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-84, 38, 56],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [-76, 38, 56],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [-96, 38, 56],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [-114, 39, 29],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, .52, 0],
                c: 10987431,
                t: 5
            }, {
                p: [-81, 39, 47],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 11645361,
                t: 5
            }, {
                p: [-144, 39, -57],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 10658466,
                t: 5
            }, {
                p: [-109, 3, -53],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 11184810,
                t: 5
            }, {
                p: [60, 2, -62],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [8, 2, 178],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 10329501,
                t: 5
            }, {
                p: [-120, 38, 28],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-67, 39, -59],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [-3.14, 1.05, -3.14],
                c: 10987431,
                t: 5
            }, {
                p: [-120, 40, 28],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-53, 38, 55],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-53, 40, 55],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-80, 38, -62],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-80, 40, -62],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-138, 38, -11],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-138, 40, -11],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-142, 39, -5],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [3.14, -1.04, 3.14],
                c: 10658466,
                t: 5
            }, {
                p: [-89, 38, -58],
                s: [12, 12, 12],
                id: 8
            }, {
                p: [-70, 3, 108],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [-3.14, 1.05, -3.14],
                c: 10987431,
                t: 5
            }, {
                p: [-86, 2, 66],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-86, 4, 66],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-106, 3, 127],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [-3.14, 1.05, -3.14],
                c: 10987431,
                t: 5
            }, {
                p: [-103, 3, 119],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, .7, 0],
                c: 10987431,
                t: 5
            }, {
                p: [-92, 4, 58],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-92, 2, 58],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [173, 2, -20],
                s: [1, 8, 7],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [195, 2, -20],
                s: [1, 8, 7],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [184, 9, -20],
                s: [11, 1, 4],
                pe: 1,
                c: 3421236,
                t: 5
            }, {
                p: [184, 8, -20],
                s: [21, 1, 6],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [184, 10, -20],
                s: [2, 1, 1],
                pe: 1,
                c: 3421236,
                t: 5
            }, {
                p: [184, 11, -20],
                s: [22, 11, 1],
                pe: 1,
                c: 3421236,
                t: 5
            }, {
                p: [184, 12, -19],
                s: [20, 9, 1],
                pe: 1,
                c: 3421236,
                e: 16777215,
                t: 5
            }, {
                p: [164, 3, -13],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [235, 3, 48],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [-3.14, 1.4, -3.14],
                c: 9671571,
                t: 5
            }, {
                p: [143, 2, 84],
                s: [1, 17, 3],
                col: 1,
                r: [0, 0, .17],
                c: 7692103,
                t: 5
            }, {
                p: [143, 2, 80],
                s: [1, 17, 3],
                col: 1,
                r: [0, 0, .17],
                c: 7692103,
                t: 5
            }, {
                p: [225, 3, 68],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [55, 30, 23],
                s: [5, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [52, 32, 23],
                s: [8, 1, 1],
                c: 9012870,
                t: 5
            }, {
                p: [55, 29, 23],
                s: [4, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [15, 32, 121],
                s: [8, 1, 1],
                c: 9012870,
                t: 5
            }, {
                p: [12, 30, 121],
                s: [5, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [12, 29, 121],
                s: [4, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [258, 30, -100],
                s: [8, 1, 1],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [261, 28, -100],
                s: [5, 2, 3],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [261, 27, -100],
                s: [4, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-152, 27, 148],
                s: [5, 2, 3],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-150, 29, 148],
                s: [6, 1, 1],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-152, 26, 148],
                s: [4, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-242, 26, 73],
                s: [4, 1, 1],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-240, 24, 73],
                s: [4, 2, 3],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-240, 23, 73],
                s: [3, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-234, 22, -128],
                s: [1, 1, 4],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-234, 20, -126],
                s: [3, 2, 4],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-234, 19, -126],
                s: [2, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [306, 65, 63],
                s: [8, 1, 1],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [309, 63, 63],
                s: [5, 2, 3],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [309, 62, 63],
                s: [4, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [198, 0, 242],
                s: [123, 42, 120],
                c: 5799880,
                t: 5
            }, {
                p: [198, 42, 242],
                s: [130, 2, 128],
                c: 8553090,
                t: 5
            }, {
                p: [167, 0, 311],
                s: [30, 61, 18],
                c: 7368816,
                t: 5
            }, {
                p: [303, 6, 186],
                s: [23, 27, 23],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [331, 10, 205],
                s: [31, 30, 30],
                col: 1,
                c: 7576379,
                t: 5
            }, {
                p: [-121, 0, 322],
                s: [123, 60, 120],
                c: 12951902,
                t: 5
            }, {
                p: [-121, 60, 322],
                s: [130, 2, 126],
                c: 6908265,
                t: 5
            }, {
                p: [-58, 35, 356],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-58, 36, 356],
                s: [1, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-59, 36, 362],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-59, 36, 350],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-59, 48, 356],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-59, 36, 356],
                s: [1, 12, 11],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-112, 35, 261],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-112, 36, 262],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-106, 36, 262],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-118, 36, 262],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-112, 48, 262],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-112, 36, 262],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [77, 49, -131],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [77, 50, -132],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [71, 50, -132],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [83, 50, -132],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [77, 62, -132],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [77, 50, -132],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [95, 47, -163],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [94, 48, -163],
                s: [1, 12, 11],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [93, 48, -157],
                s: [4, 13, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [94, 60, -163],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [93, 48, -169],
                s: [4, 13, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [93, 48, -163],
                s: [4, 13, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [32, 0, -109],
                s: [23, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [113, -1, 298],
                s: [4, 28, 4],
                c: 6574655,
                t: 5
            }, {
                p: [114, 22, 298],
                s: [26, 28, 28],
                c: 5204775,
                t: 5
            }, {
                p: [-121, 0, 322],
                s: [135, 8, 133],
                c: 6193707,
                t: 5
            }, {
                p: [124, 11, -198],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [418, 15, -183],
                s: [26, 33, 28],
                col: 1,
                c: 7247414,
                t: 5
            }, {
                p: [163, 2, 422],
                s: [113, 78, 116],
                c: 12927811,
                t: 5
            }, {
                p: [165, 0, 419],
                s: [134, 8, 126],
                c: 6193707,
                t: 5
            }, {
                p: [85, 0, 498],
                s: [2, 73, 2],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [79, 71, 498],
                s: [10, 2, 2],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [75, 70, 188],
                s: [10, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [75, 69, 498],
                s: [9, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [163, 80, 422],
                s: [123, 3, 125],
                col: 1,
                c: 5921370,
                t: 5
            }, {
                p: [106, 54, 387],
                s: [1, 12, 11],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [105, 53, 387],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [105, 66, 387],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 393],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 381],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 387],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 452],
                s: [1, 12, 11],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [105, 53, 452],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [105, 66, 452],
                s: [3, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 446],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 458],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [106, 54, 452],
                s: [2, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [253, -1, 376],
                s: [4, 28, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [253, 22, 376],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-224, 19, 248],
                s: [26, 28, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [-224, -1, 248],
                s: [4, 23, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-89, 0, 470],
                s: [104, 135, 116],
                c: 10658466,
                t: 5
            }, {
                p: [-30, -1, 392],
                s: [4, 31, 4],
                c: 6574655,
                t: 5
            }, {
                p: [-30, 23, 392],
                s: [27, 28, 24],
                c: 6193707,
                t: 5
            }, {
                p: [-89, 135, 470],
                s: [110, 3, 122],
                col: 1,
                c: 5921370,
                t: 5
            }, {
                p: [-89, 65, 470],
                s: [111, 5, 124],
                c: 5921370,
                t: 5
            }, {
                p: [-27, 0, 651],
                s: [2, 73, 2],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [-21, 71, 651],
                s: [10, 2, 2],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [-17, 70, 651],
                s: [10, 2, 4],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [-17, 69, 651],
                s: [9, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-28, 0, 308],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [107, -1, 504],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [107, 21, 504],
                s: [27, 28, 24],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [156, 0, 621],
                s: [123, 84, 120],
                col: 1,
                c: 12951902,
                t: 5
            }, {
                p: [-97, 0, 686],
                s: [123, 52, 120],
                col: 1,
                c: 5799880,
                t: 5
            }, {
                p: [-97, 52, 686],
                s: [131, 4, 132],
                col: 1,
                c: 5723991,
                t: 5
            }, {
                p: [156, 84, 621],
                s: [131, 5, 132],
                col: 1,
                c: 5723991,
                t: 5
            }, {
                p: [489, 22, 19],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [424, 18, 101],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [427, 15, 26],
                s: [27, 30, 30],
                col: 1,
                c: 7576379,
                t: 5
            }, {
                p: [387, 13, 187],
                s: [23, 27, 23],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [396, -2, -1],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [394, -4, -43],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [458, 18, 69],
                s: [23, 24, 27],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [727, 0, -41],
                s: [104, 74, 79],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [687, 74, -41],
                s: [24, 48, 26],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [727, 74, -41],
                s: [105, 6, 76],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [687, 121, -41],
                s: [31, 6, 32],
                col: 1,
                c: 7890002,
                t: 5
            }, {
                p: [687, 127, -41],
                s: [22, 13, 19],
                col: 1,
                c: 7890002,
                t: 5
            }, {
                p: [727, 80, -41],
                s: [105, 6, 54],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [727, 84, -61],
                s: [115, 6, 53],
                col: 1,
                r: [-.52, 0, 0],
                c: 7890002,
                t: 5
            }, {
                p: [681, 154, -41],
                s: [2, 25, 2],
                col: 1,
                c: 7890002,
                t: 5
            }, {
                p: [681, 171, -41],
                s: [2, 2, 14],
                col: 1,
                c: 7890002,
                t: 5
            }, {
                p: [687, 124, -30],
                s: [22, 33, 11],
                col: 1,
                r: [-.35, 0, 0],
                c: 7890002,
                t: 5
            }, {
                p: [687, 124, -52],
                s: [22, 33, 11],
                col: 1,
                r: [.35, 0, 0],
                c: 7890002,
                t: 5
            }, {
                p: [727, 84, -22],
                s: [115, 6, 51],
                col: 1,
                r: [.53, 0, 0],
                c: 7890002,
                t: 5
            }, {
                p: [727, 80, -41],
                s: [105, 12, 34],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [674, 0, -41],
                s: [2, 57, 32],
                col: 1,
                c: 7890002,
                t: 5
            }, {
                p: [692, 16, -106],
                s: [26, 31, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [691, -1, -106],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [648, 17, 8],
                s: [26, 34, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [648, -1, 9],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [458, 17, -140],
                s: [26, 31, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [621, 18, -154],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [621, -1, -154],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [208, 0, -376],
                s: [121, 69, 83],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [674, 108, -41],
                s: [1, 9, 9],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [673, 113, -41],
                s: [1, 4, 1],
                col: 1,
                c: 2960685,
                t: 5
            }, {
                p: [673, 113, -41],
                s: [1, 4, 1],
                col: 1,
                r: [2.09, 0, 0],
                c: 2960685,
                t: 5
            }, {
                p: [674, 64, -41],
                s: [2, 19, 4],
                col: 1,
                c: 2105376,
                t: 5
            }, {
                p: [752, 18, 167],
                s: [39, 24, 1182],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [611, 18, -401],
                s: [257, 31, 27],
                col: 1,
                c: 6060596,
                t: 5
            }, {
                p: [592, 31, -395],
                s: [38, 34, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [737, 15, -383],
                s: [47, 36, 49],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [746, 22, -200],
                s: [38, 28, 38],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [746, 22, -292],
                s: [38, 33, 38],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [748, 0, -142],
                s: [4, 23, 132],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [758, 0, -298],
                s: [4, 23, 219],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [735, -1, -287],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [27, 0, 172],
                s: [1506, 0, 1212],
                id: 4,
                c: 7504967,
                t: 5
            }, {
                p: [640, 0, -405],
                s: [307, 23, 5],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [542, -1, -391],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [610, 18, -235],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [610, -1, -235],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [460, -1, -324],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [460, 18, -324],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [748, 0, 331],
                s: [4, 23, 852],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [501, 17, -113],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [459, 9, -102],
                s: [25, 26, 25],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [451, 22, 93],
                s: [26, 24, 25],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [427, 10, 60],
                s: [26, 28, 29],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [424, 15, 135],
                s: [30, 28, 27],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [501, 16, -8],
                s: [29, 25, 29],
                col: 1,
                c: 4941357,
                t: 5
            }, {
                p: [530, 9, -52],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [595, 9, 107],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [418, 13, 183],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [477, 20, 166],
                s: [27, 30, 30],
                col: 1,
                c: 7576379,
                t: 5
            }, {
                p: [746, 22, 77],
                s: [38, 28, 44],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [746, 22, 140],
                s: [38, 29, 41],
                col: 1,
                c: 6588720,
                t: 5
            }, {
                p: [439, 8, 46],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [395, -2, 116],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [746, 23, 254],
                s: [38, 28, 34],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [746, 18, 349],
                s: [38, 29, 74],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [450, 14, -177],
                s: [25, 30, 25],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [166, 0, -429],
                s: [1786, 23, 5],
                col: 1,
                c: 5917499,
                t: 5
            }, {
                p: [-81, 19, -418],
                s: [1233, 31, 27],
                col: 1,
                c: 6060596,
                t: 5
            }, {
                p: [436, 16, -407],
                s: [38, 37, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [319, 17, -407],
                s: [38, 37, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [437, -1, -401],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [318, -1, -401],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [291, -1, -412],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [371, -1, -412],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [376, 31, -439],
                s: [38, 33, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [291, -1, -234],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [291, 8, -237],
                s: [31, 33, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [208, 69, -376],
                s: [128, 3, 89],
                col: 1,
                c: 6381921,
                t: 5
            }, {
                p: [399, -1, 45],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [408, -1, -415],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [242, 47, -334],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [173, 47, -334],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [173, 46, -333],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [173, 59, -333],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [242, 59, -333],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [242, 46, -333],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [167, 47, -334],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [179, 47, -334],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [236, 47, -334],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [248, 47, -334],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [242, 47, -334],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [173, 47, -334],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-24, 112, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 66, 470],
                s: [14, 57, 3],
                col: 1,
                c: 5921370,
                t: 5
            }, {
                p: [-30, 112, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 116, 468],
                s: [4, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-24, 101, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-30, 101, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 101, 468],
                s: [4, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 108, 468],
                s: [4, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 90, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 97, 468],
                s: [8, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-25, 79, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 86, 468],
                s: [6, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 79, 468],
                s: [6, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-27, 82, 468],
                s: [6, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-25, 68, 468],
                s: [2, 9, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-28, 68, 468],
                s: [6, 2, 1],
                col: 1,
                c: 5723991,
                e: 16711680,
                t: 5
            }, {
                p: [-37, 108, 470],
                s: [6, 3, 3],
                col: 1,
                c: 5921370,
                t: 5
            }, {
                p: [-37, 77, 470],
                s: [6, 3, 3],
                col: 1,
                c: 5921370,
                t: 5
            }, {
                p: [65, 1, 654],
                s: [20, 15, 51],
                id: 7,
                col: 1,
                r: [0, -1.57, 0]
            }, {
                p: [106, -1, -84],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [6, -1, -127],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [83, -4, 59],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-247, -2, 198],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [32, 0, 814],
                s: [79, 135, 116],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [32, 135, 814],
                s: [87, 3, 124],
                col: 1,
                c: 6052956,
                t: 5
            }, {
                p: [88, -1, 709],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [90, 17, 708],
                s: [27, 28, 24],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-33, -1, 770],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-34, 16, 770],
                s: [27, 28, 24],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [115, -2, 958],
                s: [113, 65, 116],
                col: 1,
                c: 12927811,
                t: 5
            }, {
                p: [115, 63, 958],
                s: [124, 5, 126],
                col: 1,
                c: 5066061,
                t: 5
            }, {
                p: [-63, -18, 928],
                s: [123, 112, 120],
                col: 1,
                c: 12951902,
                t: 5
            }, {
                p: [-63, 93, 928],
                s: [131, 4, 127],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [-155, -75, 1251],
                s: [79, 289, 61],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [151, -31, 1120],
                s: [108, 142, 61],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [308, 0, 1120],
                s: [79, 220, 61],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [-269, -31, 1008],
                s: [108, 142, 113],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [437, 0, 747],
                s: [677, 23, 5],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [609, 21, 751],
                s: [315, 24, 44],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [269, 21, 751],
                s: [374, 27, 53],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [525, 20, 744],
                s: [38, 29, 41],
                col: 1,
                c: 6588720,
                t: 5
            }, {
                p: [744, 18, 739],
                s: [43, 35, 46],
                col: 1,
                c: 6588720,
                t: 5
            }, {
                p: [333, 22, 743],
                s: [38, 32, 41],
                col: 1,
                c: 6588720,
                t: 5
            }, {
                p: [636, 20, 744],
                s: [38, 29, 41],
                col: 1,
                c: 6588720,
                t: 5
            }, {
                p: [746, 23, 557],
                s: [38, 28, 34],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [443, 24, 258],
                s: [23, 24, 23],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [359, 11, 197],
                s: [24, 24, 30],
                col: 1,
                c: 6390324,
                t: 5
            }, {
                p: [313, 13, 245],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [369, 60, 323],
                s: [132, 3, 130],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [369, -4, 323],
                s: [123, 64, 120],
                col: 1,
                c: 12951902,
                t: 5
            }, {
                p: [252, 12, -209],
                s: [26, 28, 28],
                col: 1,
                c: 4940075,
                t: 5
            }, {
                p: [208, -1, -370],
                s: [137, 10, 89],
                c: 6984507,
                t: 5
            }, {
                p: [373, 18, -259],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [247, 24, 743],
                s: [38, 32, 41],
                col: 1,
                c: 6588720,
                t: 5
            }, {
                p: [571, -57, 1262],
                s: [79, 220, 61],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [563, 13, 53],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [439, 5, 10],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [288, 9, -185],
                s: [25, 26, 25],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [337, 14, -183],
                s: [25, 26, 25],
                col: 1,
                c: 6720572,
                t: 5
            }, {
                p: [164, 6, -221],
                s: [25, 30, 25],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [213, 12, -250],
                s: [21, 25, 21],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [368, 15, -183],
                s: [26, 27, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [392, 11, -194],
                s: [25, 26, 25],
                col: 1,
                c: 5666099,
                t: 5
            }, {
                p: [316, 5, -203],
                s: [25, 26, 25],
                col: 1,
                c: 5666099,
                t: 5
            }, {
                p: [439, 8, 83],
                s: [29, 25, 29],
                col: 1,
                c: 5732402,
                t: 5
            }, {
                p: [212, 18, -319],
                s: [26, 28, 28],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [51, 31, -439],
                s: [38, 33, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [111, 17, -407],
                s: [38, 37, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [25, -1, -412],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [111, -1, -401],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [73, -1, -407],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-92, 17, -407],
                s: [38, 37, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-175, 27, -427],
                s: [38, 33, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-175, 27, -427],
                s: [38, 33, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-90, -1, -400],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-174, -1, -418],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [158, 0, -153],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-67, 22, -274],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-66, -1, -273],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-12, 50, -132],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-12, 49, -131],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-12, 62, -132],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-18, 50, -132],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-6, 50, -132],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-12, 50, -132],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-63, 10, -181],
                s: [25, 30, 25],
                col: 1,
                c: 6851648,
                t: 5
            }, {
                p: [-37, -2, -3],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [32, 26, -126],
                s: [44, 13, 22],
                c: 12958048,
                t: 5
            }, {
                p: [125, -1, 2],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [128, 0, 89],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [88, -1, 82],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [142, -1, 128],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [-37, -1, -55],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [286, -2, 156],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [271, -2, 118],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [239, 3, -66],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [-38, 3, 157],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [-65, -2, -118],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-247, -1, -414],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-341, -1, -413],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-252, 15, -427],
                s: [51, 58, 28],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-372, 15, -411],
                s: [48, 41, 35],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-212, 10, -177],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-156, -1, 235],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-157, 15, 235],
                s: [26, 28, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [165, -1, -213],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [203, -1, -186],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [124, -1, -188],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [285, -1, -185],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [250, -1, -202],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-125, -1, -105],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [-262, -1, -17],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [-257, 0, -12],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-287, 0, -54],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-245, -1, 190],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [392, -1, 40],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [265, -1, -65],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [109, -1, -146],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [-134, -1, -149],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [213, -1, -318],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [213, -1, -248],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [55, -1, -407],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [24, 1, 395],
                s: [33, 15, 52],
                id: 7,
                col: 1,
                r: [3.14, -1.22, 3.14]
            }, {
                p: [-259, 17, 231],
                s: [26, 28, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [-203, 18, 291],
                s: [26, 26, 28],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-203, -1, 292],
                s: [4, 23, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-155, -75, 1251],
                s: [4, 341, 4],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [308, 85, 1120],
                s: [4, 189, 2],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [-102, -1, -180],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-64, -1, -180],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-285, -1, -78],
                s: [4, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [-39, -1, -141],
                s: [4, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [350, -1, 5],
                s: [4, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [427, -1, -136],
                s: [4, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [327, -1, 154],
                s: [4, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [200, -1, 121],
                s: [4, 2, 4],
                c: 7368816,
                t: 5
            }, {
                p: [116, 0, 155],
                s: [1, 4, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-11, 0, -75],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [133, 0, 15],
                s: [1, 15, 3],
                col: 1,
                r: [0, 0, -.17],
                c: 7692103,
                t: 5
            }, {
                p: [133, 0, 11],
                s: [1, 15, 3],
                col: 1,
                r: [0, 0, -.17],
                c: 7692103,
                t: 5
            }, {
                p: [-47, 2, 22],
                s: [4, 36, 76],
                c: 5799880,
                t: 5
            }, {
                p: [-253, 16, -176],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-182, 0, -245],
                s: [121, 51, 83],
                c: 13619151,
                t: 5
            }, {
                p: [-209, -1, -176],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-183, 66, -58],
                s: [4, 1, 1],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-185, 64, -58],
                s: [4, 2, 3],
                col: 1,
                c: 9012870,
                t: 5
            }, {
                p: [-185, 63, -58],
                s: [3, 1, 2],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-182, 51, -245],
                s: [130, 3, 95],
                c: 7039851,
                t: 5
            }, {
                p: [-173, 31, -203],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-179, 31, -203],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-167, 31, -203],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-173, 31, -203],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-173, 30, -203],
                s: [14, 1, 4],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-173, 43, -203],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-392, 0, 747],
                s: [677, 23, 5],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-385, 21, 751],
                s: [691, 27, 53],
                col: 1,
                c: 4743462,
                t: 5
            }, {
                p: [-215, 0, -5],
                s: [1, 6, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-405, 0, -51],
                s: [123, 60, 120],
                c: 12951902,
                t: 5
            }, {
                p: [-403, 60, -51],
                s: [130, 2, 130],
                c: 5263440,
                t: 5
            }, {
                p: [-316, 15, 11],
                s: [26, 30, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [-320, -1, 173],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-707, 19, 165],
                s: [44, 31, 1300],
                col: 1,
                c: 6060596,
                t: 5
            }, {
                p: [-694, 0, 183],
                s: [1, 23, 1208],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-343, 40, -83],
                s: [1, 12, 11],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-344, 52, -83],
                s: [4, 1, 13],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-343, 39, -83],
                s: [4, 1, 14],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-344, 40, -89],
                s: [4, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-344, 40, -77],
                s: [4, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-344, 40, -83],
                s: [4, 12, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-315, 5, -45],
                s: [26, 30, 28],
                col: 1,
                c: 6786608,
                t: 5
            }, {
                p: [-371, -25, 16],
                s: [27, 105, 15],
                c: 6579300,
                t: 5
            }, {
                p: [-310, 16, -166],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-310, -1, -167],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-290, 11, -213],
                s: [26, 30, 28],
                col: 1,
                c: 7709238,
                t: 5
            }, {
                p: [-270, 16, -274],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-269, -1, -271],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-334, 16, -216],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-328, -1, -219],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-42, 0, 25],
                s: [6, 9, 78],
                c: 6984507,
                t: 5
            }, {
                p: [17, 2, -126],
                s: [14, 24, 22],
                c: 12958048,
                t: 5
            }, {
                p: [32, 2, -119],
                s: [16, 24, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [47, 2, -126],
                s: [14, 24, 22],
                c: 12958048,
                t: 5
            }, {
                p: [-255, -1, 230],
                s: [4, 23, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [275, -1, 183],
                s: [4, 28, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [32, 42, -132],
                s: [29, 18, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [17, 42, -132],
                s: [1, 18, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [32, 42, -132],
                s: [1, 18, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [32, 60, -132],
                s: [31, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [11, 42, -116],
                s: [2, 8, 2],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [53, 42, -116],
                s: [2, 8, 2],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [53, 42, -131],
                s: [2, 8, 2],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [11, 42, -131],
                s: [2, 8, 2],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [11, 42, -123],
                s: [1, 7, 1],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [53, 42, -124],
                s: [1, 7, 1],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [46, 42, -116],
                s: [1, 7, 1],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [18, 42, -116],
                s: [1, 7, 1],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [27, 42, -116],
                s: [1, 7, 1],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [36, 42, -116],
                s: [1, 7, 1],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [32, 49, -116],
                s: [42, 1, 2],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [53, 49, -124],
                s: [2, 1, 14],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [11, 49, -123],
                s: [2, 1, 14],
                col: 1,
                c: 5263440,
                t: 5
            }, {
                p: [-183, 36, -58],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [306, 36, 64],
                s: [4, 2, 20],
                c: 7368816,
                t: 5
            }, {
                p: [47, 42, -132],
                s: [1, 18, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [340, -1, -182],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [369, -1, -182],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [419, -1, -183],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [391, -1, -193],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-70, 2, 160],
                s: [3, 6, 6],
                col: 1,
                c: 12927811,
                t: 5
            }, {
                p: [-70, 7, 162],
                s: [1, 3, 1],
                col: 1,
                c: 8882055,
                t: 5
            }, {
                p: [52, 1, 106],
                s: [3, 6, 6],
                col: 1,
                c: 12927811,
                t: 5
            }, {
                p: [52, 6, 108],
                s: [1, 3, 1],
                col: 1,
                c: 8882055,
                t: 5
            }, {
                p: [98, 2, -212],
                s: [14, 100, 25],
                c: 7368816,
                t: 5
            }, {
                p: [-397, 16, -128],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-389, -1, -128],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-689, 15, -307],
                s: [48, 41, 58],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-689, 17, -208],
                s: [48, 41, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-574, 17, -413],
                s: [48, 41, 35],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-404, 17, -176],
                s: [26, 31, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [-405, -1, -177],
                s: [4, 34, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-460, 15, -411],
                s: [36, 43, 35],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [369, 39, 263],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [369, 38, 262],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [369, 51, 263],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [375, 39, 263],
                s: [1, 12, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [363, 39, 263],
                s: [1, 12, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [369, 39, 263],
                s: [1, 12, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-151, -3, 125],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-372, 0, 98],
                s: [104, 106, 116],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [-372, 105, 98],
                s: [115, 3, 126],
                col: 1,
                c: 7368816,
                t: 5
            }, {
                p: [-366, 17, 737],
                s: [48, 41, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-489, 17, 737],
                s: [66, 36, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-205, 17, 737],
                s: [66, 36, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-624, 17, 737],
                s: [66, 39, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-689, 17, 202],
                s: [48, 41, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-689, 17, 318],
                s: [48, 41, 41],
                col: 1,
                c: 5665581,
                t: 5
            }, {
                p: [-306, 23, 205],
                s: [26, 26, 28],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-306, -1, 205],
                s: [4, 31, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [-290, 12, 243],
                s: [26, 28, 28],
                col: 1,
                c: 8695624,
                t: 5
            }, {
                p: [-288, -1, 249],
                s: [4, 23, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [126, 0, 60],
                s: [2, 37, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [126, 0, 98],
                s: [2, 37, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [-161, -1, 205],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-290, -1, -49],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [238, -1, -156],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [182, -1, 159],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [296, -1, 159],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [1009, 10, 134],
                s: [65, 76, 76],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [995, 21, -386],
                s: [65, 53, 76],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [555, 21, -559],
                s: [137, 54, 76],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [924, 10, 606],
                s: [74, 74, 87],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [-289, -7, 309],
                s: [82, 106, 86],
                col: 1,
                c: 10658466,
                t: 5
            }, {
                p: [849, -8, -520],
                s: [65, 84, 76],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [661, -4, 165],
                s: [123, 64, 120],
                col: 1,
                c: 12951902,
                t: 5
            }, {
                p: [661, 60, 165],
                s: [132, 4, 131],
                col: 1,
                c: 6381921,
                t: 5
            }, {
                p: [-289, 99, 309],
                s: [89, 4, 93],
                col: 1,
                c: 7895160,
                t: 5
            }, {
                p: [-345, 18, 247],
                s: [26, 26, 28],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-431, 14, 166],
                s: [26, 26, 28],
                col: 1,
                c: 6193707,
                t: 5
            }, {
                p: [-269, 74, 266],
                s: [11, 12, 1],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-269, 73, 265],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-269, 86, 266],
                s: [14, 1, 3],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-263, 74, 266],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-275, 74, 266],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-269, 74, 266],
                s: [1, 12, 2],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [995, 17, -153],
                s: [65, 68, 47],
                col: 1,
                c: 6324784,
                t: 5
            }, {
                p: [-136, 3, -80],
                s: [7, 32, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-130, 3, -80],
                s: [7, 29, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-124, 3, -80],
                s: [7, 26, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-118, 3, -80],
                s: [7, 23, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-112, 3, -80],
                s: [7, 20, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-106, 3, -80],
                s: [7, 17, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-100, 3, -80],
                s: [7, 14, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-94, 3, -80],
                s: [7, 11, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-88, 3, -80],
                s: [7, 8, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-82, 3, -80],
                s: [7, 5, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-76, 2, -80],
                s: [7, 3, 23],
                c: 8355711,
                t: 5
            }, {
                p: [-102, 2, -80],
                s: [72, 36, 24],
                id: 9,
                v: 1,
                t: 5,
                d: 2
            }, {
                p: [-125, 3, 54],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, 1.04, 0],
                c: 11184810,
                t: 5
            }, {
                p: [251, 3, 98],
                s: [7, 32, 23],
                c: 8355711,
                t: 5
            }, {
                p: [244, 3, 98],
                s: [7, 29, 23],
                c: 8355711,
                t: 5
            }, {
                p: [237, 3, 98],
                s: [7, 26, 23],
                c: 8355711,
                t: 5
            }, {
                p: [230, 3, 98],
                s: [7, 23, 23],
                c: 8355711,
                t: 5
            }, {
                p: [223, 3, 98],
                s: [7, 20, 23],
                c: 8355711,
                t: 5
            }, {
                p: [216, 3, 98],
                s: [7, 17, 23],
                c: 8355711,
                t: 5
            }, {
                p: [209, 3, 98],
                s: [7, 14, 23],
                c: 8355711,
                t: 5
            }, {
                p: [202, 3, 98],
                s: [7, 11, 23],
                c: 8355711,
                t: 5
            }, {
                p: [195, 3, 98],
                s: [7, 8, 23],
                c: 8355711,
                t: 5
            }, {
                p: [188, 3, 98],
                s: [7, 5, 23],
                c: 8355711,
                t: 5
            }, {
                p: [181, 2, 98],
                s: [7, 3, 23],
                c: 8355711,
                t: 5
            }, {
                p: [212, 2, 98],
                s: [84, 36, 24],
                id: 9,
                v: 1,
                t: 5,
                d: 0
            }, {
                p: [-320, 72, 67],
                s: [1, 20, 23],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-320, 72, 125],
                s: [1, 20, 23],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-319, 71, 67],
                s: [3, 1, 27],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 92, 67],
                s: [2, 1, 27],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 72, 55],
                s: [2, 20, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 72, 79],
                s: [2, 20, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 72, 67],
                s: [2, 20, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-319, 71, 125],
                s: [3, 1, 27],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 92, 125],
                s: [2, 1, 27],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 72, 137],
                s: [2, 20, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 72, 113],
                s: [2, 20, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [-320, 72, 125],
                s: [2, 20, 1],
                col: 1,
                c: 6250335,
                t: 5
            }, {
                p: [137, -1, -156],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [-170, -2, 201],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [119, 0, -15],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [349, -2, 38],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-47, -1, 357],
                s: [38, 24, 2],
                c: 7692103,
                t: 5
            }, {
                p: [116, -1, 275],
                s: [41, 24, 2],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [70, 2, 357],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -1.23, 0],
                c: 10329501,
                t: 5
            }, {
                p: [-12, 2, 249],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 10329501,
                t: 5
            }, {
                p: [-49, -1, 265],
                s: [21, 24, 2],
                c: 7692103,
                t: 5
            }, {
                p: [-33, 0, 413],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [94, 0, 362],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [103, -2, 279],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [109, -1, 302],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-29, -1, 357],
                s: [4, 26, 4],
                c: 7692103,
                t: 5
            }, {
                p: [160, -3, 323],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [85, -3, 338],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [41, -1, 365],
                s: [3, 12, 1],
                col: 1,
                r: [.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [58, 9, 369],
                s: [40, 3, 1],
                col: 1,
                c: 13158600,
                t: 5
            }, {
                p: [41, -1, 373],
                s: [3, 12, 1],
                col: 1,
                r: [-.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [75, -1, 365],
                s: [3, 12, 1],
                col: 1,
                r: [.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [75, -1, 373],
                s: [3, 12, 1],
                col: 1,
                r: [-.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [3, 9, 369],
                s: [40, 3, 1],
                col: 1,
                c: 13158600,
                t: 5
            }, {
                p: [-14, -1, 365],
                s: [3, 12, 1],
                col: 1,
                r: [.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [20, -1, 365],
                s: [3, 12, 1],
                col: 1,
                r: [.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [-14, -1, 373],
                s: [3, 12, 1],
                col: 1,
                r: [-.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [20, -1, 373],
                s: [3, 12, 1],
                col: 1,
                r: [-.35, 0, 0],
                c: 13158600,
                t: 5
            }, {
                p: [58, 1, 382],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-31, 0, 369],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-5, 1, 377],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [47, 1, 378],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [34, 1, 368],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [89, 0, 373],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [73, 2, 406],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [3.14, -1.39, 3.14],
                c: 10329501,
                t: 5
            }, {
                p: [144, -2, 353],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [84, -1, 414],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-26, -1, 381],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [-44, -3, 268],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [62, 2, 283],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -1.4, 0],
                c: 10329501,
                t: 5
            }, {
                p: [89, 0, 266],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [100, -1, 348],
                s: [4, 2, 6],
                c: 7368816,
                t: 5
            }, {
                p: [164, -1, 342],
                s: [2, 27, 48],
                pe: 1,
                c: 7692103,
                t: 5
            }, {
                p: [132, 0, 292],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [-178, -1, 235],
                s: [284, 74, 62],
                v: 1,
                t: 5
            }, {
                p: [-314, -1, 29],
                s: [48, 74, 463],
                v: 1,
                t: 5
            }, {
                p: [63, -1, -187],
                s: [870, 74, 62],
                v: 1,
                t: 5
            }, {
                p: [422, -1, 80],
                s: [48, 74, 252],
                v: 1,
                t: 5
            }, {
                p: [455, -1, -98],
                s: [48, 74, 116],
                v: 1,
                t: 5
            }, {
                p: [253, -1, 217],
                s: [320, 74, 118],
                v: 1,
                t: 5
            }, {
                p: [24, -1, 428],
                s: [168, 74, 119],
                v: 1,
                t: 5
            }, {
                p: [-47, -1, 363],
                s: [37, 74, 14],
                v: 1,
                t: 5
            }, {
                p: [182, -1, 326],
                s: [38, 86, 111],
                v: 1,
                t: 5
            }, {
                p: [-20, 1, 372],
                s: [7, 8, 7],
                id: 2
            }, {
                p: [188, -1, 339],
                s: [4, 28, 4],
                col: 1,
                c: 6574655,
                t: 5
            }, {
                p: [189, 22, 341],
                s: [26, 28, 28],
                col: 1,
                c: 5204775,
                t: 5
            }, {
                p: [221, -1, 351],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [289, -1, 366],
                s: [1, 7, 1],
                col: 1,
                c: 6984507,
                t: 5
            }, {
                p: [113, 3, -37],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [167, 3, -75],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [164, 39, -13],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [249, 39, 47],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, -.53, 0],
                c: 9671571,
                t: 5
            }, {
                p: [-142, 2, 25],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-175, 2, -28],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-175, 4, -28],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [243, 2, 8],
                s: [1, 17, 3],
                col: 1,
                r: [0, 0, .17],
                c: 7692103,
                t: 5
            }, {
                p: [-129, 2, 12],
                s: [1, 17, 3],
                col: 1,
                r: [0, 0, .17],
                c: 7692103,
                t: 5
            }, {
                p: [-139, 2, 74],
                s: [1, 17, 3],
                col: 1,
                r: [0, 0, .17],
                c: 7692103,
                t: 5
            }, {
                p: [-139, 2, 81],
                s: [1, 17, 3],
                col: 1,
                r: [0, 0, .17],
                c: 7692103,
                t: 5
            }, {
                p: [158, 38, -22],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [158, 40, -22],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [202, 38, 77],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [209, 38, 77],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [145, 2, -22],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [145, 4, -22],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [188, 8, 88],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [188, 10, 88],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-93, 14, -70],
                s: [2, 4, 2],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [-93, 16, -70],
                s: [1, 4, 1],
                col: 1,
                pe: 1,
                c: 5211204,
                t: 5
            }, {
                p: [145, 39, 105],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [0, 1.39, 0],
                c: 9671571,
                t: 5
            }, {
                p: [168, 38, 106],
                s: [4, 22, 2],
                col: 1,
                r: [.17, 0, 0],
                c: 7692103,
                t: 5
            }, {
                p: [35, 1, 304],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [23, 1, 304],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [29, 13, 304],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [-92, 32, -2],
                s: [7, 2, 7],
                c: 9012870,
                t: 5
            }, {
                p: [-92, 34, -2],
                s: [3, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [-92, 31, -2],
                s: [3, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [-92, 74, -2],
                s: [3, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [-92, 72, -2],
                s: [7, 2, 7],
                c: 9012870,
                t: 5
            }, {
                p: [-92, 71, -2],
                s: [3, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [183, 74, 39],
                s: [3, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [183, 72, 39],
                s: [7, 2, 7],
                c: 9012870,
                t: 5
            }, {
                p: [183, 71, 39],
                s: [3, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [183, 34, 39],
                s: [3, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [272, 32, 39],
                s: [7, 2, 7],
                c: 9012870,
                t: 5
            }, {
                p: [183, 31, 39],
                s: [3, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [272, 34, 39],
                s: [3, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [183, 32, 39],
                s: [7, 2, 7],
                c: 9012870,
                t: 5
            }, {
                p: [272, 31, 39],
                s: [3, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }, {
                p: [294, 2, 23],
                s: [12, 12, 12],
                id: 1
            }, {
                p: [288, 3, 9],
                s: [4, 0, 5],
                id: 4,
                col: 1,
                r: [-3.14, 1.4, -3.14],
                c: 9671571,
                t: 5
            }, {
                p: [-163, 32, -2],
                s: [7, 2, 7],
                c: 9012870,
                t: 5
            }, {
                p: [-163, 34, -2],
                s: [3, 2, 3],
                c: 9012870,
                t: 5
            }, {
                p: [-163, 31, -2],
                s: [3, 1, 3],
                col: 1,
                c: 0,
                e: 16767098,
                t: 5
            }]
        }], o = 0; o < a.length; ++o)
        for (var s = 0; s < a[o].objects.length; ++s) a[o].objects[s].id = i.prefabIDS[a[o].objects[s].id || 0], a[o].objects[s].t = i.textureIDS[a[o].objects[s].t || 0];
    t.exports.maps = a, t.exports.manager = function(t, e, i, o) {
        var s, c;
        this.manager = new(n(17).manager)(t, i, o), this.maps = a, this.modes = r, this.spawns = [], this.lastGen = null, this.setMaps = function(t) {
            this.maps = t || a
        }, this.getRandomMap = function() {
            return i.randInt(0, this.maps.length - 1)
        };
        var l = "";
        this.generate = function(n, r, a) {
            var h = this.maps[n];
            if (t) try {
                mapInfo.innerHTML = r.alias + "_" + h.name, gameMessage.innerHTML = "", curGameInfo.innerHTML = r.name + "<div style='color:rgba(255,255,255,0.6)'>on " + h.name + "</div>" + (h.creator ? "<div style='color:#fff'><span style='color:rgba(255,255,255,0.6)'>by</span> " + h.creator + "</div>" : "")
            } catch (t) {}
            t && l != h.modURL && (l = h.modURL) && "" != l && loadModPack(l, !0);
            var u = n;
            if (a || this.lastGen !== u) {
                this.lastGen = u, this.manager.removeAll(), t && t.init(h), e && (e.reset(), t.scene.add(e.ExplosionManager));
                for (var p = 0, d = 0, f = 0, m = 0, g = 0; g < h.objects.length; ++g) {
                    var v = (s = h.objects[g]).p[0],
                        y = s.p[1],
                        x = s.p[2];
                    if (v - s.s[0] < p && (p = v - s.s[0]), v + s.s[0] > d && (d = v + s.s[0]), x - s.s[2] < f && (f = x - s.s[2]), x + s.s[2] > m && (m = x + s.s[2]), "CUBE" == s.id) {
                        for (var w = 1, b = 0; b < h.objects.length; ++b)
                            if ("CUBE" == (c = h.objects[b]).id && s != c && y <= c.p[1] + c.s[1] && y >= c.p[1] && v + s.s[0] / 2 < c.p[0] + c.s[0] / 2 && v - s.s[0] / 2 > c.p[0] - c.s[0] / 2 && x + s.s[2] / 2 < c.p[2] + c.s[2] / 2 && x - s.s[2] / 2 > c.p[2] - c.s[2] / 2) {
                                w = 0;
                                break
                            } this.manager.addBlock(v, y, x, s.s[0], s.s[2], s.s[1], [1, 1, 1, w, 1, 1], {
                            src: s.t.toLowerCase() + "_0",
                            colr: s.c,
                            emissive: s.e || 0,
                            opacity: 1 != s.o && void 0 != s.o ? s.o : 1,
                            transparent: 1 != s.o && void 0 != s.o,
                            penetrable: s.pe,
                            amb: s.a,
                            yR: s.r ? s.r[0] : 0,
                            xR: s.r ? s.r[1] : 0,
                            zR: s.r ? s.r[2] : 0,
                            noCol: s.col,
                            noVis: s.v
                        })
                    } else "PLANE" == s.id || "BILLBOARD" == s.id ? this.manager.addPlane(v, y, x, s.s[2] / 2, s.s[0] / 2, {
                        src: "BILLBOARD" == s.id ? "pubs/bill_1" : s.t.toLowerCase() + "_0",
                        emissive: s.e || 0,
                        opacity: 1 != s.o && void 0 != s.o ? s.o : 1,
                        penetrable: s.pe,
                        colr: s.c,
                        col: !s.col,
                        noVis: s.v
                    }, s.r ? s.r[2] : 0, (s.r ? s.r[0] : 0) - Math.PI / 2, s.r ? s.r[1] : 0) : "RAMP" == s.id ? this.manager.addRamp(v, y, x, s.s[0], s.s[1], s.s[2], s.d * Math.PI / 2, s.b, s.t ? s.t.toLowerCase() + "_0" : "grey_0", s.v, s.c) : "SCORE_ZONE" == s.id ? this.manager.addScoreZone(v, y, x, s.s[0], s.s[2], s.s[1]) : "DEATH_ZONE" == s.id ? this.manager.addDeathZone(v, y, x, s.s[0], s.s[2], s.s[1]) : "LADDER" == s.id ? this.manager.addLadder(v, y, x, s.s[1], s.d * Math.PI / 2, s.v) : this.manager.addMesh(v, y, x, s.r ? s.r[1] ? s.r[1] : Math.PI : 0, s.s[0] / 2, s.s[1] / 2, s.s[2] / 2, s.id.toLowerCase(), s.col)
                }
                if (h.shadLength = Math.round(Math.abs(d - p) / 2.5), h.shadWidth = Math.round(Math.abs(m - f) / 2.5), t && t.updateLightMap(h), t) {
                    var M, _ = o.ambScale;
                    for (g = 0; g < this.manager.objects.length; ++g)
                        if (!(s = this.manager.objects[g]).noVis && !s.complexMesh)
                            for (b = 0; b < this.manager.objects.length; ++b)
                                if (!(c = this.manager.objects[b]).noVis && !c.complexMesh && this.manager.collision(s, c, 0)) {
                                    if (b > g) {
                                        if (M = i.boxIntersection(s, c, "x", "z", [Math.PI, 0, Math.PI / 2, -Math.PI / 2]))
                                            for (var S = 0; S < M.length; ++S)
                                                for (var E = i.getIntersection(s, c, "y"), T = 0; T < 2; T++) {
                                                    var A = (M[S].d + Math.PI / 2 * T) % (2 * Math.PI);
                                                    _ = this.manager.limitAmb(o.ambScale, M[S], A, "x", "z", s, c), this.manager.addAmbient(M[S].x + _ * Math.cos(A), E.y, M[S].z + _ * Math.sin(A), -A + Math.PI, 0, 0, E.height, _, 1)
                                                }
                                        if (M = i.boxIntersection(s, c, "z", "y", [Math.PI, 0, -Math.PI / 2, Math.PI / 2]))
                                            for (S = 0; S < M.length; ++S)
                                                for (E = i.getIntersection(s, c, "x"), T = 0; T < 2; T++) A = M[S].d + Math.PI / 2 * (T ? 0 : 1), _ = this.manager.limitAmb(o.ambScale, M[S], -A + Math.PI / 2, "z", "y", s, c), this.manager.addAmbient(E.x, M[S].y + _ * Math.cos(A), M[S].z + _ * Math.sin(A), 0, A, -Math.PI / 2, E.width, _, 1);
                                        if (M = i.boxIntersection(s, c, "x", "y", [Math.PI, 0, -Math.PI / 2, Math.PI / 2]))
                                            for (S = 0; S < M.length; ++S)
                                                for (E = i.getIntersection(s, c, "z"), T = 0; T < 2; T++) A = M[S].d + Math.PI / 2 * (T ? 0 : 1), _ = this.manager.limitAmb(o.ambScale, M[S], -A + Math.PI / 2, "x", "y", s, c), this.manager.addAmbient(M[S].x + _ * Math.sin(A), M[S].y + _ * Math.cos(A), E.z, Math.PI / 2, A, -Math.PI / 2, E.length, _, 1)
                                    }
                                    var L = s.y + s.height > c.y + c.height,
                                        R = s.y - s.height < c.y - c.height;
                                    if ((L || R) && (M = i.boxCornerIntersection(s, c, "x", "z")))
                                        for (S = 0; S < M.length; ++S)
                                            for (_ = Math.sqrt(2) * o.ambScale, A = M[S].d - Math.PI / 4, T = 0; T < 2; ++T)
                                                if (y = c.y + (c.height + o.ambOff) * (T ? -1 : 1), (T || L) && (!T || R)) {
                                                    var P = i.limitRect(M[S].x - _ * Math.sin(A), M[S].z - _ * Math.cos(A), o.ambScale, o.ambScale, M[S].d, c, "x", "z");
                                                    this.manager.addAmbient(P.x, y, P.z, M[S].d, Math.PI / 2, 0, P.width, P.length, 0)
                                                } var C = s.x + s.width > c.x + c.width,
                                        I = s.x - s.width < c.x - c.width;
                                    if (C || I) {
                                        var O = [Math.PI / 2, 0, Math.PI, -Math.PI / 2];
                                        if (M = i.boxCornerIntersection(s, c, "z", "y"))
                                            for (S = 0; S < M.length; ++S)
                                                for (_ = Math.sqrt(2) * o.ambScale, A = M[S].d - Math.PI / 4, T = 0; T < 2; ++T) v = c.x + (c.width + o.ambOff) * (T ? -1 : 1), !T && !C || T && !I || (P = i.limitRect(M[S].z - _ * Math.sin(A), M[S].y - _ * Math.cos(A), o.ambScale, o.ambScale, M[S].d, c, "z", "y"), this.manager.addAmbient(v, P.y, P.z, Math.PI / 2, Math.PI, O[M[S].i], P.length, P.height, 0))
                                    }
                                    var D = s.z + s.length > c.z + c.length,
                                        B = s.z - s.length < c.z - c.length;
                                    if ((D || B) && (O = [-Math.PI / 2, Math.PI, 0, Math.PI / 2], M = i.boxCornerIntersection(s, c, "x", "y")))
                                        for (S = 0; S < M.length; ++S)
                                            for (_ = Math.sqrt(2) * o.ambScale, A = M[S].d - Math.PI / 4, T = 0; T < 2; ++T) x = c.z + (c.length + o.ambOff) * (T ? -1 : 1), !T && !D || T && !B || (P = i.limitRect(M[S].x - _ * Math.sin(A), M[S].y - _ * Math.cos(A), o.ambScale, o.ambScale, M[S].d, c, "x", "y"), this.manager.addAmbient(P.x, P.y, x, 0, 0, O[M[S].i], P.width, P.height, 0))
                                }
                }
                for (this.manager.objects.sort(function(t, e) {
                        return (t.ramp ? 1 : -1) - (e.ramp ? 1 : -1)
                    }), this.manager.objects.sort(function(t, e) {
                        return t.y - t.height < e.y - e.height ? -1 : 1
                    }), this.spawns.length = 0, g = 0; g < h.spawns.length; ++g) this.spawns.push({
                    x: h.spawns[g][0],
                    y: h.spawns[g][1],
                    z: h.spawns[g][2],
                    team: h.spawns[g][3]
                });
                t && t.addMeshGroups()
            }
        }
    }
}, function(t, e, n) {
    var i = n(13).ExtBuffer,
        r = n(39),
        a = n(19).readUint8,
        o = n(38),
        s = n(4);

    function c() {
        var t = this.options;
        return this.decode = function(t) {
            var e = o.getReadToken(t);
            return function(t) {
                var n = a(t),
                    i = e[n];
                if (!i) throw new Error("Invalid type: " + (n ? "0x" + n.toString(16) : n));
                return i(t)
            }
        }(t), t && t.preset && r.setExtUnpackers(this), this
    }
    s.install({
        addExtUnpacker: function(t, e) {
            (this.extUnpackers || (this.extUnpackers = []))[t] = s.filter(e)
        },
        getExtUnpacker: function(t) {
            return (this.extUnpackers || (this.extUnpackers = []))[t] || function(e) {
                return new i(e, t)
            }
        },
        init: c
    }), e.preset = c.call(s.preset)
}, function(t, e, n) {
    (function(t) {
        ! function(e) {
            var n, i = "undefined",
                r = i !== typeof t && t,
                a = i !== typeof Uint8Array && Uint8Array,
                o = i !== typeof ArrayBuffer && ArrayBuffer,
                s = [0, 0, 0, 0, 0, 0, 0, 0],
                c = Array.isArray || function(t) {
                    return !!t && "[object Array]" == Object.prototype.toString.call(t)
                },
                l = 4294967296,
                h = 16777216;

            function u(t, c, u) {
                var M = c ? 0 : 4,
                    _ = c ? 4 : 0,
                    S = c ? 0 : 3,
                    E = c ? 1 : 2,
                    T = c ? 2 : 1,
                    A = c ? 3 : 0,
                    L = c ? y : w,
                    R = c ? x : b,
                    P = O.prototype,
                    C = "is" + t,
                    I = "_" + C;
                return P.buffer = void 0, P.offset = 0, P[I] = !0, P.toNumber = D, P.toString = function(t) {
                    var e = this.buffer,
                        n = this.offset,
                        i = N(e, n + M),
                        r = N(e, n + _),
                        a = "",
                        o = !u && 2147483648 & i;
                    for (o && (i = ~i, r = l - r), t = t || 10;;) {
                        var s = i % t * l + r;
                        if (i = Math.floor(i / t), r = Math.floor(s / t), a = (s % t).toString(t) + a, !i && !r) break
                    }
                    return o && (a = "-" + a), a
                }, P.toJSON = D, P.toArray = p, r && (P.toBuffer = d), a && (P.toArrayBuffer = f), O[C] = function(t) {
                    return !(!t || !t[I])
                }, e[t] = O, O;

                function O(t, e, r, c) {
                    return this instanceof O ? function(t, e, r, c, h) {
                        if (a && o && (e instanceof o && (e = new a(e)), c instanceof o && (c = new a(c))), e || r || c || n) {
                            if (!m(e, r)) h = r, c = e, r = 0, e = new(n || Array)(8);
                            t.buffer = e, t.offset = r |= 0, i !== typeof c && ("string" == typeof c ? function(t, e, n, i) {
                                var r = 0,
                                    a = n.length,
                                    o = 0,
                                    s = 0;
                                "-" === n[0] && r++;
                                for (var c = r; r < a;) {
                                    var h = parseInt(n[r++], i);
                                    if (!(h >= 0)) break;
                                    s = s * i + h, o = o * i + Math.floor(s / l), s %= l
                                }
                                c && (o = ~o, s ? s = l - s : o++), B(t, e + M, o), B(t, e + _, s)
                            }(e, r, c, h || 10) : m(c, h) ? g(e, r, c, h) : "number" == typeof h ? (B(e, r + M, c), B(e, r + _, h)) : c > 0 ? L(e, r, c) : c < 0 ? R(e, r, c) : g(e, r, s, 0))
                        } else t.buffer = v(s, 0)
                    }(this, t, e, r, c) : new O(t, e, r, c)
                }

                function D() {
                    var t = this.buffer,
                        e = this.offset,
                        n = N(t, e + M),
                        i = N(t, e + _);
                    return u || (n |= 0), n ? n * l + i : i
                }

                function B(t, e, n) {
                    t[e + A] = 255 & n, n >>= 8, t[e + T] = 255 & n, n >>= 8, t[e + E] = 255 & n, n >>= 8, t[e + S] = 255 & n
                }

                function N(t, e) {
                    return t[e + S] * h + (t[e + E] << 16) + (t[e + T] << 8) + t[e + A]
                }
            }

            function p(t) {
                var e = this.buffer,
                    i = this.offset;
                return n = null, !1 !== t && 0 === i && 8 === e.length && c(e) ? e : v(e, i)
            }

            function d(e) {
                var i = this.buffer,
                    a = this.offset;
                if (n = r, !1 !== e && 0 === a && 8 === i.length && t.isBuffer(i)) return i;
                var o = new r(8);
                return g(o, 0, i, a), o
            }

            function f(t) {
                var e = this.buffer,
                    i = this.offset,
                    r = e.buffer;
                if (n = a, !1 !== t && 0 === i && r instanceof o && 8 === r.byteLength) return r;
                var s = new a(8);
                return g(s, 0, e, i), s.buffer
            }

            function m(t, e) {
                var n = t && t.length;
                return e |= 0, n && e + 8 <= n && "string" != typeof t[e]
            }

            function g(t, e, n, i) {
                e |= 0, i |= 0;
                for (var r = 0; r < 8; r++) t[e++] = 255 & n[i++]
            }

            function v(t, e) {
                return Array.prototype.slice.call(t, e, e + 8)
            }

            function y(t, e, n) {
                for (var i = e + 8; i > e;) t[--i] = 255 & n, n /= 256
            }

            function x(t, e, n) {
                var i = e + 8;
                for (n++; i > e;) t[--i] = 255 & -n ^ 255, n /= 256
            }

            function w(t, e, n) {
                for (var i = e + 8; e < i;) t[e++] = 255 & n, n /= 256
            }

            function b(t, e, n) {
                var i = e + 8;
                for (n++; e < i;) t[e++] = 255 & -n ^ 255, n /= 256
            }
            u("Uint64BE", !0, !0), u("Int64BE", !0, !1), u("Uint64LE", !1, !0), u("Int64LE", !1, !1)
        }("object" == typeof e && "string" != typeof e.nodeName ? e : this || {})
    }).call(this, n(24).Buffer)
}, function(t, e, n) {
    var i = n(43);
    e.copy = c, e.slice = l, e.toString = function(t, e, n) {
        return (!o && r.isBuffer(this) ? this.toString : i.toString).apply(this, arguments)
    }, e.write = function(t) {
        return function() {
            return (this[t] || i[t]).apply(this, arguments)
        }
    }("write");
    var r = n(0),
        a = r.global,
        o = r.hasBuffer && "TYPED_ARRAY_SUPPORT" in a,
        s = o && !a.TYPED_ARRAY_SUPPORT;

    function c(t, e, n, a) {
        var o = r.isBuffer(this),
            c = r.isBuffer(t);
        if (o && c) return this.copy(t, e, n, a);
        if (s || o || c || !r.isView(this) || !r.isView(t)) return i.copy.call(this, t, e, n, a);
        var h = n || null != a ? l.call(this, n, a) : this;
        return t.set(h, e), h.length
    }

    function l(t, e) {
        var n = this.slice || !s && this.subarray;
        if (n) return n.call(this, t, e);
        var i = r.alloc.call(this, e - t);
        return c.call(this, i, 0, t, e), i
    }
}, function(t, e) {
    e.read = function(t, e, n, i, r) {
        var a, o, s = 8 * r - i - 1,
            c = (1 << s) - 1,
            l = c >> 1,
            h = -7,
            u = n ? r - 1 : 0,
            p = n ? -1 : 1,
            d = t[e + u];
        for (u += p, a = d & (1 << -h) - 1, d >>= -h, h += s; h > 0; a = 256 * a + t[e + u], u += p, h -= 8);
        for (o = a & (1 << -h) - 1, a >>= -h, h += i; h > 0; o = 256 * o + t[e + u], u += p, h -= 8);
        if (0 === a) a = 1 - l;
        else {
            if (a === c) return o ? NaN : 1 / 0 * (d ? -1 : 1);
            o += Math.pow(2, i), a -= l
        }
        return (d ? -1 : 1) * o * Math.pow(2, a - i)
    }, e.write = function(t, e, n, i, r, a) {
        var o, s, c, l = 8 * a - r - 1,
            h = (1 << l) - 1,
            u = h >> 1,
            p = 23 === r ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
            d = i ? 0 : a - 1,
            f = i ? 1 : -1,
            m = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
        for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (s = isNaN(e) ? 1 : 0, o = h) : (o = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), (e += o + u >= 1 ? p / c : p * Math.pow(2, 1 - u)) * c >= 2 && (o++, c /= 2), o + u >= h ? (s = 0, o = h) : o + u >= 1 ? (s = (e * c - 1) * Math.pow(2, r), o += u) : (s = e * Math.pow(2, u - 1) * Math.pow(2, r), o = 0)); r >= 8; t[n + d] = 255 & s, d += f, s /= 256, r -= 8);
        for (o = o << r | s, l += r; l > 0; t[n + d] = 255 & o, d += f, o /= 256, l -= 8);
        t[n + d - f] |= 128 * m
    }
}, function(t, e, n) {
    e.ExtBuffer = function t(e, n) {
        if (!(this instanceof t)) return new t(e, n);
        this.buffer = i.from(e), this.type = n
    };
    var i = n(0)
}, function(t, e, n) {
    var i = n(13).ExtBuffer,
        r = n(42),
        a = n(41),
        o = n(4);

    function s() {
        var t = this.options;
        return this.encode = function(t) {
            var e = a.getWriteType(t);
            return function(t, n) {
                var i = e[typeof n];
                if (!i) throw new Error('Unsupported type "' + typeof n + '": ' + n);
                i(t, n)
            }
        }(t), t && t.preset && r.setExtPackers(this), this
    }
    o.install({
        addExtPacker: function(t, e, n) {
            n = o.filter(n);
            var r = e.name;
            r && "Object" !== r ? (this.extPackers || (this.extPackers = {}))[r] = a : (this.extEncoderList || (this.extEncoderList = [])).unshift([e, a]);

            function a(e) {
                return n && (e = n(e)), new i(e, t)
            }
        },
        getExtPacker: function(t) {
            var e = this.extPackers || (this.extPackers = {}),
                n = t.constructor,
                i = n && n.name && e[n.name];
            if (i) return i;
            for (var r = this.extEncoderList || (this.extEncoderList = []), a = r.length, o = 0; o < a; o++) {
                var s = r[o];
                if (n === s[0]) return s[1]
            }
        },
        init: s
    }), e.preset = s.call(o.preset)
}, function(t, e) {
    var n, i, r = t.exports = {};

    function a() {
        throw new Error("setTimeout has not been defined")
    }

    function o() {
        throw new Error("clearTimeout has not been defined")
    }

    function s(t) {
        if (n === setTimeout) return setTimeout(t, 0);
        if ((n === a || !n) && setTimeout) return n = setTimeout, setTimeout(t, 0);
        try {
            return n(t, 0)
        } catch (e) {
            try {
                return n.call(null, t, 0)
            } catch (e) {
                return n.call(this, t, 0)
            }
        }
    }! function() {
        try {
            n = "function" == typeof setTimeout ? setTimeout : a
        } catch (t) {
            n = a
        }
        try {
            i = "function" == typeof clearTimeout ? clearTimeout : o
        } catch (t) {
            i = o
        }
    }();
    var c, l = [],
        h = !1,
        u = -1;

    function p() {
        h && c && (h = !1, c.length ? l = c.concat(l) : u = -1, l.length && d())
    }

    function d() {
        if (!h) {
            var t = s(p);
            h = !0;
            for (var e = l.length; e;) {
                for (c = l, l = []; ++u < e;) c && c[u].run();
                u = -1, e = l.length
            }
            c = null, h = !1,
                function(t) {
                    if (i === clearTimeout) return clearTimeout(t);
                    if ((i === o || !i) && clearTimeout) return i = clearTimeout, clearTimeout(t);
                    try {
                        i(t)
                    } catch (e) {
                        try {
                            return i.call(null, t)
                        } catch (e) {
                            return i.call(this, t)
                        }
                    }
                }(t)
        }
    }

    function f(t, e) {
        this.fun = t, this.array = e
    }

    function m() {}
    r.nextTick = function(t) {
        var e = new Array(arguments.length - 1);
        if (arguments.length > 1)
            for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        l.push(new f(t, e)), 1 !== l.length || h || s(d)
    }, f.prototype.run = function() {
        this.fun.apply(null, this.array)
    }, r.title = "browser", r.browser = !0, r.env = {}, r.argv = [], r.version = "", r.versions = {}, r.on = m, r.addListener = m, r.once = m, r.off = m, r.removeListener = m, r.removeAllListeners = m, r.emit = m, r.prependListener = m, r.prependOnceListener = m, r.listeners = function(t) {
        return []
    }, r.binding = function(t) {
        throw new Error("process.binding is not supported")
    }, r.cwd = function() {
        return "/"
    }, r.chdir = function(t) {
        throw new Error("process.chdir is not supported")
    }, r.umask = function() {
        return 0
    }
}, function(t, e, n) {
    var i, r = n(1),
        a = n(2);
    t.exports = function(e, r, a) {
        var o = n(6),
            s = new e.LoadingManager,
            c = new e.OBJLoader(s);
        this.cubeGeo = new e.BoxGeometry(1, 1, 1), this.getCubeMesh = function() {
            return new e.Mesh(this.cubeGeo)
        };
        var l = new e.PlaneGeometry(1, 1);
        new e.CylinderGeometry(.1, 1, 1, 4, 1, !1, Math.PI / 4).computeFlatVertexNormals();
        var h = new e.TextureLoader,
            u = new e.MeshBasicMaterial({
                color: 16777215
            }),
            p = new e.MeshBasicMaterial({
                color: 65280
            }),
            d = {},
            f = {},
            m = {},
            g = this,
            v = {};
        this.frustum = new e.Frustum;
        var y = new e.Matrix4;
        this.camera = new e.PerspectiveCamera(0, window.innerWidth / window.innerHeight, .1, 8e3), this.weaponLean = 1, this.init = function(n) {
            this.scene = new e.Scene, t.exports.initScene.call(this, n), this.sunPlane = this.addPlane(0, 5e3, -4500, 750, 750, {
                src: "sun_0",
                noFog: !0,
                transparent: !0,
                mat: e.MeshBasicMaterial,
                noGroup: !0
            }, 0, r.getDirection(-4500, 5e3, 0, 0))
        };
        var x, w, b = 0;
        this.flash = function(t, e) {
            flashOverlay.style.display = "block", flashOverlay.style.left = 100 * t + "%", flashOverlay.style.top = 100 * (1 - e) + "%", b = 100
        }, this.updateLightMap = function(t) {
            this.skyLight && (this.skyLight.shadow.camera.right = t.shadWidth, this.skyLight.shadow.camera.left = -t.shadWidth, this.skyLight.shadow.camera.top = t.shadLength, this.skyLight.shadow.camera.bottom = -t.shadLength)
        }, this.useDepthMap = 0, this.toggleDepthMap = function(n) {
            if (this.useDepthMap = n, this.scene) {
                var r = n && "0" != n;
                this.scene.overrideMaterial = r ? u : null, r ? (this.scene.fog = new e.Fog(0, 0, n), this.renderer.setClearColor(0)) : t.exports.initScene.call(this, i)
            }
        }, this.greenScreen = !1, this.updateGreenScreen = function(t) {
            g.greenScreen && !t.noGreen ? (t.realMat = t.material, t.material = p) : t.material = t.realMat || t.material
        }, this.toggleGreenscreen = function(t) {
            this.greenScreen = t, this.scene && (t ? (this.renderer.setClearColor(65280), this.scene.fog.near = .1, this.scene.fog.far = 0) : (this.scene.fog.near = 1, this.scene.fog.far = i.fogD, this.renderer.setClearColor(i.sky)), this.scene.traverse(function(t) {
                g.updateGreenScreen(t)
            }))
        }, this.renderer = new e.WebGLRenderer({
            precision: "mediump",
            powerPreference: "high-performance",
            antialias: !1
        }), this.renderer.shadowMap.enabled = !0, this.renderer.shadowMap.autoUpdate = !1, this.renderer.shadowMap.type = e.BasicShadowMap, this.renderer.setPixelRatio(window.devicePixelRatio), this.renderer.setSize(window.innerWidth, window.innerHeight), this.renderer.autoClear = !1, document.body.appendChild(this.renderer.domElement), this.updateShadowMap = function() {
            this.renderer.shadowMap.needsUpdate = !0
        }, this.postprocessing = {
            enabled: !1
        }, this.initShaders = function() {
            var t = new e.RenderPass(this.scene, this.camera);
            (w = new e.SSAOPass(this.scene, this.camera)).renderToScreen = !0, (x = new e.EffectComposer(this.renderer)).addPass(t), x.addPass(w), this.resizeShaders()
        }, this.resizeShaders = function() {
            if (w && w.setSize(window.innerWidth, window.innerHeight), x) {
                var t = this.renderer.getPixelRatio(),
                    e = Math.floor(window.innerWidth / t) || 1,
                    n = Math.floor(window.innerHeight / t) || 1;
                x.setSize(e, n)
            }
        }, this.zoom = function(t) {
            this.camera.fov = this.fov / t, this.camera.updateProjectionMatrix()
        }, this.setFov = function(t) {
            this.fov = t, this.camera.fov = t
        }, this.setFov(a.fov), this.resize = function() {
            this.camera.aspect = window.innerWidth / window.innerHeight, this.camera.updateProjectionMatrix(), this.renderer.setSize(window.innerWidth, window.innerHeight), this.resizeShaders()
        }, this.setResMlt = function(t) {
            this.renderer.setPixelRatio(window.devicePixelRatio * t), this.renderer.setSize(window.innerWidth, window.innerHeight)
        }, this.updateFrustum = function() {
            this.frustum.setFromMatrix(y.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse))
        };
        var M = 0,
            _ = 0;
        this.shakeX = 0, this.shakeY = 0, this.updateShake = function(t) {
            M && (M *= Math.pow(.99, t), _ += r.randFloat(-Math.PI, Math.PI), this.shakeX = Math.cos(_) * M, this.shakeY = Math.sin(_) * M, M <= .01 && (M = 0, this.shakeX = this.shakeY = 0))
        }, this.shake = function(t) {
            M = t
        }, this.render = function(t) {
            this.scene && (this.postprocessing.enabled ? x.render() : (this.renderer.clear(), this.renderer.render(this.scene, this.camera)), b && (b -= t) <= 0 && (b = 0, flashOverlay.style.display = "none"), this.updateShake(t))
        }, this.updateTexture = function(t, n) {
            var i = m[t];
            i ? i.image = n : (i = new e.Texture(n), m[t] = i), i.needsUpdate = !0
        }, this.loadTexture = function(t, n, i, r) {
            return m[n] ? m[n].mats ? m[n].mats.push(t) : (t[r || "map"] = m[n], t.needsUpdate = !0) : (m[n] = {
                mats: [t]
            }, i = i || {}, h.load("/textures/" + n + ".png", function(t) {
                t.wrapS = e.RepeatWrapping, t.wrapT = e.RepeatWrapping, t.repeat.set(i.repeatX || 1, i.repeatY || 1), t.minFilter = e.NearestFilter, t.magFilter = e.NearestFilter, t.needsUpdate = !0;
                for (var a = 0; a < m[n].mats.length; ++a) m[n].mats[a][r || "map"] = t, m[n].mats[a].needsUpdate = !0;
                m[n] = t
            })), t
        }, this.getMat = function(t, n) {
            var i = (n && n.texSrc || t) + (n ? (n.rotation || "x") + (n.noFog || "y") + (n.opacity || "z") + (n.color || "b") + (n.ao || "a") + (n.emissive || "e") + (n.glowText || "g") + (void 0 != n.depthWrite ? n.depthWrite : "d") : ""),
                r = f[i];
            return r || (r = new((n = n || {}).mat ? n.mat : e.MeshLambertMaterial)(n), t && "default" != t && this.loadTexture(r, n.texSrc || t, n), n && n.emissive && this.loadTexture(r, (n.glowText && n.texSrc || t) + "_e", n, "emissiveMap"), n && n.ao && (this.loadTexture(r, t + "_ao", n, "aoMap"), r.aoMapIntensity = 1.3), n && n.normal && this.loadTexture(r, t + "_n", n, "normalMap"), "default" == t && (r.vertexColors = e.VertexColors), n && n.noFog && (r.fog = !1), f[i] = r), r
        }, this.offsetMesh = function(t, e) {
            t.translateZ(e)
        }, this.genColorCube = function(t, n, i, r, a) {
            for (var s = "", c = 0; c < r.length; ++c) s += r[c] + "_";
            var l = d[s];
            if (!l) {
                l = new e.Geometry;
                var h = .5 + (a || 0);
                for (c = 0; c < r.length;) {
                    var u = r[c + 1],
                        p = new e.BoxGeometry(1 * (4 == c ? .9 : 1), u, 1 * (4 == c ? .9 : 1));
                    o.colorize(p, r[c]);
                    var f = new e.Mesh(p);
                    this.moveMesh(f, 0, h - u / 2, 0), this.merge(l, f), h -= u, c += 2
                }
                d[s] = l
            }
            return f = new e.Mesh(l, this.getMat("default")), this.scaleMesh(f, t, n, i), f
        };
        var S = {};
        this.genBody = function(t, n, i, r) {
            var o = S[t];
            if (!o) {
                o = new e.Geometry;
                var s = a.playerHeight - a.headScale - a.legHeight,
                    c = this.genColorCube(a.chestWidth, s, a.chestScale, [t, .8, n, .2]);
                this.moveMesh(c, 0, s / 2, 0), this.merge(o, c);
                var l = this.genColorCube(a.headScale, a.headScale, a.headScale, [i, .2, r, .8]);
                this.moveMesh(l, 0, a.playerHeight - a.headScale / 2 - a.legHeight, 0), this.merge(o, l), S[t] = o
            }
            var h = new e.Mesh(o, this.getMat("default"));
            return h.receiveShadow = !0, h.noGreen = !0, h
        };
        var E = {};
        this.genLeg = function(t, n, i, r) {
            var o = a.legScale,
                s = null;
            if (r) {
                var c = n + "-" + (r || "");
                if (!(s = E[c])) {
                    var l = a.legHeight / 2,
                        h = o / 2,
                        u = [.5, 2],
                        p = this.genColorCube(o, l, o, [n, 1]);
                    this.moveMesh(p, 0, -l / 2 * Math.cos(u[1]), -l / 2 * Math.sin(u[1])), this.rotateMesh(p, 0, u[1], 0);
                    var d = Math.sqrt(h * h + h * h - 2 * h * h * Math.cos(u[0] - u[1])),
                        f = 2 * Math.sqrt(h * h - d / 2 * (d / 2)),
                        m = this.genColorCube(o, d, f, [n, 1]);
                    this.moveMesh(m, 0, -l * Math.cos(u[1]), -l * Math.sin(u[1])), this.rotateMesh(m, 0, (u[1] + u[0]) / 2, 0);
                    var g = this.genColorCube(o, l, o, [n, .5, i, .5]);
                    this.moveMesh(g, 0, -l * Math.cos(u[1]) - l / 2 * Math.cos(u[0]), -l * Math.sin(u[1]) - l / 2 * Math.sin(u[0])), this.rotateMesh(g, 0, u[0], 0), s = new e.Geometry, this.merge(s, p), this.merge(s, m), this.merge(s, g), E[c] = s
                }
                s = new e.Mesh(s, this.getMat("default")), this.moveMesh(s, a.legScale / 2 * (t ? -1 : 1), a.legHeight - a.crouchDst + .5, 0)
            } else s = this.genColorCube(o, a.legHeight, o, [n, .75, i, .25], -.5), this.moveMesh(s, a.legScale / 2 * (t ? -1 : 1), a.legHeight, 0);
            return s.receiveShadow = !0, s.noGreen = !0, s
        };
        var T = {};
        this.genArms = function(t, n, i, r, o, s) {
            var c = T[t.name + "-" + i + "-" + s + "-" + (o || 0)];
            if (!c) {
                c = new e.Geometry;
                var l = (-a.chestWidth + a.armScale / 2 - a.armInset) * (s ? .4 : 1);
                o && 1 != o || this.merge(c, this.genArm(l, a.armOff, t, !0, n, i, r, s)), o && 2 != o || this.merge(c, this.genArm(-l, a.armOff, t, !1, n, i, r, s)), T[t.name + "-" + i + "-" + s + "-" + (o || 0)] = c
            }
            return (c = new e.Mesh(c, this.getMat("default"))).noGreen = !0, c.receiveShadow = !0, c
        }, this.genArm = function(t, n, i, o, s, c, l, h) {
            var u = o ? i.leftHoldY : i.rightHoldY,
                p = o ? i.leftHoldZ : i.rightHoldZ,
                d = o ? i.leftHoldX || 0 : i.rightHoldX || 0,
                f = a.armScale * (h ? .75 : 1),
                m = Math.min(a.uArmLength + a.lArmLength - .01, r.getDistance3D(t, n, 0, i.xOff - d, i.yOff + u, i.zOff - p)),
                g = r.getAnglesSSS(m, a.uArmLength, a.lArmLength),
                v = Math.PI / 2;
            if (!h) {
                var y = this.genColorCube(f, a.uArmLength, f, [s, 1]);
                this.moveMesh(y, 0, -a.uArmLength / 2 * Math.cos(v), -a.uArmLength / 2 * Math.sin(v)), this.rotateMesh(y, 0, v, 0);
                var x = f / 2,
                    w = Math.sqrt(x * x + x * x - 2 * x * x * Math.cos(Math.PI + g[0] + Math.PI / 2)),
                    b = 2 * Math.sqrt(x * x - w / 2 * (w / 2)),
                    M = this.genColorCube(f, w, b, [s, 1]);
                this.moveMesh(M, 0, -a.uArmLength * Math.cos(v), -a.uArmLength * Math.sin(v)), this.rotateMesh(M, 0, (v + g[0]) / 2, 0)
            }
            var _ = this.genColorCube(f, a.lArmLength, f, [s, .65, c, .15, l, .2]),
                S = a.lArmLength / 2;
            this.moveMesh(_, 0, -a.uArmLength * Math.cos(v) - S * Math.cos(g[0]), -a.uArmLength * Math.sin(v) - S * Math.sin(g[0])), this.rotateMesh(_, 0, g[0], 0);
            var E = new e.Geometry;
            if (h) {
                if (o) {
                    var T = this.genColorCube(f, 20, f, [s, 1]);
                    this.moveMesh(T, 0, -a.uArmLength * Math.cos(v) - -10 * Math.cos(g[0]), -a.uArmLength * Math.sin(v) - -10 * Math.sin(g[0])), this.rotateMesh(T, 0, g[0], 0), this.merge(E, T)
                }
            } else this.merge(E, y), this.merge(E, M);
            return this.merge(E, _), E = new e.Mesh(E), this.moveMesh(E, t - i.xOff, n - i.yOff, -i.zOff), E.rotation.order = "YXZ", E.rotation.x = -g[1] - r.getDirection(0, n, i.zOff - p, i.yOff + u), E.rotation.y = r.getDirection(-t, 0, -i.xOff - d, i.zOff - p) - Math.PI / 2, E
        }, this.addCube = function(t, n, i, r, a, s, c, l) {
            l = l || {};
            var h = new e.Mesh(o.generateCube(c, r, a, s, l));
            return this.moveMesh(h, t, n, i), h.rotateY(l.xR || 0), h.rotateX(l.yR || 0), h.rotateZ(l.zR || 0), h.scale.set(r, a, s), l.src ? this.meshGroup(h, l) : this.add(h, l), h
        };
        var A = [];
        this.addSpray = function(t, n, i, o, s, c, h, u) {
            tmpObj = null;
            for (var p = 0; p < A.length; ++p)
                if (A[p].sid == t) {
                    tmpObj = A[p];
                    break
                } tmpObj || (tmpObj = new e.Mesh(l), tmpObj.sid = t, tmpObj.scale.set(a.sprayScale, a.sprayScale, 1), tmpObj.receiveShadow = !0, A.push(tmpObj), this.add(tmpObj)), this.moveMesh(tmpObj, i, o, s), tmpObj.rotation.y = r.toRad(c), tmpObj.rotation.x = r.toRad(h), tmpObj.material = this.getMat("sprays/" + n, {
                depthWrite: !1,
                opacity: u,
                transparent: !0
            })
        }, this.clearSprays = function() {
            for (var t = 0; t < A.length; ++t) A[t] && A[t].material.map && A[t].material.map.dispose(), this.scene.remove(A[t]);
            A.length = 0
        }, this.addPlane = function(t, n, i, r, a, s, c, l, h) {
            (s = s || {}).premultipliedAlpha = !0;
            var u = new e.Mesh(o.generatePlane(a, r, s));
            return s.euler && (u.eulerOrder = s.euler), this.moveMesh(u, t, n, i), u.rotateY(c || 0), u.rotateX((l || 0) - Math.PI / 2), u.rotateZ(h || 0), u.scale.set(2 * r, 2 * a, 1), s.dontAdd ? s.src && (u.material = this.getMat(s.src, s)) : s.src && !s.noGroup ? this.meshGroup(u, s, 1) : this.add(u, s), u
        }, this.addRamp = function(t, n, i, r, a, s, c, l, h) {
            l = l || {};
            var u = new e.Mesh(o.generatePlane(2 * s, r, l));
            this.moveMesh(u, t, n + a / 2, i), s *= 2;
            var p = Math.sqrt(a * a + s * s);
            return u.scale.set(r, p, 2), u.rotateY(-Math.PI / 2 - c), u.rotateX(Math.asin(a / p) - Math.PI / 2), u.rotateZ(h || 0), l.src ? this.meshGroup(u, l, 1) : this.add(u, l), u
        };
        var L = [],
            R = [];
        this.loadMesh = function(t, n, i, r, a, o, s, l) {
            var h = this.getMat(t.src, t),
                u = L[t.src];
            if (u) {
                if (t.centerZ) {
                    u.computeBoundingBox();
                    var p = u.boundingBox.getCenter();
                    s.translateZ(p.x * o)
                }
            } else u = l ? new e.Geometry : new e.BufferGeometry, L[t.src] = u, c.load("/models/" + t.src + ".obj", function(n) {
                if (n.children[0].geometry.computeVertexNormals(), u.copy(l ? (new e.Geometry).fromBufferGeometry(n.children[0].geometry) : n.children[0].geometry), t.uv2 && u.addAttribute("uv2", new e.BufferAttribute(u.attributes.uv.array, 2)), l) {
                    for (var i = new e.Geometry, r = 0; r < R[t.src].length; ++r) g.merge(i, R[t.src][r]);
                    g.add(new e.Mesh(i, h), t), R[t.src].loaded = !0
                }
                if (t.centerZ) {
                    u.computeBoundingBox();
                    var a = u.boundingBox.getCenter();
                    s.translateZ(a.x * o)
                }
            });
            var d = new e.Mesh(u, h);
            d.receiveShadow = !0, d.noGreen = t.noGreen, d.castShadow = t.shadows, d.rotation.y = a || 0, g.moveMesh(d, n, i, r), g.scaleMesh(d, o || 1, o || 1, o || 1), l ? R[t.src] ? R[t.src].loaded ? this.meshGroup(d, t) : R[t.src].push(d) : R[t.src] = [d] : s.add(d)
        }, this.genObj3D = function(t, n, i) {
            var r = new e.Object3D;
            return this.moveMesh(r, t || 0, n || 0, i || 0), r
        }, this.merge = function(t, e, n) {
            e.updateMatrix(), t.merge(e.geometry, e.matrix, n)
        }, this.meshGroup = function(t, n) {
            var i = n.src + "-" + (n.shadowsR || "a") + (n.emissive || "e") + (n.opacity || "o");
            v[i] || (v[i] = new e.Geometry, v[i].data = n), t.updateMatrix(), v[i].merge(t.geometry, t.matrix)
        }, this.addMeshGroups = function() {
            for (var t in v)
                if (v.hasOwnProperty(t)) {
                    var n = new e.Mesh((new e.BufferGeometry).fromGeometry(v[t]));
                    n.groupSrc = v[t].data.src, n.visible = !P[n.groupSrc], n.matrixAutoUpdate = !1, this.add(n, v[t].data)
                } v = {}
        };
        var P = {};
        this.toggleMeshGroup = function(t, n) {
            P[t] = !n, this.scene && this.scene.traverse(function(i) {
                i instanceof e.Mesh && i.groupSrc == t && (i.visible = n)
            })
        }, this.add = function(t, e) {
            e && (t.castShadow = e.shadows, t.receiveShadow = e.shadows || e.shadowsR, t.material = this.getMat(e.src, e)), this.updateGreenScreen(t), this.scene.add(t), this.updateShadowMap()
        }, this.remove = function(t) {
            this.scene.remove(t)
        }, this.moveMesh = function(t, e, n, i) {
            void 0 != e && (t.position.x = e), void 0 != n && (t.position.y = n), void 0 != i && (t.position.z = i)
        }, this.scaleMesh = function(t, e, n, i) {
            t.scale.set(e, n, i)
        }, this.rotateMesh = function(t, e, n, i) {
            (e || 0 == e) && (t.rotation.y = e), (n || 0 == n) && (t.rotation.x = n), (i || 0 == i) && (t.rotation.z = i)
        }
    }, t.exports.initScene = function(t) {
        if (i = t, t.ambient && (this.ambientLight = new a.AmbientLight(t.ambient), this.ambientLight.name = "ambLight", this.scene.getObjectByName("ambLight") || this.scene.add(this.ambientLight)), t.light) {
            this.skyLight = new a.DirectionalLight(t.light, 1.1), this.skyLight.name = "skyLight", this.scene.getObjectByName("skyLight") || this.scene.add(this.skyLight);
            var e = -.3 * Math.PI,
                n = 2 * Math.PI * -.25;
            this.skyLight.position.x = r.lightDistance * Math.cos(n), this.skyLight.position.y = r.lightDistance * Math.sin(n) * Math.sin(e), this.skyLight.position.z = r.lightDistance * Math.sin(n) * Math.cos(e), this.skyLight.castShadow = !0, this.skyLight.shadow.mapSize.width = r.shadowRes, this.skyLight.shadow.mapSize.height = r.shadowRes, this.skyLight.shadow.camera.far = r.shadowDst
        }
        this.scene.fog = new a.Fog(t.fog, 1, t.fogD), this.renderer.setClearColor(t.sky), this.useDepthMap && "0" != this.useDepthMap && this.toggleDepthMap(this.useDepthMap), this.greenScreen && this.toggleGreenscreen(this.greenScreen)
    }
}, function(t, e, n) {
    var i, r, a = 0,
        o = function(t) {
            this.sid = a++, this.width = t.w, this.length = t.l, this.height = t.h, this.x = t.x, this.y = t.y, this.z = t.z, this.dir = t.d, this.src = t.src, this.ramp = t.ramp, this.ladder = t.ladder, this.jumpPad = t.jumpPad, this.noShoot = t.noShoot, this.stepSrc = t.s, this.score = t.score, this.kill = t.kill, this.dummy = t.dummy, this.noVis = t.noVis, this.complexMesh = t.complexMesh, this.penetrable = t.penetrable, this.boost = t.boost
        };
    t.exports.manager = function(t, e, a) {
        var s;
        t && (i = n(7).prefabs, r = n(2)), this.objects = [], this.collision = function(t, e, n) {
            return t.x - t.width - n <= e.x + e.width && t.x + t.width + n >= e.x - e.width && t.z - t.length - n <= e.z + e.length && t.z + t.length + n >= e.z - e.length && t.y - t.height - n <= e.y + e.height && t.y + t.height + n >= e.y - e.height
        }, this.checkPos = function(t, n, i, r, a) {
            for (var o = 0; o < this.objects.length; ++o)
                if (this.objects[o] != r && this.objects[o] != a && !this.objects[o].ramp && e.pointInBox3D(t, n, i, this.objects[o])) return !1;
            return !0
        }, this.addCylinder = function(e, n, i, r, a, o) {
            t && (o.shadows = !0, t.addCylinder(e, n, i, r, a, o))
        }, this.addDeathZone = function(t, e, n, i, r, a) {
            this.objects.push(new o({
                x: t,
                z: n,
                y: e + a / 2,
                w: i / 2,
                l: r / 2,
                h: a / 2,
                kill: !0,
                noShoot: !0,
                complexMesh: !0
            }))
        }, this.addScoreZone = function(t, e, n, i, r, a) {
            this.objects.push(new o({
                x: t,
                z: n,
                y: e + a / 2,
                w: i / 2,
                l: r / 2,
                h: a / 2,
                score: !0,
                noShoot: !0,
                complexMesh: !0
            }))
        }, this.addLadder = function(n, i, c, l, h, u) {
            var p = a.ladderScale,
                d = a.ladderScale;
            if (0 == h || h == Math.PI ? d = a.ladderWidth : p = a.ladderWidth, s = new o({
                    ladder: !0,
                    complexMesh: !0,
                    noShoot: !0,
                    d: h,
                    x: n + a.ladderScale * Math.cos(h),
                    z: c + a.ladderScale * Math.sin(h),
                    y: i,
                    w: p,
                    l: d,
                    h: l
                }), this.objects.push(s), t && !u) {
                var f = {
                    src: "floor_0",
                    vertexColors: r.VertexColors,
                    scale: .02,
                    shadows: !0
                };
                t.addCube(s.x + a.ladderWidth * Math.sin(h), s.y, s.z + a.ladderWidth * Math.cos(h), 2 * a.ladderScale, l + 2, 2 * a.ladderScale, [1, 1, 1, 1, 1, 1], f), t.addCube(s.x - a.ladderWidth * Math.sin(h), s.y, s.z - a.ladderWidth * Math.cos(h), 2 * a.ladderScale, l + 2, 2 * a.ladderScale, [1, 1, 1, 1, 1, 1], f);
                for (var m = Math.floor(l / 6), g = 0; g < m; ++g) t.addPlane(s.x, i + 6 * (g + 1) + e.randFloat(-1, 1), s.z, a.ladderWidth, a.ladderScale, f, -h + Math.PI / 2, Math.PI / 2, e.randFloat(-.1, .1))
            }
        }, this.addRamp = function(e, n, i, s, c, l, h, u, p, d, f) {
            var m = 0 != h && h != Math.PI,
                g = (m ? l : s) / 2,
                v = Math.sqrt(c * c + l * l),
                y = Math.asin(c / v);
            if (this.objects.push(new o({
                    x: e,
                    z: i,
                    y: n + c / 2,
                    w: s / 2,
                    l: l / 2,
                    h: c / 2,
                    d: h,
                    noShoot: !0,
                    complexMesh: !0,
                    boost: u ? y : null,
                    ramp: {
                        sX: e - g * Math.cos(h),
                        sZ: i - g * Math.sin(h),
                        eX: e + g * Math.cos(h),
                        eZ: i + g * Math.sin(h)
                    }
                })), t && !d) {
                t.addRamp(e, n, i, m ? s : l, c, (m ? l : s) / 2, h, {
                    src: p || "default",
                    colr: f,
                    scale: 1,
                    shadowsR: !0
                }), n += a.ambOff;
                var x = (m ? s : l) / 2 - a.ambScale;
                m ? s = 2 * a.ambScale : l = 2 * a.ambScale;
                for (var w = 0; w < 2; ++w) {
                    var b = w ? 1 : -1;
                    t.addRamp(e + x * b * Math.cos(h + Math.PI / 2), n, i + x * b * Math.sin(h + Math.PI / 2), m ? s : l, c, (m ? l : s) / 2, h, {
                        src: "ambient_1",
                        euler: "ZYX",
                        depthWrite: !1,
                        side: r.DoubleSide,
                        transparent: !0
                    }, w ? 0 : Math.PI)
                }
            }
        }, this.addBlock = function(e, n, i, a, s, c, l, h) {
            (h = h || {}).src = h.src || "wall_0", h.noCol || this.objects.push(new o({
                x: e,
                z: i,
                y: n + c / 2,
                w: a / 2,
                l: s / 2,
                h: c / 2,
                s: h.sound,
                src: h.src,
                noVis: h.noVis,
                penetrable: h.penetrable,
                complexMesh: h.xR || h.yR || h.zR,
                ter: !0
            })), t && !h.noVis && (h.vertexColors = r.VertexColors, h.scale = void 0 == h.scale ? 1 : h.scale, h.shadows = !h.shadowsR, t.addCube(e, n, i, a, c, s, l, h))
        }, this.addMesh = function(e, n, r, s, c, l, h, u, p) {
            n += l, p || this.objects.push(new o({
                complexMesh: !!i && i[u.toUpperCase()].complex,
                x: e,
                z: r,
                y: n,
                w: c,
                l: h,
                h: l,
                ter: !0
            })), t && t.loadMesh({
                src: u + "_0",
                emissive: a.propGlows[u] ? 16777215 : null,
                shadows: !0
            }, e, n, r, s, a[u + "Scale"], t.scene, !0)
        }, this.addPlane = function(e, n, i, a, s, c, l, h, u) {
            if ((c = c || {}).col && this.objects.push(new o({
                    x: e,
                    z: i,
                    y: n,
                    w: s,
                    l: a,
                    h: 0,
                    s: c.sound,
                    penetrable: c.penetrable,
                    noVis: c.noVis
                })), t && !c.noVis) return c.transparent = !0, c.side = r.DoubleSide, t.addPlane(e, n, i, s, a, c, l, (h || 0) + Math.PI / 2, u)
        }, this.addAmbient = function(t, e, n, i, r, a, o, s, c) {
            this.addPlane(t, e, n, o, s, {
                src: "ambient_" + (c || 0),
                euler: "ZYX",
                depthWrite: !1
            }, i, r, a)
        }, this.limitAmb = function(t, n, i, r, a, o, s) {
            var c = [e.cdv[r]],
                l = [e.cdv[a]];
            return i == -Math.PI / 2 || i == Math.PI + Math.PI / 2 ? Math.min(t, (n[a] - Math.min(o[a] - o[l], s[a] - s[l])) / 2) : i == Math.PI / 2 ? Math.min(t, (Math.max(o[a] + o[l], s[a] + s[l]) - n[a]) / 2) : 0 == i ? Math.min(t, (Math.max(o[r] + o[c], s[r] + s[c]) - n[r]) / 2) : Math.min(t, (n[r] - Math.min(o[r] - o[c], s[r] - s[c])) / 2)
        }, this.removeAll = function() {
            this.objects.length = 0
        }
    }
}, function(t, e, n) {
    ! function(e) {
        t.exports = e;
        var n = "listeners",
            i = {
                on: function(t, e) {
                    return o(this, t).push(e), this
                },
                once: function(t, e) {
                    var n = this;
                    return i.originalListener = e, o(n, t).push(i), n;

                    function i() {
                        a.call(n, t, i), e.apply(this, arguments)
                    }
                },
                off: a,
                emit: function(t, e) {
                    var n = this,
                        i = o(n, t, !0);
                    if (!i) return !1;
                    var r = arguments.length;
                    if (1 === r) i.forEach(function(t) {
                        t.call(n)
                    });
                    else if (2 === r) i.forEach(function(t) {
                        t.call(n, e)
                    });
                    else {
                        var a = Array.prototype.slice.call(arguments, 1);
                        i.forEach(function(t) {
                            t.apply(n, a)
                        })
                    }
                    return !!i.length
                }
            };

        function r(t) {
            for (var e in i) t[e] = i[e];
            return t
        }

        function a(t, e) {
            var i;
            if (arguments.length) {
                if (e) {
                    if (i = o(this, t, !0)) {
                        if (!(i = i.filter(function(t) {
                                return t !== e && t.originalListener !== e
                            })).length) return a.call(this, t);
                        this[n][t] = i
                    }
                } else if ((i = this[n]) && (delete i[t], !Object.keys(i).length)) return a.call(this)
            } else delete this[n];
            return this
        }

        function o(t, e, i) {
            if (!i || t[n]) {
                var r = t[n] || (t[n] = {});
                return r[e] || (r[e] = [])
            }
        }
        r(e.prototype), e.mixin = r
    }(function t() {
        if (!(this instanceof t)) return new t
    })
}, function(t, e, n) {
    var i = n(12),
        r = n(10),
        a = r.Uint64BE,
        o = r.Int64BE;
    e.getReadFormat = function(t) {
        var e = s.hasArrayBuffer && t && t.binarraybuffer,
            n = t && t.int64;
        return {
            map: l && t && t.usemap ? p : u,
            array: d,
            str: f,
            bin: e ? g : m,
            ext: v,
            uint8: y,
            uint16: w,
            uint32: M,
            uint64: S(8, n ? A : E),
            int8: x,
            int16: b,
            int32: _,
            int64: S(8, n ? L : T),
            float32: S(4, R),
            float64: S(8, P)
        }
    }, e.readUint8 = y;
    var s = n(0),
        c = n(11),
        l = "undefined" != typeof Map,
        h = !0;

    function u(t, e) {
        var n, i = {},
            r = new Array(e),
            a = new Array(e),
            o = t.codec.decode;
        for (n = 0; n < e; n++) r[n] = o(t), a[n] = o(t);
        for (n = 0; n < e; n++) i[r[n]] = a[n];
        return i
    }

    function p(t, e) {
        var n, i = new Map,
            r = new Array(e),
            a = new Array(e),
            o = t.codec.decode;
        for (n = 0; n < e; n++) r[n] = o(t), a[n] = o(t);
        for (n = 0; n < e; n++) i.set(r[n], a[n]);
        return i
    }

    function d(t, e) {
        for (var n = new Array(e), i = t.codec.decode, r = 0; r < e; r++) n[r] = i(t);
        return n
    }

    function f(t, e) {
        var n = t.reserve(e),
            i = n + e;
        return c.toString.call(t.buffer, "utf-8", n, i)
    }

    function m(t, e) {
        var n = t.reserve(e),
            i = n + e,
            r = c.slice.call(t.buffer, n, i);
        return s.from(r)
    }

    function g(t, e) {
        var n = t.reserve(e),
            i = n + e,
            r = c.slice.call(t.buffer, n, i);
        return s.Uint8Array.from(r).buffer
    }

    function v(t, e) {
        var n = t.reserve(e + 1),
            i = t.buffer[n++],
            r = n + e,
            a = t.codec.getExtUnpacker(i);
        if (!a) throw new Error("Invalid ext type: " + (i ? "0x" + i.toString(16) : i));
        return a(c.slice.call(t.buffer, n, r))
    }

    function y(t) {
        var e = t.reserve(1);
        return t.buffer[e]
    }

    function x(t) {
        var e = t.reserve(1),
            n = t.buffer[e];
        return 128 & n ? n - 256 : n
    }

    function w(t) {
        var e = t.reserve(2),
            n = t.buffer;
        return n[e++] << 8 | n[e]
    }

    function b(t) {
        var e = t.reserve(2),
            n = t.buffer,
            i = n[e++] << 8 | n[e];
        return 32768 & i ? i - 65536 : i
    }

    function M(t) {
        var e = t.reserve(4),
            n = t.buffer;
        return 16777216 * n[e++] + (n[e++] << 16) + (n[e++] << 8) + n[e]
    }

    function _(t) {
        var e = t.reserve(4),
            n = t.buffer;
        return n[e++] << 24 | n[e++] << 16 | n[e++] << 8 | n[e]
    }

    function S(t, e) {
        return function(n) {
            var i = n.reserve(t);
            return e.call(n.buffer, i, h)
        }
    }

    function E(t) {
        return new a(this, t).toNumber()
    }

    function T(t) {
        return new o(this, t).toNumber()
    }

    function A(t) {
        return new a(this, t)
    }

    function L(t) {
        return new o(this, t)
    }

    function R(t) {
        return i.read(this, t, !1, 23, 4)
    }

    function P(t) {
        return i.read(this, t, !1, 52, 8)
    }
}, function(t, e, n) {
    e.DecodeBuffer = r;
    var i = n(9).preset;

    function r(t) {
        if (!(this instanceof r)) return new r(t);
        if (t && (this.options = t, t.codec)) {
            var e = this.codec = t.codec;
            e.bufferish && (this.bufferish = e.bufferish)
        }
    }
    n(22).FlexDecoder.mixin(r.prototype), r.prototype.codec = i, r.prototype.fetch = function() {
        return this.codec.decode(this)
    }
}, function(t, e, n) {
    e.decode = function(t, e) {
        var n = new i(e);
        return n.write(t), n.read()
    };
    var i = n(20).DecodeBuffer
}, function(t, e, n) {
    e.FlexDecoder = a, e.FlexEncoder = o;
    var i = n(0),
        r = "BUFFER_SHORTAGE";

    function a() {
        if (!(this instanceof a)) return new a
    }

    function o() {
        if (!(this instanceof o)) return new o
    }

    function s() {
        throw new Error("method not implemented: write()")
    }

    function c() {
        throw new Error("method not implemented: fetch()")
    }

    function l() {
        return this.buffers && this.buffers.length ? (this.flush(), this.pull()) : this.fetch()
    }

    function h(t) {
        (this.buffers || (this.buffers = [])).push(t)
    }

    function u() {
        return (this.buffers || (this.buffers = [])).shift()
    }

    function p(t) {
        return function(e) {
            for (var n in t) e[n] = t[n];
            return e
        }
    }
    a.mixin = p({
        bufferish: i,
        write: function(t) {
            var e = this.offset ? i.prototype.slice.call(this.buffer, this.offset) : this.buffer;
            this.buffer = e ? t ? this.bufferish.concat([e, t]) : e : t, this.offset = 0
        },
        fetch: c,
        flush: function() {
            for (; this.offset < this.buffer.length;) {
                var t, e = this.offset;
                try {
                    t = this.fetch()
                } catch (t) {
                    if (t && t.message != r) throw t;
                    this.offset = e;
                    break
                }
                this.push(t)
            }
        },
        push: h,
        pull: u,
        read: l,
        reserve: function(t) {
            var e = this.offset,
                n = e + t;
            if (n > this.buffer.length) throw new Error(r);
            return this.offset = n, e
        },
        offset: 0
    }), a.mixin(a.prototype), o.mixin = p({
        bufferish: i,
        write: s,
        fetch: function() {
            var t = this.start;
            if (t < this.offset) {
                var e = this.start = this.offset;
                return i.prototype.slice.call(this.buffer, t, e)
            }
        },
        flush: function() {
            for (; this.start < this.offset;) {
                var t = this.fetch();
                t && this.push(t)
            }
        },
        push: h,
        pull: function() {
            var t = this.buffers || (this.buffers = []),
                e = t.length > 1 ? this.bufferish.concat(t) : t[0];
            return t.length = 0, e
        },
        read: l,
        reserve: function(t) {
            var e = 0 | t;
            if (this.buffer) {
                var n = this.buffer.length,
                    i = 0 | this.offset,
                    r = i + e;
                if (r < n) return this.offset = r, i;
                this.flush(), t = Math.max(t, Math.min(2 * n, this.maxBufferSize))
            }
            return t = Math.max(t, this.minBufferSize), this.buffer = this.bufferish.alloc(t), this.start = 0, this.offset = e, 0
        },
        send: function(t) {
            var e = t.length;
            if (e > this.minBufferSize) this.flush(), this.push(t);
            else {
                var n = this.reserve(e);
                i.prototype.copy.call(t, this.buffer, n)
            }
        },
        maxBufferSize: 65536,
        minBufferSize: 2048,
        offset: 0,
        start: 0
    }), o.mixin(o.prototype)
}, function(t, e) {
    for (var n = e.uint8 = new Array(256), i = 0; i <= 255; i++) n[i] = r(i);

    function r(t) {
        return function(e) {
            var n = e.reserve(1);
            e.buffer[n] = t
        }
    }
}, function(t, e, n) {
    "use strict";
    (function(t) {
        var i = n(47),
            r = n(12),
            a = n(5);

        function o() {
            return c.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
        }

        function s(t, e) {
            if (o() < e) throw new RangeError("Invalid typed array length");
            return c.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = c.prototype : (null === t && (t = new c(e)), t.length = e), t
        }

        function c(t, e, n) {
            if (!(c.TYPED_ARRAY_SUPPORT || this instanceof c)) return new c(t, e, n);
            if ("number" == typeof t) {
                if ("string" == typeof e) throw new Error("If encoding is specified then the first argument must be a string");
                return u(this, t)
            }
            return l(this, t, e, n)
        }

        function l(t, e, n, i) {
            if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');
            return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function(t, e, n, i) {
                if (e.byteLength, n < 0 || e.byteLength < n) throw new RangeError("'offset' is out of bounds");
                if (e.byteLength < n + (i || 0)) throw new RangeError("'length' is out of bounds");
                return e = void 0 === n && void 0 === i ? new Uint8Array(e) : void 0 === i ? new Uint8Array(e, n) : new Uint8Array(e, n, i), c.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = c.prototype : t = p(t, e), t
            }(t, e, n, i) : "string" == typeof e ? function(t, e, n) {
                if ("string" == typeof n && "" !== n || (n = "utf8"), !c.isEncoding(n)) throw new TypeError('"encoding" must be a valid string encoding');
                var i = 0 | f(e, n),
                    r = (t = s(t, i)).write(e, n);
                return r !== i && (t = t.slice(0, r)), t
            }(t, e, n) : function(t, e) {
                if (c.isBuffer(e)) {
                    var n = 0 | d(e.length);
                    return 0 === (t = s(t, n)).length ? t : (e.copy(t, 0, 0, n), t)
                }
                if (e) {
                    if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length" in e) return "number" != typeof e.length || function(t) {
                        return t != t
                    }(e.length) ? s(t, 0) : p(t, e);
                    if ("Buffer" === e.type && a(e.data)) return p(t, e.data)
                }
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")
            }(t, e)
        }

        function h(t) {
            if ("number" != typeof t) throw new TypeError('"size" argument must be a number');
            if (t < 0) throw new RangeError('"size" argument must not be negative')
        }

        function u(t, e) {
            if (h(e), t = s(t, e < 0 ? 0 : 0 | d(e)), !c.TYPED_ARRAY_SUPPORT)
                for (var n = 0; n < e; ++n) t[n] = 0;
            return t
        }

        function p(t, e) {
            var n = e.length < 0 ? 0 : 0 | d(e.length);
            t = s(t, n);
            for (var i = 0; i < n; i += 1) t[i] = 255 & e[i];
            return t
        }

        function d(t) {
            if (t >= o()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o().toString(16) + " bytes");
            return 0 | t
        }

        function f(t, e) {
            if (c.isBuffer(t)) return t.length;
            if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;
            "string" != typeof t && (t = "" + t);
            var n = t.length;
            if (0 === n) return 0;
            for (var i = !1;;) switch (e) {
                case "ascii":
                case "latin1":
                case "binary":
                    return n;
                case "utf8":
                case "utf-8":
                case void 0:
                    return F(t).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return 2 * n;
                case "hex":
                    return n >>> 1;
                case "base64":
                    return H(t).length;
                default:
                    if (i) return F(t).length;
                    e = ("" + e).toLowerCase(), i = !0
            }
        }

        function m(t, e, n) {
            var i = t[e];
            t[e] = t[n], t[n] = i
        }

        function g(t, e, n, i, r) {
            if (0 === t.length) return -1;
            if ("string" == typeof n ? (i = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = r ? 0 : t.length - 1), n < 0 && (n = t.length + n), n >= t.length) {
                if (r) return -1;
                n = t.length - 1
            } else if (n < 0) {
                if (!r) return -1;
                n = 0
            }
            if ("string" == typeof e && (e = c.from(e, i)), c.isBuffer(e)) return 0 === e.length ? -1 : v(t, e, n, i, r);
            if ("number" == typeof e) return e &= 255, c.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? r ? Uint8Array.prototype.indexOf.call(t, e, n) : Uint8Array.prototype.lastIndexOf.call(t, e, n) : v(t, [e], n, i, r);
            throw new TypeError("val must be string, number or Buffer")
        }

        function v(t, e, n, i, r) {
            var a, o = 1,
                s = t.length,
                c = e.length;
            if (void 0 !== i && ("ucs2" === (i = String(i).toLowerCase()) || "ucs-2" === i || "utf16le" === i || "utf-16le" === i)) {
                if (t.length < 2 || e.length < 2) return -1;
                o = 2, s /= 2, c /= 2, n /= 2
            }

            function l(t, e) {
                return 1 === o ? t[e] : t.readUInt16BE(e * o)
            }
            if (r) {
                var h = -1;
                for (a = n; a < s; a++)
                    if (l(t, a) === l(e, -1 === h ? 0 : a - h)) {
                        if (-1 === h && (h = a), a - h + 1 === c) return h * o
                    } else -1 !== h && (a -= a - h), h = -1
            } else
                for (n + c > s && (n = s - c), a = n; a >= 0; a--) {
                    for (var u = !0, p = 0; p < c; p++)
                        if (l(t, a + p) !== l(e, p)) {
                            u = !1;
                            break
                        } if (u) return a
                }
            return -1
        }

        function y(t, e, n, i) {
            n = Number(n) || 0;
            var r = t.length - n;
            i ? (i = Number(i)) > r && (i = r) : i = r;
            var a = e.length;
            if (a % 2 != 0) throw new TypeError("Invalid hex string");
            i > a / 2 && (i = a / 2);
            for (var o = 0; o < i; ++o) {
                var s = parseInt(e.substr(2 * o, 2), 16);
                if (isNaN(s)) return o;
                t[n + o] = s
            }
            return o
        }

        function x(t, e, n, i) {
            return G(F(e, t.length - n), t, n, i)
        }

        function w(t, e, n, i) {
            return G(function(t) {
                for (var e = [], n = 0; n < t.length; ++n) e.push(255 & t.charCodeAt(n));
                return e
            }(e), t, n, i)
        }

        function b(t, e, n, i) {
            return w(t, e, n, i)
        }

        function M(t, e, n, i) {
            return G(H(e), t, n, i)
        }

        function _(t, e, n, i) {
            return G(function(t, e) {
                for (var n, i, r, a = [], o = 0; o < t.length && !((e -= 2) < 0); ++o) i = (n = t.charCodeAt(o)) >> 8, r = n % 256, a.push(r), a.push(i);
                return a
            }(e, t.length - n), t, n, i)
        }

        function S(t, e, n) {
            return 0 === e && n === t.length ? i.fromByteArray(t) : i.fromByteArray(t.slice(e, n))
        }

        function E(t, e, n) {
            n = Math.min(t.length, n);
            for (var i = [], r = e; r < n;) {
                var a, o, s, c, l = t[r],
                    h = null,
                    u = l > 239 ? 4 : l > 223 ? 3 : l > 191 ? 2 : 1;
                if (r + u <= n) switch (u) {
                    case 1:
                        l < 128 && (h = l);
                        break;
                    case 2:
                        128 == (192 & (a = t[r + 1])) && (c = (31 & l) << 6 | 63 & a) > 127 && (h = c);
                        break;
                    case 3:
                        a = t[r + 1], o = t[r + 2], 128 == (192 & a) && 128 == (192 & o) && (c = (15 & l) << 12 | (63 & a) << 6 | 63 & o) > 2047 && (c < 55296 || c > 57343) && (h = c);
                        break;
                    case 4:
                        a = t[r + 1], o = t[r + 2], s = t[r + 3], 128 == (192 & a) && 128 == (192 & o) && 128 == (192 & s) && (c = (15 & l) << 18 | (63 & a) << 12 | (63 & o) << 6 | 63 & s) > 65535 && c < 1114112 && (h = c)
                }
                null === h ? (h = 65533, u = 1) : h > 65535 && (h -= 65536, i.push(h >>> 10 & 1023 | 55296), h = 56320 | 1023 & h), i.push(h), r += u
            }
            return function(t) {
                var e = t.length;
                if (e <= T) return String.fromCharCode.apply(String, t);
                for (var n = "", i = 0; i < e;) n += String.fromCharCode.apply(String, t.slice(i, i += T));
                return n
            }(i)
        }
        e.Buffer = c, e.SlowBuffer = function(t) {
            return +t != t && (t = 0), c.alloc(+t)
        }, e.INSPECT_MAX_BYTES = 50, c.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function() {
            try {
                var t = new Uint8Array(1);
                return t.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function() {
                        return 42
                    }
                }, 42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength
            } catch (t) {
                return !1
            }
        }(), e.kMaxLength = o(), c.poolSize = 8192, c._augment = function(t) {
            return t.__proto__ = c.prototype, t
        }, c.from = function(t, e, n) {
            return l(null, t, e, n)
        }, c.TYPED_ARRAY_SUPPORT && (c.prototype.__proto__ = Uint8Array.prototype, c.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && c[Symbol.species] === c && Object.defineProperty(c, Symbol.species, {
            value: null,
            configurable: !0
        })), c.alloc = function(t, e, n) {
            return function(t, e, n, i) {
                return h(e), e <= 0 ? s(t, e) : void 0 !== n ? "string" == typeof i ? s(t, e).fill(n, i) : s(t, e).fill(n) : s(t, e)
            }(null, t, e, n)
        }, c.allocUnsafe = function(t) {
            return u(null, t)
        }, c.allocUnsafeSlow = function(t) {
            return u(null, t)
        }, c.isBuffer = function(t) {
            return !(null == t || !t._isBuffer)
        }, c.compare = function(t, e) {
            if (!c.isBuffer(t) || !c.isBuffer(e)) throw new TypeError("Arguments must be Buffers");
            if (t === e) return 0;
            for (var n = t.length, i = e.length, r = 0, a = Math.min(n, i); r < a; ++r)
                if (t[r] !== e[r]) {
                    n = t[r], i = e[r];
                    break
                } return n < i ? -1 : i < n ? 1 : 0
        }, c.isEncoding = function(t) {
            switch (String(t).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return !0;
                default:
                    return !1
            }
        }, c.concat = function(t, e) {
            if (!a(t)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === t.length) return c.alloc(0);
            var n;
            if (void 0 === e)
                for (e = 0, n = 0; n < t.length; ++n) e += t[n].length;
            var i = c.allocUnsafe(e),
                r = 0;
            for (n = 0; n < t.length; ++n) {
                var o = t[n];
                if (!c.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
                o.copy(i, r), r += o.length
            }
            return i
        }, c.byteLength = f, c.prototype._isBuffer = !0, c.prototype.swap16 = function() {
            var t = this.length;
            if (t % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var e = 0; e < t; e += 2) m(this, e, e + 1);
            return this
        }, c.prototype.swap32 = function() {
            var t = this.length;
            if (t % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var e = 0; e < t; e += 4) m(this, e, e + 3), m(this, e + 1, e + 2);
            return this
        }, c.prototype.swap64 = function() {
            var t = this.length;
            if (t % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var e = 0; e < t; e += 8) m(this, e, e + 7), m(this, e + 1, e + 6), m(this, e + 2, e + 5), m(this, e + 3, e + 4);
            return this
        }, c.prototype.toString = function() {
            var t = 0 | this.length;
            return 0 === t ? "" : 0 === arguments.length ? E(this, 0, t) : function(t, e, n) {
                var i = !1;
                if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";
                if ((void 0 === n || n > this.length) && (n = this.length), n <= 0) return "";
                if ((n >>>= 0) <= (e >>>= 0)) return "";
                for (t || (t = "utf8");;) switch (t) {
                    case "hex":
                        return R(this, e, n);
                    case "utf8":
                    case "utf-8":
                        return E(this, e, n);
                    case "ascii":
                        return A(this, e, n);
                    case "latin1":
                    case "binary":
                        return L(this, e, n);
                    case "base64":
                        return S(this, e, n);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return P(this, e, n);
                    default:
                        if (i) throw new TypeError("Unknown encoding: " + t);
                        t = (t + "").toLowerCase(), i = !0
                }
            }.apply(this, arguments)
        }, c.prototype.equals = function(t) {
            if (!c.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
            return this === t || 0 === c.compare(this, t)
        }, c.prototype.inspect = function() {
            var t = "",
                n = e.INSPECT_MAX_BYTES;
            return this.length > 0 && (t = this.toString("hex", 0, n).match(/.{2}/g).join(" "), this.length > n && (t += " ... ")), "<Buffer " + t + ">"
        }, c.prototype.compare = function(t, e, n, i, r) {
            if (!c.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
            if (void 0 === e && (e = 0), void 0 === n && (n = t ? t.length : 0), void 0 === i && (i = 0), void 0 === r && (r = this.length), e < 0 || n > t.length || i < 0 || r > this.length) throw new RangeError("out of range index");
            if (i >= r && e >= n) return 0;
            if (i >= r) return -1;
            if (e >= n) return 1;
            if (e >>>= 0, n >>>= 0, i >>>= 0, r >>>= 0, this === t) return 0;
            for (var a = r - i, o = n - e, s = Math.min(a, o), l = this.slice(i, r), h = t.slice(e, n), u = 0; u < s; ++u)
                if (l[u] !== h[u]) {
                    a = l[u], o = h[u];
                    break
                } return a < o ? -1 : o < a ? 1 : 0
        }, c.prototype.includes = function(t, e, n) {
            return -1 !== this.indexOf(t, e, n)
        }, c.prototype.indexOf = function(t, e, n) {
            return g(this, t, e, n, !0)
        }, c.prototype.lastIndexOf = function(t, e, n) {
            return g(this, t, e, n, !1)
        }, c.prototype.write = function(t, e, n, i) {
            if (void 0 === e) i = "utf8", n = this.length, e = 0;
            else if (void 0 === n && "string" == typeof e) i = e, n = this.length, e = 0;
            else {
                if (!isFinite(e)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                e |= 0, isFinite(n) ? (n |= 0, void 0 === i && (i = "utf8")) : (i = n, n = void 0)
            }
            var r = this.length - e;
            if ((void 0 === n || n > r) && (n = r), t.length > 0 && (n < 0 || e < 0) || e > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            i || (i = "utf8");
            for (var a = !1;;) switch (i) {
                case "hex":
                    return y(this, t, e, n);
                case "utf8":
                case "utf-8":
                    return x(this, t, e, n);
                case "ascii":
                    return w(this, t, e, n);
                case "latin1":
                case "binary":
                    return b(this, t, e, n);
                case "base64":
                    return M(this, t, e, n);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return _(this, t, e, n);
                default:
                    if (a) throw new TypeError("Unknown encoding: " + i);
                    i = ("" + i).toLowerCase(), a = !0
            }
        }, c.prototype.toJSON = function() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        };
        var T = 4096;

        function A(t, e, n) {
            var i = "";
            n = Math.min(t.length, n);
            for (var r = e; r < n; ++r) i += String.fromCharCode(127 & t[r]);
            return i
        }

        function L(t, e, n) {
            var i = "";
            n = Math.min(t.length, n);
            for (var r = e; r < n; ++r) i += String.fromCharCode(t[r]);
            return i
        }

        function R(t, e, n) {
            var i = t.length;
            (!e || e < 0) && (e = 0), (!n || n < 0 || n > i) && (n = i);
            for (var r = "", a = e; a < n; ++a) r += z(t[a]);
            return r
        }

        function P(t, e, n) {
            for (var i = t.slice(e, n), r = "", a = 0; a < i.length; a += 2) r += String.fromCharCode(i[a] + 256 * i[a + 1]);
            return r
        }

        function C(t, e, n) {
            if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
            if (t + e > n) throw new RangeError("Trying to access beyond buffer length")
        }

        function I(t, e, n, i, r, a) {
            if (!c.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (e > r || e < a) throw new RangeError('"value" argument is out of bounds');
            if (n + i > t.length) throw new RangeError("Index out of range")
        }

        function O(t, e, n, i) {
            e < 0 && (e = 65535 + e + 1);
            for (var r = 0, a = Math.min(t.length - n, 2); r < a; ++r) t[n + r] = (e & 255 << 8 * (i ? r : 1 - r)) >>> 8 * (i ? r : 1 - r)
        }

        function D(t, e, n, i) {
            e < 0 && (e = 4294967295 + e + 1);
            for (var r = 0, a = Math.min(t.length - n, 4); r < a; ++r) t[n + r] = e >>> 8 * (i ? r : 3 - r) & 255
        }

        function B(t, e, n, i, r, a) {
            if (n + i > t.length) throw new RangeError("Index out of range");
            if (n < 0) throw new RangeError("Index out of range")
        }

        function N(t, e, n, i, a) {
            return a || B(t, 0, n, 4), r.write(t, e, n, i, 23, 4), n + 4
        }

        function k(t, e, n, i, a) {
            return a || B(t, 0, n, 8), r.write(t, e, n, i, 52, 8), n + 8
        }
        c.prototype.slice = function(t, e) {
            var n, i = this.length;
            if (t = ~~t, e = void 0 === e ? i : ~~e, t < 0 ? (t += i) < 0 && (t = 0) : t > i && (t = i), e < 0 ? (e += i) < 0 && (e = 0) : e > i && (e = i), e < t && (e = t), c.TYPED_ARRAY_SUPPORT)(n = this.subarray(t, e)).__proto__ = c.prototype;
            else {
                var r = e - t;
                n = new c(r, void 0);
                for (var a = 0; a < r; ++a) n[a] = this[a + t]
            }
            return n
        }, c.prototype.readUIntLE = function(t, e, n) {
            t |= 0, e |= 0, n || C(t, e, this.length);
            for (var i = this[t], r = 1, a = 0; ++a < e && (r *= 256);) i += this[t + a] * r;
            return i
        }, c.prototype.readUIntBE = function(t, e, n) {
            t |= 0, e |= 0, n || C(t, e, this.length);
            for (var i = this[t + --e], r = 1; e > 0 && (r *= 256);) i += this[t + --e] * r;
            return i
        }, c.prototype.readUInt8 = function(t, e) {
            return e || C(t, 1, this.length), this[t]
        }, c.prototype.readUInt16LE = function(t, e) {
            return e || C(t, 2, this.length), this[t] | this[t + 1] << 8
        }, c.prototype.readUInt16BE = function(t, e) {
            return e || C(t, 2, this.length), this[t] << 8 | this[t + 1]
        }, c.prototype.readUInt32LE = function(t, e) {
            return e || C(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3]
        }, c.prototype.readUInt32BE = function(t, e) {
            return e || C(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3])
        }, c.prototype.readIntLE = function(t, e, n) {
            t |= 0, e |= 0, n || C(t, e, this.length);
            for (var i = this[t], r = 1, a = 0; ++a < e && (r *= 256);) i += this[t + a] * r;
            return i >= (r *= 128) && (i -= Math.pow(2, 8 * e)), i
        }, c.prototype.readIntBE = function(t, e, n) {
            t |= 0, e |= 0, n || C(t, e, this.length);
            for (var i = e, r = 1, a = this[t + --i]; i > 0 && (r *= 256);) a += this[t + --i] * r;
            return a >= (r *= 128) && (a -= Math.pow(2, 8 * e)), a
        }, c.prototype.readInt8 = function(t, e) {
            return e || C(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
        }, c.prototype.readInt16LE = function(t, e) {
            e || C(t, 2, this.length);
            var n = this[t] | this[t + 1] << 8;
            return 32768 & n ? 4294901760 | n : n
        }, c.prototype.readInt16BE = function(t, e) {
            e || C(t, 2, this.length);
            var n = this[t + 1] | this[t] << 8;
            return 32768 & n ? 4294901760 | n : n
        }, c.prototype.readInt32LE = function(t, e) {
            return e || C(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24
        }, c.prototype.readInt32BE = function(t, e) {
            return e || C(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]
        }, c.prototype.readFloatLE = function(t, e) {
            return e || C(t, 4, this.length), r.read(this, t, !0, 23, 4)
        }, c.prototype.readFloatBE = function(t, e) {
            return e || C(t, 4, this.length), r.read(this, t, !1, 23, 4)
        }, c.prototype.readDoubleLE = function(t, e) {
            return e || C(t, 8, this.length), r.read(this, t, !0, 52, 8)
        }, c.prototype.readDoubleBE = function(t, e) {
            return e || C(t, 8, this.length), r.read(this, t, !1, 52, 8)
        }, c.prototype.writeUIntLE = function(t, e, n, i) {
            t = +t, e |= 0, n |= 0, i || I(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
            var r = 1,
                a = 0;
            for (this[e] = 255 & t; ++a < n && (r *= 256);) this[e + a] = t / r & 255;
            return e + n
        }, c.prototype.writeUIntBE = function(t, e, n, i) {
            t = +t, e |= 0, n |= 0, i || I(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
            var r = n - 1,
                a = 1;
            for (this[e + r] = 255 & t; --r >= 0 && (a *= 256);) this[e + r] = t / a & 255;
            return e + n
        }, c.prototype.writeUInt8 = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 1, 255, 0), c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1
        }, c.prototype.writeUInt16LE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 2, 65535, 0), c.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : O(this, t, e, !0), e + 2
        }, c.prototype.writeUInt16BE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 2, 65535, 0), c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : O(this, t, e, !1), e + 2
        }, c.prototype.writeUInt32LE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 4, 4294967295, 0), c.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : D(this, t, e, !0), e + 4
        }, c.prototype.writeUInt32BE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 4, 4294967295, 0), c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : D(this, t, e, !1), e + 4
        }, c.prototype.writeIntLE = function(t, e, n, i) {
            if (t = +t, e |= 0, !i) {
                var r = Math.pow(2, 8 * n - 1);
                I(this, t, e, n, r - 1, -r)
            }
            var a = 0,
                o = 1,
                s = 0;
            for (this[e] = 255 & t; ++a < n && (o *= 256);) t < 0 && 0 === s && 0 !== this[e + a - 1] && (s = 1), this[e + a] = (t / o >> 0) - s & 255;
            return e + n
        }, c.prototype.writeIntBE = function(t, e, n, i) {
            if (t = +t, e |= 0, !i) {
                var r = Math.pow(2, 8 * n - 1);
                I(this, t, e, n, r - 1, -r)
            }
            var a = n - 1,
                o = 1,
                s = 0;
            for (this[e + a] = 255 & t; --a >= 0 && (o *= 256);) t < 0 && 0 === s && 0 !== this[e + a + 1] && (s = 1), this[e + a] = (t / o >> 0) - s & 255;
            return e + n
        }, c.prototype.writeInt8 = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 1, 127, -128), c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1
        }, c.prototype.writeInt16LE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 2, 32767, -32768), c.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : O(this, t, e, !0), e + 2
        }, c.prototype.writeInt16BE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 2, 32767, -32768), c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : O(this, t, e, !1), e + 2
        }, c.prototype.writeInt32LE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 4, 2147483647, -2147483648), c.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : D(this, t, e, !0), e + 4
        }, c.prototype.writeInt32BE = function(t, e, n) {
            return t = +t, e |= 0, n || I(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : D(this, t, e, !1), e + 4
        }, c.prototype.writeFloatLE = function(t, e, n) {
            return N(this, t, e, !0, n)
        }, c.prototype.writeFloatBE = function(t, e, n) {
            return N(this, t, e, !1, n)
        }, c.prototype.writeDoubleLE = function(t, e, n) {
            return k(this, t, e, !0, n)
        }, c.prototype.writeDoubleBE = function(t, e, n) {
            return k(this, t, e, !1, n)
        }, c.prototype.copy = function(t, e, n, i) {
            if (n || (n = 0), i || 0 === i || (i = this.length), e >= t.length && (e = t.length), e || (e = 0), i > 0 && i < n && (i = n), i === n) return 0;
            if (0 === t.length || 0 === this.length) return 0;
            if (e < 0) throw new RangeError("targetStart out of bounds");
            if (n < 0 || n >= this.length) throw new RangeError("sourceStart out of bounds");
            if (i < 0) throw new RangeError("sourceEnd out of bounds");
            i > this.length && (i = this.length), t.length - e < i - n && (i = t.length - e + n);
            var r, a = i - n;
            if (this === t && n < e && e < i)
                for (r = a - 1; r >= 0; --r) t[r + e] = this[r + n];
            else if (a < 1e3 || !c.TYPED_ARRAY_SUPPORT)
                for (r = 0; r < a; ++r) t[r + e] = this[r + n];
            else Uint8Array.prototype.set.call(t, this.subarray(n, n + a), e);
            return a
        }, c.prototype.fill = function(t, e, n, i) {
            if ("string" == typeof t) {
                if ("string" == typeof e ? (i = e, e = 0, n = this.length) : "string" == typeof n && (i = n, n = this.length), 1 === t.length) {
                    var r = t.charCodeAt(0);
                    r < 256 && (t = r)
                }
                if (void 0 !== i && "string" != typeof i) throw new TypeError("encoding must be a string");
                if ("string" == typeof i && !c.isEncoding(i)) throw new TypeError("Unknown encoding: " + i)
            } else "number" == typeof t && (t &= 255);
            if (e < 0 || this.length < e || this.length < n) throw new RangeError("Out of range index");
            if (n <= e) return this;
            var a;
            if (e >>>= 0, n = void 0 === n ? this.length : n >>> 0, t || (t = 0), "number" == typeof t)
                for (a = e; a < n; ++a) this[a] = t;
            else {
                var o = c.isBuffer(t) ? t : F(new c(t, i).toString()),
                    s = o.length;
                for (a = 0; a < n - e; ++a) this[a + e] = o[a % s]
            }
            return this
        };
        var U = /[^+\/0-9A-Za-z-_]/g;

        function z(t) {
            return t < 16 ? "0" + t.toString(16) : t.toString(16)
        }

        function F(t, e) {
            var n;
            e = e || 1 / 0;
            for (var i = t.length, r = null, a = [], o = 0; o < i; ++o) {
                if ((n = t.charCodeAt(o)) > 55295 && n < 57344) {
                    if (!r) {
                        if (n > 56319) {
                            (e -= 3) > -1 && a.push(239, 191, 189);
                            continue
                        }
                        if (o + 1 === i) {
                            (e -= 3) > -1 && a.push(239, 191, 189);
                            continue
                        }
                        r = n;
                        continue
                    }
                    if (n < 56320) {
                        (e -= 3) > -1 && a.push(239, 191, 189), r = n;
                        continue
                    }
                    n = 65536 + (r - 55296 << 10 | n - 56320)
                } else r && (e -= 3) > -1 && a.push(239, 191, 189);
                if (r = null, n < 128) {
                    if ((e -= 1) < 0) break;
                    a.push(n)
                } else if (n < 2048) {
                    if ((e -= 2) < 0) break;
                    a.push(n >> 6 | 192, 63 & n | 128)
                } else if (n < 65536) {
                    if ((e -= 3) < 0) break;
                    a.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128)
                } else {
                    if (!(n < 1114112)) throw new Error("Invalid code point");
                    if ((e -= 4) < 0) break;
                    a.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128)
                }
            }
            return a
        }

        function H(t) {
            return i.toByteArray(function(t) {
                if ((t = function(t) {
                        return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "")
                    }(t).replace(U, "")).length < 2) return "";
                for (; t.length % 4 != 0;) t += "=";
                return t
            }(t))
        }

        function G(t, e, n, i) {
            for (var r = 0; r < i && !(r + n >= e.length || r >= t.length); ++r) e[r + n] = t[r];
            return r
        }
    }).call(this, n(28))
}, function(t, e, n) {
    e.EncodeBuffer = r;
    var i = n(14).preset;

    function r(t) {
        if (!(this instanceof r)) return new r(t);
        if (t && (this.options = t, t.codec)) {
            var e = this.codec = t.codec;
            e.bufferish && (this.bufferish = e.bufferish)
        }
    }
    n(22).FlexEncoder.mixin(r.prototype), r.prototype.codec = i, r.prototype.write = function(t) {
        this.codec.encode(this, t)
    }
}, function(t, e, n) {
    e.encode = function(t, e) {
        var n = new i(e);
        return n.write(t), n.read()
    };
    var i = n(25).EncodeBuffer
}, function(t, e) {
    t.exports = function(t) {
        return function() {
            var e = /^[og]\s*(.+)?/,
                n = /^mtllib /,
                i = /^usemtl /;

            function r(e) {
                this.manager = void 0 !== e ? e : t.DefaultLoadingManager, this.materials = null
            }
            return r.prototype = {
                constructor: r,
                load: function(e, n, i, r) {
                    var a = this,
                        o = new t.FileLoader(a.manager);
                    o.setPath(this.path), o.load(e, function(t) {
                        n(a.parse(t))
                    }, i, r)
                },
                setPath: function(t) {
                    return this.path = t, this
                },
                setMaterials: function(t) {
                    return this.materials = t, this
                },
                parse: function(r) {
                    console.time("OBJLoader");
                    var a = new function() {
                        var t = {
                            objects: [],
                            object: {},
                            vertices: [],
                            normals: [],
                            colors: [],
                            uvs: [],
                            materialLibraries: [],
                            startObject: function(t, e) {
                                if (this.object && !1 === this.object.fromDeclaration) return this.object.name = t, void(this.object.fromDeclaration = !1 !== e);
                                var n = this.object && "function" == typeof this.object.currentMaterial ? this.object.currentMaterial() : void 0;
                                if (this.object && "function" == typeof this.object._finalize && this.object._finalize(!0), this.object = {
                                        name: t || "",
                                        fromDeclaration: !1 !== e,
                                        geometry: {
                                            vertices: [],
                                            normals: [],
                                            colors: [],
                                            uvs: []
                                        },
                                        materials: [],
                                        smooth: !0,
                                        startMaterial: function(t, e) {
                                            var n = this._finalize(!1);
                                            n && (n.inherited || n.groupCount <= 0) && this.materials.splice(n.index, 1);
                                            var i = {
                                                index: this.materials.length,
                                                name: t || "",
                                                mtllib: Array.isArray(e) && e.length > 0 ? e[e.length - 1] : "",
                                                smooth: void 0 !== n ? n.smooth : this.smooth,
                                                groupStart: void 0 !== n ? n.groupEnd : 0,
                                                groupEnd: -1,
                                                groupCount: -1,
                                                inherited: !1,
                                                clone: function(t) {
                                                    var e = {
                                                        index: "number" == typeof t ? t : this.index,
                                                        name: this.name,
                                                        mtllib: this.mtllib,
                                                        smooth: this.smooth,
                                                        groupStart: 0,
                                                        groupEnd: -1,
                                                        groupCount: -1,
                                                        inherited: !1
                                                    };
                                                    return e.clone = this.clone.bind(e), e
                                                }
                                            };
                                            return this.materials.push(i), i
                                        },
                                        currentMaterial: function() {
                                            if (this.materials.length > 0) return this.materials[this.materials.length - 1]
                                        },
                                        _finalize: function(t) {
                                            var e = this.currentMaterial();
                                            if (e && -1 === e.groupEnd && (e.groupEnd = this.geometry.vertices.length / 3, e.groupCount = e.groupEnd - e.groupStart, e.inherited = !1), t && this.materials.length > 1)
                                                for (var n = this.materials.length - 1; n >= 0; n--) this.materials[n].groupCount <= 0 && this.materials.splice(n, 1);
                                            return t && 0 === this.materials.length && this.materials.push({
                                                name: "",
                                                smooth: this.smooth
                                            }), e
                                        }
                                    }, n && n.name && "function" == typeof n.clone) {
                                    var i = n.clone(0);
                                    i.inherited = !0, this.object.materials.push(i)
                                }
                                this.objects.push(this.object)
                            },
                            finalize: function() {
                                this.object && "function" == typeof this.object._finalize && this.object._finalize(!0)
                            },
                            parseVertexIndex: function(t, e) {
                                var n = parseInt(t, 10);
                                return 3 * (n >= 0 ? n - 1 : n + e / 3)
                            },
                            parseNormalIndex: function(t, e) {
                                var n = parseInt(t, 10);
                                return 3 * (n >= 0 ? n - 1 : n + e / 3)
                            },
                            parseUVIndex: function(t, e) {
                                var n = parseInt(t, 10);
                                return 2 * (n >= 0 ? n - 1 : n + e / 2)
                            },
                            addVertex: function(t, e, n) {
                                var i = this.vertices,
                                    r = this.object.geometry.vertices;
                                r.push(i[t + 0], i[t + 1], i[t + 2]), r.push(i[e + 0], i[e + 1], i[e + 2]), r.push(i[n + 0], i[n + 1], i[n + 2])
                            },
                            addVertexPoint: function(t) {
                                var e = this.vertices;
                                this.object.geometry.vertices.push(e[t + 0], e[t + 1], e[t + 2])
                            },
                            addVertexLine: function(t) {
                                var e = this.vertices;
                                this.object.geometry.vertices.push(e[t + 0], e[t + 1], e[t + 2])
                            },
                            addNormal: function(t, e, n) {
                                var i = this.normals,
                                    r = this.object.geometry.normals;
                                r.push(i[t + 0], i[t + 1], i[t + 2]), r.push(i[e + 0], i[e + 1], i[e + 2]), r.push(i[n + 0], i[n + 1], i[n + 2])
                            },
                            addColor: function(t, e, n) {
                                var i = this.colors,
                                    r = this.object.geometry.colors;
                                r.push(i[t + 0], i[t + 1], i[t + 2]), r.push(i[e + 0], i[e + 1], i[e + 2]), r.push(i[n + 0], i[n + 1], i[n + 2])
                            },
                            addUV: function(t, e, n) {
                                var i = this.uvs,
                                    r = this.object.geometry.uvs;
                                r.push(i[t + 0], i[t + 1]), r.push(i[e + 0], i[e + 1]), r.push(i[n + 0], i[n + 1])
                            },
                            addUVLine: function(t) {
                                var e = this.uvs;
                                this.object.geometry.uvs.push(e[t + 0], e[t + 1])
                            },
                            addFace: function(t, e, n, i, r, a, o, s, c) {
                                var l = this.vertices.length,
                                    h = this.parseVertexIndex(t, l),
                                    u = this.parseVertexIndex(e, l),
                                    p = this.parseVertexIndex(n, l);
                                if (this.addVertex(h, u, p), void 0 !== i && "" !== i) {
                                    var d = this.uvs.length;
                                    h = this.parseUVIndex(i, d), u = this.parseUVIndex(r, d), p = this.parseUVIndex(a, d), this.addUV(h, u, p)
                                }
                                if (void 0 !== o && "" !== o) {
                                    var f = this.normals.length;
                                    h = this.parseNormalIndex(o, f), u = o === s ? h : this.parseNormalIndex(s, f), p = o === c ? h : this.parseNormalIndex(c, f), this.addNormal(h, u, p)
                                }
                                this.colors.length > 0 && this.addColor(h, u, p)
                            },
                            addPointGeometry: function(t) {
                                this.object.geometry.type = "Points";
                                for (var e = this.vertices.length, n = 0, i = t.length; n < i; n++) this.addVertexPoint(this.parseVertexIndex(t[n], e))
                            },
                            addLineGeometry: function(t, e) {
                                this.object.geometry.type = "Line";
                                for (var n = this.vertices.length, i = this.uvs.length, r = 0, a = t.length; r < a; r++) this.addVertexLine(this.parseVertexIndex(t[r], n));
                                var o = 0;
                                for (a = e.length; o < a; o++) this.addUVLine(this.parseUVIndex(e[o], i))
                            }
                        };
                        return t.startObject("", !1), t
                    }; - 1 !== r.indexOf("\r\n") && (r = r.replace(/\r\n/g, "\n")), -1 !== r.indexOf("\\\n") && (r = r.replace(/\\\n/g, ""));
                    for (var o = r.split("\n"), s = "", c = "", l = [], h = "function" == typeof "".trimLeft, u = 0, p = o.length; u < p; u++)
                        if (s = o[u], 0 !== (s = h ? s.trimLeft() : s.trim()).length && "#" !== (c = s.charAt(0)))
                            if ("v" === c) {
                                var d = s.split(/\s+/);
                                switch (d[0]) {
                                    case "v":
                                        a.vertices.push(parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3])), 8 === d.length && a.colors.push(parseFloat(d[4]), parseFloat(d[5]), parseFloat(d[6]));
                                        break;
                                    case "vn":
                                        a.normals.push(parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3]));
                                        break;
                                    case "vt":
                                        a.uvs.push(parseFloat(d[1]), parseFloat(d[2]))
                                }
                            } else if ("f" === c) {
                        for (var f = s.substr(1).trim().split(/\s+/), m = [], g = 0, v = f.length; g < v; g++) {
                            var y = f[g];
                            if (y.length > 0) {
                                var x = y.split("/");
                                m.push(x)
                            }
                        }
                        var w = m[0];
                        for (g = 1, v = m.length - 1; g < v; g++) {
                            var b = m[g],
                                M = m[g + 1];
                            a.addFace(w[0], b[0], M[0], w[1], b[1], M[1], w[2], b[2], M[2])
                        }
                    } else if ("l" === c) {
                        var _ = s.substring(1).trim().split(" "),
                            S = [],
                            E = [];
                        if (-1 === s.indexOf("/")) S = _;
                        else
                            for (var T = 0, A = _.length; T < A; T++) {
                                var L = _[T].split("/");
                                "" !== L[0] && S.push(L[0]), "" !== L[1] && E.push(L[1])
                            }
                        a.addLineGeometry(S, E)
                    } else if ("p" === c) {
                        var R = s.substr(1).trim().split(" ");
                        a.addPointGeometry(R)
                    } else if (null !== (l = e.exec(s))) {
                        var P = (" " + l[0].substr(1).trim()).substr(1);
                        a.startObject(P)
                    } else if (i.test(s)) a.object.startMaterial(s.substring(7).trim(), a.materialLibraries);
                    else if (n.test(s)) a.materialLibraries.push(s.substring(7).trim());
                    else {
                        if ("s" !== c) {
                            if ("\0" === s) continue;
                            throw new Error('THREE.OBJLoader: Unexpected line: "' + s + '"')
                        }
                        if ((l = s.split(" ")).length > 1) {
                            var C = l[1].trim().toLowerCase();
                            a.object.smooth = "0" !== C && "off" !== C
                        } else a.object.smooth = !0;
                        (W = a.object.currentMaterial()) && (W.smooth = a.object.smooth)
                    }
                    a.finalize();
                    var I = new t.Group;
                    for (I.materialLibraries = [].concat(a.materialLibraries), u = 0, p = a.objects.length; u < p; u++) {
                        var O = a.objects[u],
                            D = O.geometry,
                            B = O.materials,
                            N = "Line" === D.type,
                            k = "Points" === D.type,
                            U = !1;
                        if (0 !== D.vertices.length) {
                            var z = new t.BufferGeometry;
                            z.addAttribute("position", new t.Float32BufferAttribute(D.vertices, 3)), D.normals.length > 0 ? z.addAttribute("normal", new t.Float32BufferAttribute(D.normals, 3)) : z.computeVertexNormals(), D.colors.length > 0 && (U = !0, z.addAttribute("color", new t.Float32BufferAttribute(D.colors, 3))), D.uvs.length > 0 && z.addAttribute("uv", new t.Float32BufferAttribute(D.uvs, 2));
                            for (var F, H = [], G = 0, j = B.length; G < j; G++) {
                                var V = B[G],
                                    W = void 0;
                                if (null !== this.materials)
                                    if (W = this.materials.create(V.name), !N || !W || W instanceof t.LineBasicMaterial) {
                                        if (k && W && !(W instanceof t.PointsMaterial)) {
                                            var Y = new t.PointsMaterial({
                                                size: 10,
                                                sizeAttenuation: !1
                                            });
                                            X.copy(W), W = Y
                                        }
                                    } else {
                                        var X = new t.LineBasicMaterial;
                                        X.copy(W), X.lights = !1, W = X
                                    } W || ((W = N ? new t.LineBasicMaterial : k ? new t.PointsMaterial({
                                    size: 1,
                                    sizeAttenuation: !1
                                }) : new t.MeshPhongMaterial).name = V.name), W.flatShading = !V.smooth, W.vertexColors = U ? t.VertexColors : t.NoColors, H.push(W)
                            }
                            if (H.length > 1) {
                                for (G = 0, j = B.length; G < j; G++) V = B[G], z.addGroup(V.groupStart, V.groupCount, G);
                                F = N ? new t.LineSegments(z, H) : k ? new t.Points(z, H) : new t.Mesh(z, H)
                            } else F = N ? new t.LineSegments(z, H[0]) : k ? new t.Points(z, H[0]) : new t.Mesh(z, H[0]);
                            F.name = O.name, I.add(F)
                        }
                    }
                    return console.timeEnd("OBJLoader"), I
                }
            }, r
        }()
    }
}, function(t, e) {
    var n;
    n = function() {
        return this
    }();
    try {
        n = n || Function("return this")() || (0, eval)("this")
    } catch (t) {
        "object" == typeof window && (n = window)
    }
    t.exports = n
}, , function(t, e) {
    var n = ["Double Kill", "Triple Kill", "Quad Kill", "Multi Kill", "Mega Kill", "Ultra Kill", "Super Kill"],
        i = [];
    t.exports.reward = function(t, e, r, a, o) {
        if (i.length = 0, e.weapon.melee) i.push("Execution", 300);
        else {
            e.weapon.kill ? i.push(e.weapon.kill[0], e.weapon.kill[1]) : e.weapon.scope && 1 == e.aimVal ? i.push("No Scope", 100) : !e.weapon.scope || 0 == e.aimVal && e.aimTime > 180 || 1 == e.aimDir ? i.push("", 50) : i.push("Quick Scope", 75), o.kills <= 1 && i.push("First Blood", 50);
            var s = t.getSpin(e);
            e.weapon.nSkill || s >= 360 && i.push("360!", 200), a.headShot && i.push("Headshot", 50), !e.weapon.scope && a.dst * e.weapon.range > 200 && i.push("Longshot", 25)
        }
        e.airTime >= 400 && i.push("Mid Air", 25);
        for (var c = n.length - 1; c >= 0; --c)
            if (e.streak > c) {
                i.push(n[c], 50 * (c + 1));
                break
            } return i.length ? i : null
    }, t.exports.getScore = function(t) {
        var e = 0;
        if (t)
            for (var n = 1; n < t.length; n += 2) e += t[n];
        return e
    }
}, function(t, e, n) {
    var i = n(2);
    t.exports.manager = function(t, e, r, a, o, s, c) {
        var l, h, u;
        this.list = [];
        var p = n(30);
        this.hasServer = c ? 1 : 0, this.setTeam = function(e) {
            if (!t.waitTimers && t.mode.convTeam) e.team = t.mode.convTeam;
            else if (t.mode.startTeam) e.team = t.mode.startTeam;
            else if (t.mode.friendly) e.team = 1;
            else if (t.mode.clanWar) e.team = e.account && e.account.clan ? e.account.clan : 1;
            else if (!e.team && t.mode.teams) {
                for (var n = 0, i = 0, r = 0; r < this.list.length; ++r) 1 == this.list[r].team && n++, 2 == this.list[r].team && i++;
                e.team = n >= i ? 2 : 1
            }
        }, this.update = function(n) {
            e && (h = e.camera.getWorldPosition());
            for (var i = 0; i < this.list.length; ++i)
                if ((l = this.list[i]).active && (l.update(t, n), c && (this.tickPlayer(l, n), this.storeState(l), l.y <= s.deathY && this.kill(l)), e && (this.updateMesh(l), l.isYou || this.updateHeight(l)), !l.isYou && l.objInstances)) {
                    var r = document.getElementById("pInfo" + l.sid);
                    if (r)
                        if (l.notObstructed || sploit.toggle.esp) {
                            var a = l.objInstances.position.clone();
                            a.y += s.playerHeight + s.nameOffset - l.crouchVal * s.crouchDst, l.hatIndex >= 0 && (a.y += s.nameOffsetHat);
                            var u = Math.max(.3, 1 - o.getDistance3D(h.x, h.y, h.z, a.x, a.y, a.z) / 600),
                                p = 20 * u,
                                d = p >= 1 && e.frustum.containsPoint(a);
                            if (r.style.display = d ? "block" : "none", d) {
                                a.project(e.camera), a.x = (a.x + 1) / 2, a.y = (a.y + 1) / 2;
                                var f = 14 * u,
                                    m = 22 * u;
                                r.style.left = 100 * a.x + "%", r.style.marginLeft = -r.offsetWidth / 2 + "px", r.style.top = 100 * (1 - a.y) + "%", r.style.marginTop = -(f + m + (l.level ? 32 * u : p) / 2) + "px", (r = document.getElementById("pInfoH" + l.sid)) && (r.style.fontSize = p + "px"), (r = document.getElementById("pInfoHB" + l.sid)) && (r.style.width = 120 * u + "px", r.style.height = f + "px", r.style.marginTop = m + "px"), l.level && (r = document.getElementById("pInfoR" + l.sid)) && (r.style.fontSize = 32 * u + "px", r.style.marginRight = 10 * u + "px")
                            }
                        } else r.style.display = "none"
                }
        }, this.playerCollisions = function(e) {
            if (c && t.mode.convTeam && !t.waitTimers)
                for (var n = 0; n < this.list.length; ++n)
                    if (e.active && this.list[n].active && e.team == t.mode.convTeam && e.team != this.list[n].team) {
                        var i = s.playerHeight / 2;
                        o.getDistance3D(e.x, e.y + i, e.z, this.list[n].x, this.list[n].y + i, this.list[n].z) <= 2.4 * i && (c.broadcast("game" + t.sid, "ac", e.sid, this.list[n].sid, t.mode.convWord), this.score(e, 100), e.convs++, t.updateTeam(this.list[n], e.team), t.mode.killConv && this.kill(this.list[n], null, null, !0), t.gameTimer += 1e4)
                    }
        }, this.activeCount = function() {
            for (var t = 0, e = 0; e < this.list.length; ++e) this.list[e].active && t++;
            return t
        }, this.forcePos = function() {
            for (var t = 0; t < this.list.length; ++t) this.list[t].forcePos = !0, this.list[t].objInstances && (this.list[t].objInstances.visible = !1, this.list[t].notObstructed = !1)
        }, this.saveSpin = function(t, e) {
            c && (t.spins.unshift(e), t.spins.length > s.spinTimer / s.serverTickRate && (t.spins.length = Math.round(s.spinTimer / s.serverTickRate)))
        }, this.getSpin = function(t) {
            for (var e = 0, n = 0; n < t.spins.length; ++n) e += t.spins[n];
            return Math.abs(e * (180 / Math.PI))
        }, this.storeState = function(e) {
            e.stateHistory.unshift({
                time: t.now,
                x: e.x,
                y: e.y,
                z: e.z
            });
            for (var n = e.stateHistory.length - 1; n >= 0; --n) t.now - e.stateHistory[n].time >= s.stateHistory && e.stateHistory.splice(n, 1)
        }, this.fetchState = function(e, n) {
            for (var i = t.now - (n + s.serverSendRate * s.interpolation), r = 0; r < e.stateHistory.length; ++r)
                if (e.stateHistory[r].time <= i) return e.stateHistory[r];
            return e.stateHistory[e.stateHistory.length - 1]
        }, this.updateMesh = function(t) {
            if (t.objInstances) {
                var n = (1 - (1 - s.aimAnimMlt) * (1 - t.aimVal)) * s.animMult * e.weaponLean,
                    i = 1 - .1 * (1 - t.aimVal),
                    r = 1 - .3 * (1 - t.aimVal),
                    a = Math.sin(t.stepVal) * s.stepAnim,
                    o = Math.cos(2 * t.stepVal) / 2 * s.stepAnim,
                    c = -Math.sin(t.stepChase) * s.stepAnim,
                    l = -Math.cos(2 * t.stepChase) / 2 * s.stepAnim,
                    h = 1 - t.aimVal,
                    u = .35 * (h <= .5 ? h : .5 - (h - .5)),
                    p = t.swapTime / t.weapon.swapTime,
                    d = t.weapon.xOff,
                    f = 0;
                t.reloadTimer > 0 && (f = (f = 1 - t.reloadTimer / t.weapon.reload) > .5 ? .5 - (f - .5) : f), e.moveMesh(t.objInstances, t.x, t.y + (t.isYou ? 0 : Math.abs(3.5 * a)), t.z), e.rotateMesh(t.objInstances, t.xDir + (t.isYou ? 0 : 2 * -a)), o -= o * (t.crouchVal * s.crouchAnimMlt), a -= a * (t.crouchVal * s.crouchAnimMlt);
                for (var m = 0; m < t.legMeshes.length; ++m) t.legMeshes[m].rotation.x = a * (1 == m || 3 == m ? 1 : -1) * 7 + (m > 1 ? -.6 : 0);
                for (m = 0; m < t.armMeshes.length; ++m) t.armMeshes[m].position.z = a * (m ? -1 : 1) * 12;
                e.rotateMesh(t.upperBody, -1 * f, -2.8 * f + t.yDir * (t.isYou ? 1 : .5) + (-Math.PI / 4 * p + .6 * t.landAnim + t.recoilAnimY * s.recoilMlt - t.bobAnimY * n)), e.moveMesh(t.upperBody, 0, t.height - s.cameraHeight - s.legHeight, 0), e.rotateMesh(t.weaponMeshes[t.weaponIndex], (t.leanAnimX * (t.weapon.leanMlt || 0) + .4 * c + .2 * t.leanAnimZ) * n, (t.recoilAnim * ((t.weapon.recoilY || 0) * i) + 2 * t.leanAnimY - .5 * l) * n, u + t.leanAnimZ * r + .5 * c * n), e.moveMesh(t.weaponMeshes[t.weaponIndex], (1.2 * t.leanAnimZ + a) * t.aimVal * n + d - (d - t.weapon.xOrg) * h, (o + t.bobAnimY) * n + t.weapon.yOff - (t.weapon.yOff - t.weapon.yOrg) * h, t.weapon.zOff - (t.weapon.zOff - t.weapon.zOrg) * h + t.bobAnimZ * n + t.recoilAnim * (t.weapon.recoilZ || 0) * i)
            }
        }, this.updateHeight = function(t) {
            var n = s.crouchDst * t.crouchVal;
            if (e && !t.isYou) {
                var i = s.crouchLean * t.crouchVal;
                e.rotateMesh(t.lowerBody, 0, i + .5 * t.yDir, 0), t.upperBody.rotation.x -= i, e.moveMesh(t.lowerBody, 0, s.legHeight - n, 0);
                for (var r = 0; r < 4; ++r) t.legMeshes[r].visible = r <= 1 ? !t.crouchVal : !!t.crouchVal
            } else t.height = s.playerHeight - n
        }, this.generateMeshes = function(n, r) {
            var o = t.classes[n.classIndex].colors;
            if (n.objInstances = e.genObj3D(n.x, n.y, n.z), n.lowerBody = e.genObj3D(0, s.legHeight, 0), r || n.lowerBody.add(e.genBody(o[1], o[2], o[4], o[0])), n.upperBody = e.genObj3D(0, 0, 0), n.lowerBody.add(n.upperBody), n.backIndex >= 0 && !r && (n.backMesh = e.genObj3D(0, (s.playerHeight - s.legHeight - s.headScale) / 2 - (t.store.skins[n.backIndex].sitOff || 0), -(t.store.skins[n.backIndex].sitOffZ || 0)), n.lowerBody.add(n.backMesh), e.loadMesh({
                    src: "body/body_" + t.store.skins[n.backIndex].id,
                    glowText: t.store.skins[n.backIndex].glow,
                    emissive: t.store.skins[n.backIndex].glow ? 16777215 : null,
                    noGreen: !0
                }, 0, 0, 0, Math.PI / 2, 2.1 * (t.store.skins[n.backIndex].sclMlt || 1), n.backMesh)), n.hatIndex >= 0 && !r && (n.hatMesh = e.genObj3D(0, s.playerHeight - s.legHeight - (t.store.skins[n.hatIndex].sitOff || 0), -(t.store.skins[n.hatIndex].sitOffZ || 0)), n.lowerBody.add(n.hatMesh), e.loadMesh({
                    src: "hats/hat_" + t.store.skins[n.hatIndex].id,
                    texSrc: t.store.skins[n.hatIndex].tex ? "hats/hat_" + t.store.skins[n.hatIndex].id + "_" + t.store.skins[n.hatIndex].tex : null,
                    glowText: t.store.skins[n.hatIndex].glow,
                    emissive: t.store.skins[n.hatIndex].glow ? 16777215 : null,
                    noGreen: !0
                }, 0, 0, 0, Math.PI / 2, 2.1 * (t.store.skins[n.hatIndex].sclMlt || 1), n.hatMesh)), !r)
                for (var c = 0; c < 4; ++c) n.legMeshes.push(e.genLeg(1 == c || 3 == c, o[2], o[3], c > 1)), c >= 2 && e.rotateMesh(n.legMeshes[c], 2 == c ? -Math.PI / 6 : Math.PI / 8, 0, 0), n.legMeshes[c].visible = c <= 1, n.objInstances.add(n.legMeshes[c]);
            for (c = 0; c < n.ammos.length; ++c) {
                var l = e.genObj3D(0, 0, 0),
                    h = t.weapons[n.loadout[c]];
                if (r && h.ammo && (l.muzzle = new i.Sprite, l.muzzle.visible = !1, l.muzzle.static = !0, a.particles.push(l.muzzle), l.add(l.muzzle), l.casing = e.genObj3D(0, h.caseYOff || 0, h.caseZOff || 0), l.add(l.casing), l.muzzleFlash = e.genObj3D(0, .4, 0), l.muzzle.add(l.muzzleFlash)), h.src || !r) l.add(e.genArms(h, o[1], o[5], o[0], null, r));
                else
                    for (var u = 0; u < 2; ++u) {
                        var p = e.genArms(h, o[1], o[5], o[0], u + 1, r);
                        l.add(p), n.armMeshes.push(p)
                    }
                if (n.weaponMeshes.push(l), n.weaponMeshes[c].visible = !1, n.upperBody.add(n.weaponMeshes[c]), h.src) {
                    var d = n.skins[c] >= 0 && t.store.skins[n.skins[c]].glow;
                    e.loadMesh({
                        src: "weapons/" + h.src,
                        texSrc: n.skins[c] >= 0 ? "weapons/skins/" + h.src + "_" + t.store.skins[n.skins[c]].id : null,
                        glowText: d,
                        noGreen: !0,
                        uv2: !0,
                        ao: r,
                        shininess: 40,
                        emissive: h.transp || d ? 16777215 : null
                    }, 0, 0, 0, Math.PI / 2, h.scale, n.weaponMeshes[c])
                }
            }
            n.objInstances.add(n.lowerBody), e.add(n.objInstances)
        }, this.hideAll = function() {
            for (var t = 0; t < this.list.length; ++t) this.list[t].active && this.list[t].objInstances && (this.list[t].forcePos = !this.list[t].latestData, this.list[t].latestData = !1, this.list[t].isYou || (this.list[t].objInstances.visible = !1))
        }, this.clear = function() {
            if (e)
                for (var t = 0; t < this.list.length; ++t) this.disposeMesh(this.list[t]);
            this.list.length = 0
        }, this.toggleLOD = function(t, e) {
            t.objInstances && (t.objInstances.visible = e), t.lodActive = !e
        }, this.disposeMesh = function(t) {
            e.remove(t.objInstances), t.objInstances = null, t.hatMesh = null, t.backMesh = null, t.weaponMeshes.length = 0, t.armMeshes.length = 0, t.legMeshes.length = 0;
            var n = document.getElementById("pInfo" + t.sid);
            n && n.parentNode.removeChild(n)
        }, this.add = function(n, i, r, a, l, h, u, p, d, f, m) {
            for (var g, v = 0; v < this.list.length; ++v)
                if (this.list[v].id == n) {
                    g = this.list[v];
                    break
                } return g || ((g = new function(t, e, n, i) {
                var r;
                this.id = t, this.sentTo = [], this.inputs = [], this.spins = [], this.stateHistory = [], this.weaponMeshes = [], this.legMeshes = [], this.armMeshes = [], this.lastInput = [], this.reloads = [], this.ammos = [], this.ping = 0, this.pings = [], this.score = 0, this.scoreObjs = {}, this.convs = 0, this.timer = null, this.gameTimer = null, this.kills = 0, this.deaths = 0, this.level = 0, this.deltaAdd = 0, this.deltaDiv = 1, this.sprayIndex = 0, this.hatIndex = -1, this.backIndex = -1, this.lastSpray = 0, this.playTime = 0, this.init = function(t, e, n, r, a) {
                    this.x = t, this.y = e, this.z = n, this.stepSrc = null, this.name = r || "unknown", this.xVel = 0, this.yVel = 0, this.zVel = 0, this.renderMinimal = !1, this.spins.length = 0, this.xDir = 0, this.yDir = 0, this.hitTimer = 0, this.ticker = 0, this.spread = 0, this.spreadPlus = 0, this.aimVal = 1, this.aimDir = 0, this.aimTime = 0, this.streak = 0, this.lastKill = 0, this.stateHistory.length = 0, this.lastInput.length = 0, this.dmgReceived = {}, this.landAnim = 0, this.landVelocity = 0, this.leanAnimX = 0, this.leanAnimY = 0, this.leanAnimZ = 0, this.bobAnimZ = 0, this.bobAnimY = 0, this.stepVal = 0, this.stepChase = 0, this.stepDir = 1, this.stepDirR = 1, this.reward = 0, this.recoilAnim = 0, this.recoilAnimY = 0, this.recoilForce = 0, this.crouchVal = 0, this.onGround = !0, this.onLadder = !1, this.rampFix = null, this.didJump = !1, this.didShoot = !1, this.lodActive = !1, this.locked = !1, this.latestData = !1, this.airTime = 0, this.height = i.playerHeight, this.headScale = i.cameraHeight, this.scale = i.playerScale, this.active = !0, this.interpolate = !1, this.isYou = a, this.sentTo.length = 0, this.inputSN = 0, this.weaponIndex = 0, this.swapTime = 0, this.recon = !1, this.notObstructed = !1
                }, this.setClass = function(t, e, n) {
                    n || (t.config && t.config.classes.indexOf(e) < 0 && (e = t.config.classes[0]), t.mode && (t.mode.noWeap && (e = 8), t.mode.teamClass && t.mode.teamClass[this.team] && (e = t.mode.teamClass[this.team]))), this.classIndex = e, this.reloads.length = 0, this.ammos.length = 0, this.loadout = t.classes[e].loadout, this.speed = t.classes[e].speed || 1;
                    for (var i = 0; i < this.loadout.length; ++i) this.reloads.push(0), this.ammos.push(t.weapons[this.loadout[i]].ammo);
                    this.reloadTimer = 0, this.maxHealth = t.classes[e].health * (t.config && t.config.healthMlt || 1), this.health = this.maxHealth
                }, this.resetInputs = function() {
                    this.inputs.length = 0
                }, this.processInput = function(t, a, o) {
                    this.recon = o;
                    var s = Math.min(t[1], i.dltMx) / this.deltaDiv;
                    this.inputSN = t[0];
                    var c = n.getAngleDist(t[2], this.xDir);
                    e.saveSpin(this, c);
                    var l = !o && this.isYou;
                    if (l && (this.leanAnimX -= c * i.leanSens, this.leanAnimX = n.limit(this.leanAnimX, i.leanMax), this.leanAnimY -= n.getAngleDist(t[3], this.yDir) * i.leanSens, this.leanAnimY = n.limit(this.leanAnimY, i.leanMax), this.leanAnimX && (this.leanAnimX *= Math.pow(i.leanPull, s)), this.leanAnimY && (this.leanAnimY *= Math.pow(i.leanPull, s)), this.leanAnimZ && (this.leanAnimZ *= Math.pow(i.leanPullZ, s)), this.bobAnimZ && (this.bobAnimZ *= Math.pow(i.bobPullZ, s)), this.bobAnimY && (this.bobAnimY *= Math.pow(i.bobPullY, s)), this.landAnim += .08 * this.landVelocity * s, this.landVelocity ? (this.landVelocity *= Math.pow(i.landPullV, s), this.landVelocity = n.cropVal(this.landVelocity, .01)) : this.landAnim && (this.landAnim *= Math.pow(i.landPull, s))), t[10] && e.swapWeapon(this, t[10]), o || (this.recoilForce && (this.recoilAnim += this.recoilForce * s, this.recoilAnimY += this.recoilForce * s, this.recoilForce *= Math.pow(this.weapon.recoverF, s)), this.recoilAnim && (this.recoilAnim *= Math.pow(this.weapon.recover, s)), this.recoilAnimY && (this.recoilAnimY *= Math.pow(this.weapon.recoverY || this.weapon.recover, s))), this.xDir = (t[2] || 0).round(3), this.yDir = (t[3] || 0).round(3), this.oldX = this.x, this.oldY = this.y, this.oldZ = this.z, this.weapon.zoom) {
                        var h = this.reloadTimer <= 0 && this.swapTime <= 0;
                        t[6] && this.aimVal > 0 && h ? (this.aimDir = 0, this.aimVal -= 1 / (this.weapon.aimSpeed / s), this.aimVal <= 0 && (this.aimVal = 0, this.isYou && !o && e.toggleAim(this, 1)), !this.isYou || o || this.weapon.scope || e.updateAim(this, 1 - this.aimVal)) : (!h || !t[6] && this.aimVal < 1) && (this.aimDir = 1, this.aimVal || !this.isYou || o || e.toggleAim(this, 0), this.aimVal += 1 / (this.weapon.aimSpeed / s), this.aimVal >= 1 && (this.aimVal = 1), !this.isYou || o || this.weapon.scope || e.updateAim(this, 1 - this.aimVal)), 0 == this.aimVal ? this.aimTime += s : this.aimTime = 0
                    }
                    t[8] && this.crouchVal < 1 && !this.onLadder ? (this.crouchVal += i.crouchSpeed * s, this.crouchVal >= 1 && (this.crouchVal = 1), this.onGround ? l && (this.bobAnimY -= i.crouchAnim * s) : this.y += i.crouchSpeed * s) : !t[8] && this.crouchVal > 0 && (this.crouchVal -= i.crouchSpeed * s, this.crouchVal <= 0 && (this.crouchVal = 0), this.onGround ? l && (this.bobAnimY += i.crouchAnim * s) : this.y -= i.crouchSpeed * s), this.crouchVal && (this.crouchVal = this.crouchVal.round(3)), e.updateHeight(this);
                    var u = this.onGround || this.onLadder,
                        p = s * (u ? i.playerSpeed * this.speed : i.airSpeed) * (this.aimVal ? 1 : i.aimSlow) * (a.mode.spdMlt && a.mode.spdMlt[this.team] || 1) * (this.crouchVal ? i.crouchSlow : 1) * this.weapon.spdMlt,
                        d = this.onLadder ? i.ladderDecel : this.onGround ? i.groundDecel : i.airDecel;
                    a.lockMove && (p *= 0), this.onGround && e.tryJump(this, t[7]), u || (this.yVel -= s * (i.gravity * (a.config ? a.config.gravMlt : 1)));
                    var f = i.movDirs[t[4]];
                    f != Math.PI && 0 != f && f != Math.PI / 2 && f != -Math.PI / 2 && (p *= a.config ? a.config.strafeSpd : 1), void 0 !== f && (this.xVel += p * Math.cos(f - this.xDir), this.zVel += p * Math.sin(f - this.xDir)), this.xVel && (this.x += this.xVel * s, this.xVel *= Math.pow(d, s), this.xVel = n.cropVal(this.xVel, i.decelMin)), this.yVel && (this.y += this.yVel * s, this.yVel *= Math.pow(d, s), this.yVel = n.cropVal(this.yVel, i.decelMin)), this.zVel && (this.z += this.zVel * s, this.zVel *= Math.pow(d, s), this.zVel = n.cropVal(this.zVel, i.decelMin));
                    var m = this.onGround && !this.didJump,
                        g = !1;
                    this.onGround = !1, this.onLadder = !1;
                    for (var v = 0; v < a.map.manager.objects.length; ++v)
                        if (r = a.map.manager.objects[v], this.collides(r))
                            if (r.score) this.scoreObjs[r.sid] || (this.scoreObjs[r.sid] = 1, e.score(this, 1));
                            else if (r.kill) e.hasServer && e.kill(this);
                    else if (r.ladder) {
                        if (this.y < r.y + r.height && 0 == this.crouchVal && (this.yVel = 0, this.onLadder = !0, this.stepSrc = null, void 0 !== f)) {
                            var y = (Math.abs(n.getAngleDist(r.dir, f - this.xDir)) - Math.PI / 2) / (Math.PI / 2);
                            y > 0 && (this.y += i.ladderSpeed * this.weapon.spdMlt * s * y, this.y <= r.y - r.height ? this.y = r.y - r.height : this.y >= r.y + r.height && (this.y = r.y + r.height))
                        }
                    } else if (r.ramp) {
                        if (this.y < r.y + r.height) {
                            var x = Math.max(0, Math.min(1, n.progressOnLine(r.ramp.sX, r.ramp.sZ, r.ramp.eX, r.ramp.eZ, this.x + this.scale * Math.cos(r.dir), this.z + this.scale * Math.sin(r.dir)))),
                                w = r.y - r.height + 2 * r.height * x;
                            if (this.y <= w || m)
                                if (r.boost) {
                                    this.y = w;
                                    var b = i.boosterSpd * s;
                                    this.xVel += b * Math.sin(-r.dir + Math.PI / 2) * Math.cos(r.boost), this.zVel += b * Math.cos(-r.dir + Math.PI / 2) * Math.cos(r.boost), this.yVel += b * Math.sin(r.boost)
                                } else !o && this.oldY > this.y && e.resetStep(this), this.y = w, this.yVel = 0, this.onGround = !0, g = !0, this.rampFix = r.y - r.height + 2 * r.height * Math.round(x)
                        }
                    } else this.y < r.y + r.height && r.y + r.height - this.y <= i.climbHeight && this.oldY < r.y + r.height && m ? (this.y += .3 * (r.y + r.height - this.y), this.onGround = !0) : this.oldY >= r.y + r.height ? (this.stepSrc = r.stepSrc, !o && this.oldY > this.y && e.resetStep(this), this.y = r.y + r.height, this.yVel = 0, this.onGround = !0) : this.oldX - this.scale >= r.x + r.width - 1e-5 ? (this.x = r.x + r.width + this.scale, this.xVel = 0) : this.oldX + this.scale <= r.x - r.width + 1e-5 ? (this.x = r.x - r.width - this.scale, this.xVel = 0) : this.oldZ - this.scale >= r.z + r.length - 1e-5 ? (this.z = r.z + r.length + this.scale, this.zVel = 0) : this.oldZ + this.scale <= r.z - r.length + 1e-5 ? (this.z = r.z - r.length - this.scale, this.zVel = 0) : this.oldY + this.height <= r.y - r.height && (this.y = r.y - r.height - this.height, this.yVel = 0);
                    if (!this.didJump && null != this.rampFix && Math.abs(this.y - this.rampFix) <= i.climbHeight ? g || (this.y = this.rampFix, this.onGround = !0, this.yVel = 0, this.rampFix = null) : this.rampFix = null, this.onGround ? this.airTime = 0 : this.airTime += s, !o) {
                        var M = n.getDistance3D(this.oldX, this.oldY, this.oldZ, this.x, this.y, this.z);
                        if (this.isYou && (this.onLadder && (M *= 1.4), n.getDirection(this.oldX, this.oldZ, this.x, this.z), this.bobAnimZ += n.getDistance(this.oldX, this.oldZ, this.x, this.z) * i.bobMltZ, this.bobAnimY -= (this.oldY - this.y) * i.bobMltY, u && void 0 !== f ? (e.playerStep(this, M), this.leanAnimZ -= M * i.leanMltZ * Math.cos(f)) : this.stepVal *= Math.pow(i.stepPull, s), this.stepChase != this.stepVal && (this.stepChase += .2 * (this.stepVal - this.stepChase))), this.spreadPlus += M * i.spreadMove + Math.abs(this.oldY - this.y) * i.spreadFall, this.spreadPlus *= Math.pow(i.spreadRecover, s), this.spread = Math.max(this.weapon.minSpread || 0, (this.weapon.spread - this.weapon.spread * i.crouchSpread * this.crouchVal + this.recoilAnim * i.spreadMlt + this.spreadPlus) * this.aimVal), t[9] && e.reload(this), this.reloadTimer > 0) {
                            var _ = this.reloadTimer;
                            this.reloadTimer -= s, this.isYou && _ >= this.weapon.reload / 2 && this.reloadTimer < this.weapon.reload / 2 && e.endReload(this.weapon), this.reloadTimer <= 0 && (this.reloadTimer = 0, this.didShoot = !1, this.ammos[this.weaponIndex] = this.weapon.ammo, e.updatePlayerAmmo(this))
                        }
                        for (this.swapTime > 0 && (this.swapTime -= s, this.swapTime < 0 && (this.swapTime = 0)), v = 0; v < this.reloads.length; ++v) this.reloads[v] > 0 && (this.reloads[v] -= s, this.reloads[v] < 0 && (this.reloads[v] = 0));
                        if (this.weapon && !this.weapon.melee) {
                            var S = !this.weapon.nAuto && t[5];
                            this.didShoot && !t[5] && (this.didShoot = !1), !this.didShoot && t[5] && (S = !0), S && this.reloads[this.weaponIndex] <= 0 && this.swapTime <= 0 && this.reloadTimer <= 0 && (this.ammos[this.weaponIndex] > 0 ? e.shoot(this) : e.reload(this))
                        }
                    }
                    e.playerCollisions(this)
                }, this.collides = function(t) {
                    return this.x - this.scale < t.x + t.width && this.x + this.scale > t.x - t.width && this.z - this.scale < t.z + t.length && this.z + this.scale > t.z - t.length && this.y <= t.y + t.height && this.y + this.height >= t.y - t.height
                }, this.update = function(t, r) {
                    if (this.active) {
                        if (this.inputs.length) {
                            for (var a = 0; a < this.inputs.length; ++a) this.processInput(this.inputs[a], t);
                            this.resetInputs()
                        }
                        if (this.interpolate) {
                            this.dt += r;
                            var o = Math.min(1.6, this.dt / (i.serverSendRate * i.interpolation));
                            o /= t.config ? t.config.deltaMlt : 1, this.oldX = this.x, this.oldY = this.y, this.oldZ = this.z, this.x = this.x1 + (this.x2 - this.x1) * o, this.y = this.y1 + (this.y2 - this.y1) * o, this.z = this.z1 + (this.z2 - this.z1) * o, this.onGround && e.playerStep(this, n.getDistance(this.oldX, this.oldZ, this.x, this.z)), this.xDir = Math.lerpAngle(this.xDir2, this.xDir1, Math.min(1, o)), this.yDir = Math.lerpAngle(this.yDir2, this.yDir1, Math.min(1, o))
                        }
                    }
                }
            }(n, this, o, s)).sid = i || o.generateSID(this.list), this.list.push(g)), h || (h = "Guest_" + g.sid), g.init(r, a, l, h, m), c && void 0 != t.mode && this.setTeam(g), g.skins = p || [-1, -1], g.hatIndex = d, g.backIndex = f, g.setClass(t, u), e && this.generateMeshes(g, m), this.swapWeapon(g, 0, !0), g
        }, this.remove = function(e) {
            var n = this.indexBySid(e);
            if (n >= 0) {
                this.list[n].room;
                var i = this.list[n].id;
                if (this.list[n].objInstances && this.disposeMesh(this.list[n]), this.list.splice(n, 1), c) {
                    for (var r = this.list.length - 1; r >= 0; --r)(n = this.list[r].sentTo.indexOf(i)) >= 0 && this.list[r].sentTo.splice(n, 1);
                    c.broadcast("game" + t.sid, "2", e), this.syncLeaders()
                }
            }
        };
        var d = [0, 1, 2];
        this.getStepSound = function() {
            var t = o.randInt(0, d.length - 1),
                e = d[t];
            return d.splice(t, 1), d.length <= 0 && d.push(0, 1, 2), e
        }, this.playerStep = function(e, n) {
            if (n && (!e.isYou && e.crouchVal && (n *= 1.6), e.stepVal += n * s.stepMlt * e.stepDir, e.stepVal >= Math.PI / 2 && 1 == e.stepDir || e.stepVal <= -Math.PI / 2 && -1 == e.stepDir)) {
                if (r) {
                    var i = .15 * (e.crouchVal < 1 ? 1 : e.isYou ? .5 : 0),
                        a = (e.crouchVal < 1 ? 1 : .8) * o.randFloat(.8, 1.2),
                        c = e.stepSrc ? "_" + e.stepSrc : "";
                    e.isYou ? r.play("step_" + this.getStepSound() + c, i, !1, a) : i && t.playerSound("step_" + o.randInt(0, 2) + c, 0, i, e, a, 10)
                }
                e.stepDir *= -1
            }
        }, this.resetStep = function(t) {
            r && (t.stepSrc && t.stepSrc, r.play("step_" + this.getStepSound(), .5, !1, o.randFloat(.9, 1.2)), t.isYou && (t.landVelocity += t.yVel))
        }, this.tryJump = function(e, n) {
            t.config && t.config.autoJump && n ? this.jump(e) : (e.didJump && !n && (e.didJump = !1), !e.didJump && n && this.jump(e))
        }, this.jump = function(e) {
            e.didJump = !0;
            var n = s.jumpVel * (t.config ? t.config.jumpMlt : 1),
                i = s.jumpPush * (t.config ? t.config.jumpMlt : 1);
            e.yVel += (n - n * (s.crouchJump * e.crouchVal)) * e.weapon.spdMlt * (e.aimVal ? 1 : s.aimJumpSlow);
            var a = o.getDistance(0, 0, e.xVel, e.zVel);
            e.xVel -= i * a * Math.sin(e.xDir), e.zVel -= i * a * Math.cos(e.xDir), r && !e.recon && r.play("jump_" + o.randInt(0, 1), .1, !1, o.randFloat(.9, 1))
        }, this.updateAim = function(t, n) {
            e.zoom(1 + (t.weapon.zoom - 1) * n)
        }, this.toggleAim = function(n, i) {
            r && !n.recon && r.play("aim_" + i, .1), i || (e.zoom(1), aimRecticle.style.opacity = 0), n.weapon.scope && (e.zoom(i ? n.weapon.zoom : 1), n.weaponMeshes[n.weaponIndex].visible = !t.hideWeapon && !i, aimRecticle.style.opacity = i ? 1 : 0)
        }, this.reload = function(t) {
            !t.reloadTimer && t.ammos[t.weaponIndex] < t.weapon.ammo && (r && r.play("reload_1", .25), t.reloadTimer = t.weapon.reload)
        }, this.endReload = function(t) {
            r && r.play("reload_2" + (t.custReload || ""), .25)
        }, this.updatePlayerAmmo = function(t) {
            t.isYou && (ammoDisplay.style.display = t.weapon.melee ? "none" : "block", t.weapon.melee ? reloadMsg.style.display = "none" : (ammoVal.innerHTML = t.ammos[t.weaponIndex] + " <span id='ammoMax'> | " + t.weapon.ammo + "</span>", t.ammos[t.weaponIndex] <= 0 ? (reloadMsg.innerHTML = "[R] Reload", reloadMsg.style.display = "block") : reloadMsg.style.display = "none"))
        };
        var f = [];
        this.shoot = function(n) {
            if (n.reloads[n.weaponIndex] = n.weapon.rate, n.ammos[n.weaponIndex]--, n.didShoot = !0, this.updatePlayerAmmo(n), t.playSound && t.playSound(n.weapon.sound, .85, n, !1, o.randFloat(.9, 1)), n.recoilForce += n.weapon.recoil * (1 - .3 * n.crouchVal), n.isYou) {
                var i = o.randInt(0, 1) ? -n.weapon.recoilR : n.weapon.recoilR;
                n.leanAnimZ += i, n.leanAnimX += i
            }
            if (n.isYou && !t.hideWeapon) {
                var l = n.weaponMeshes[n.weaponIndex],
                    u = 0 == n.aimVal && n.weapon.scope;
                if (0 != e.useDepthMap && "0" != e.useDepthMap || (l.muzzle.visible = !0, a.setMaterial(l.muzzle, 2, 1, !0), l.muzzle.init(0, n.weapon.muzOffY || 0, -n.weapon.muzOff, 0, 0, 0, 4 * (n.weapon.muzMlt || 1), 1), u || ((p = n.weaponMeshes[n.weaponIndex].muzzle.getWorldPosition().clone()).project(e.camera), p.x = (p.x + 1) / 2, p.y = (p.y + 1) / 2, e.flash(p.x, p.y))), !n.weapon.nCase) {
                    var p = n.weaponMeshes[n.weaponIndex].casing.getWorldPosition();
                    r && r.play3D("case_" + o.randInt(0, 1), p.x, p.y, p.z, .4, o.randFloat(.8, 1.3)), u || a.physObj(p.x, p.y, p.z, n.xDir - Math.PI / 2, Math.PI / 5 * o.randFloat(.8, 1.2), 25, n.weapon.caseInd || 1, n)
                }
            }
            if (void 0 != n.weapon.projectile) {
                if (c) {
                    var d = (n.spread + (n.weapon.innac || 0)) * s.spreadAdj,
                        m = n.xDir + o.randFloat(-d, d),
                        g = n.yDir + n.recoilAnimY * s.recoilMlt + o.randFloat(-d, d);
                    t.projectiles.init(n.x, n.y + n.height - s.cameraHeight, n.z, m, g, n.weapon.projectile, n)
                }
            } else
                for (var v = 0; v < (n.weapon.shots || 1); ++v) {
                    d = (n.spread + (n.weapon.innac || 0)) * s.spreadAdj, m = n.xDir + o.randFloat(-d, d), g = n.yDir + n.recoilAnimY * s.recoilMlt + o.randFloat(-d, d), f.length = 0;
                    for (var y = 0, x = 1 / (n.weapon.range * Math.sin(m + Math.PI) * Math.cos(g)), w = 1 / (n.weapon.range * Math.cos(m + Math.PI) * Math.cos(g)), b = 1 / (n.weapon.range * Math.sin(g)), M = 0; M < t.map.manager.objects.length; ++M)(h = t.map.manager.objects[M]).noShoot || (y = o.lineInRect(n.x, n.z, n.y + n.height - s.cameraHeight, x, w, b, h.x - h.width, h.z - h.length, h.y - h.height, h.x + h.width, h.z + h.length, h.y + h.height)) && y <= 1 && f.push({
                        obj: h,
                        dst: y
                    });
                    if (c)
                        for (M = 0; M < this.list.length; ++M) !this.list[M].active || n == this.list[M] || n.team && n.team == this.list[M].team || (h = this.fetchState(this.list[M], n.ping)) && (y = o.lineInRect(n.x, n.z, n.y + n.height - s.cameraHeight, x, w, b, h.x - this.list[M].scale - s.hitBoxPad, h.z - this.list[M].scale - s.hitBoxPad, h.y, h.x + this.list[M].scale + s.hitBoxPad, h.z + this.list[M].scale + s.hitBoxPad, h.y + this.list[M].height + s.hitBoxPad)) && y <= 1 && f.push({
                            player: !0,
                            obj: this.list[M],
                            dst: y
                        });
                    var _ = n.weapon.range;
                    if (f.length) {
                        f.sort(o.orderByDst);
                        var S = n.weapon.dmg;
                        for (M = 0; M < f.length && (h = f[M], _ = n.weapon.range * h.dst, c); ++M) {
                            var E = n.weapon.dropStart || 0,
                                T = Math.min(1, 1 - (1 - h.dst) * n.weapon.range / (n.weapon.range - E)),
                                A = S - n.weapon.dmgDrop * T,
                                L = !1,
                                R = !1;
                            if (h.player) {
                                var P = n.y + n.height - s.cameraHeight + _ * Math.sin(g);
                                L = h.obj.y + h.obj.height - P < s.headScale, R = h.obj.y + s.legHeight > P, A *= L && !n.weapon.noHeadShot ? 1.5 : 1, A *= R ? .5 : 1
                            }
                            if (h.player || h.obj.dummy) {
                                if (this.changeHealth(h.obj, n, A)) {
                                    var C = {
                                        dst: h.dst,
                                        headShot: L
                                    };
                                    this.kill(h.obj, n, C)
                                }
                                S -= void 0 != n.weapon.pierce ? n.weapon.dmg * s.materialDens.flesh * n.weapon.pierce : S
                            } else {
                                if (!h.obj.penetrable) break;
                                S -= void 0 != n.weapon.pierce ? n.weapon.dmg * s.materialDens.default * n.weapon.pierce : S
                            }
                            if (S <= 0) break
                        }
                    }
                    _ -= .12;
                    var I = n.x + _ * Math.sin(m + Math.PI) * Math.cos(g),
                        O = (P = n.y + n.height - s.cameraHeight + _ * Math.sin(g), n.z + _ * Math.cos(m + Math.PI) * Math.cos(g)),
                        D = 0,
                        B = 0;
                    if (f.length && (P >= h.obj.y + h.obj.height ? B = Math.PI / 2 : P <= h.obj.y - h.obj.height ? B = -Math.PI / 2 : I <= h.obj.x - h.obj.width ? D = -Math.PI / 2 : I >= h.obj.x + h.obj.width ? D = Math.PI / 2 : O <= h.obj.z - h.obj.length && (D = Math.PI), c || a.effect(I, P, O, D, B, 0)), c && (!f.length || !h.player))
                        for (M = 0; M < this.list.length; ++M) this.list[M].active && this.list[M] != n && (f.length ? c.send(this.list[M].id, "9", n.sid, Math.round(I), Math.round(P), Math.round(O), D.round(1), B.round(1)) : c.send(this.list[M].id, "9", n.sid, Math.round(I), Math.round(P), Math.round(O)));
                    if (n.isYou && _ >= s.tracerMinDst) {
                        var N = (p = n.weaponMeshes[n.weaponIndex].muzzle.getWorldPosition()).x,
                            k = p.y,
                            U = p.z;
                        o.getDistance3D(N, k, U, I, P, O), D = o.getDirection(U, N, O, I), B = o.getDirection(o.getDistance(N, U, I, O), P, 0, k), a.physObj(N, k, U, D, B, Math.min(_, s.tracerMaxDst), 0)
                    }
                }
        }, this.spray = function(e) {
            if (t.now - e.lastSpray >= s.sprayTimer) {
                f.length = 0;
                for (var n = 0, i = 1 / (s.sprayRange * Math.sin(e.xDir + Math.PI) * Math.cos(e.yDir)), r = 1 / (s.sprayRange * Math.cos(e.xDir + Math.PI) * Math.cos(e.yDir)), a = 1 / (s.sprayRange * Math.sin(e.yDir)), l = 0; l < t.map.manager.objects.length; ++l)(h = t.map.manager.objects[l]).noShoot || (n = o.lineInRect(e.x, e.z, e.y + e.height - s.cameraHeight, i, r, a, h.x - h.width, h.z - h.length, h.y - h.height, h.x + h.width, h.z + h.length, h.y + h.height)) && n <= 1 && f.push({
                    obj: h,
                    dst: n
                });
                if (f.length && (f.sort(o.orderByDst), h = f[0].obj)) {
                    var u = s.sprayRange * f[0].dst - .1,
                        p = e.y + e.height - s.cameraHeight + u * Math.sin(e.yDir),
                        d = e.x + u * Math.sin(e.xDir + Math.PI) * Math.cos(e.yDir),
                        m = e.z + u * Math.cos(e.xDir + Math.PI) * Math.cos(e.yDir),
                        g = 0,
                        v = 0;
                    p >= h.y + h.height ? v = -90 : p <= h.y - h.height ? v = 90 : d <= h.x - h.width ? g = -90 : d >= h.x + h.width ? g = 90 : m <= h.z - h.length && (g = 180);
                    var y = s.sprayScale / 2;
                    if (v) {
                        if (h.width < y || h.length < y) return;
                        m - y < h.z - h.length ? m = h.z - h.length + y : m + y > h.z + h.length && (m = h.z + h.length - y), d - y < h.x - h.width ? d = h.x - h.width + y : d + y > h.x + h.width && (d = h.x + h.width - y)
                    } else {
                        if (h.height < y) return;
                        if (90 == g || -90 == g) {
                            if (h.length < y) return;
                            m - y < h.z - h.length ? m = h.z - h.length + y : m + y > h.z + h.length && (m = h.z + h.length - y)
                        } else {
                            if (h.width < y) return;
                            d - y < h.x - h.width ? d = h.x - h.width + y : d + y > h.x + h.width && (d = h.x + h.width - y)
                        }
                        p + y > h.y + h.height && (p = h.y + h.height - y)
                    }
                    e.lastSpray = t.now, t.playSound && t.playSound("spray", .4, e, !0), c.broadcast("game" + t.sid, "sp", e.sid, e.sprayIndex, d.round(2), p.round(2), m.round(2), g, v)
                }
            }
        };
        var m = [];
        this.syncLeaders = function() {
            u = t.mode.killSort ? this.list.slice().sort(o.orderByKills) : this.list.slice().sort(o.orderByScore), m.length = 0;
            for (var e = 0, n = 0; n < u.length; ++n) e < 10 && (e++, m.push(u[n].sid, u[n].name, u[n].team, t.mode.killSort ? u[n].kills : u[n].score, u[n].account ? u[n].account.clan : 0, u[n].account ? u[n].account.featured : 0));
            c.broadcast("game" + t.sid, "7", m)
        }, this.score = function(t, e) {
            c && (t.score += e, c.send(t.id, "5", e), this.syncLeaders())
        }, this.tickPlayer = function(t, e) {
            t.playTime += e, t.hitTimer > 0 && (t.hitTimer -= e), t.ticker -= e, t.ticker <= 0 && (t.ticker = 500, t.hitTimer <= 0 && this.changeHealth(t, null, -t.maxHealth * s.regenVal))
        }, this.changeHealth = function(e, n, i, r) {
            if (!t.waitTimers && !(i < 0 && e.health == e.maxHealth || !r && e.team && n && e.team == n.team && i > 0)) {
                if (n && n != e && c.send(n.id, "4", e.sid, Math.round(i), e.health - i <= 0 ? 1 : 0), e.dummy) return !0;
                i > 0 && (e.hitTimer = t.mode.regenDelay || s.regenDelay), e.health -= i, e.health = Math.max(Math.min(e.maxHealth, e.health), 0), n ? (c.send(e.id, "h", Math.ceil(e.health), null, Math.round(n.x), Math.round(n.z)), n != e && (e.dmgReceived[n.id] ? (e.dmgReceived[n.id].val += i, e.dmgReceived[n.id].time = t.now) : e.dmgReceived[n.id] = {
                    time: t.now,
                    val: i
                })) : c.send(e.id, "h", Math.ceil(e.health));
                for (var a = 0; a < this.list.length; ++a) this.list[a] != e && c.send(this.list[a].id, "h", Math.ceil(e.health), e.sid);
                return e.health <= 0
            }
        }, this.swapWeapon = function(n, i, r, a) {
            if (!(n.ammos.length <= 1 && i || a > n.ammos.length)) {
                var o = n.weaponIndex;
                if (i && (n.reloadTimer = 0, n.weaponIndex += i, n.didShoot = !1, n.weaponIndex < 0 && (n.weaponIndex = n.ammos.length - 1), n.weaponIndex > n.ammos.length - 1 && (n.weaponIndex = 0)), void 0 != a && (n.weaponIndex = a), n.weapon = t.weapons[n.loadout[n.weaponIndex]], e && (o != n.weaponIndex || r)) {
                    for (var s = 0; s < n.weaponMeshes.length; ++s) n.weaponMeshes[s].visible = !1;
                    n.weaponMeshes[n.weaponIndex] && (n.weaponMeshes[n.weaponIndex].visible = !t.hideWeapon || !n.isYou)
                }
                if (void 0 == a && (!e || n.isYou) && (n.swapTime = n.weapon.swapTime, n.isYou && (o != n.weaponIndex || r))) {
                    var c = "";
                    for (s = n.ammos.length - 1; s >= 0; --s) {
                        var l = s == n.weaponIndex;
                        t.weapons[n.loadout[s]].icon && (c += "<div class='weaponItem'><img style='opacity:" + (l ? 1 : .7) + "' class='weaponIcon' src='./textures/weapons/" + t.weapons[n.loadout[s]].icon + ".png' /></div>")
                    }
                    weaponDisplay.innerHTML = c, this.updatePlayerAmmo(n)
                }
            }
        }, this.kill = function(e, n, i, r) {
            var a;
            if (e.dummy || (e.active = !1, e.isYou && this.toggleAim(e, 0), e.objInstances && this.disposeMesh(e)), c && (e.deaths++, t.kills++, n && n != e && (e.dummy || n.kills++, n.streak++, t.now - n.lastKill >= s.feedTimer && (n.streak = 0), n.lastKill = t.now, (a = p.reward(this, n, e, i, t)) && c.send(n.id, "6", a, i.headShot ? 1 : 0, n.kills), this.score(n, p.getScore(a))), !e.dummy))
                for (var o = 0; o < this.list.length; ++o) e.dmgReceived[this.list[o].id] && n != this.list[o] && e.dmgReceived[this.list[o].id].val >= s.assistMin && t.now - e.dmgReceived[this.list[o].id].time <= s.assistTime && (this.score(this.list[o], s.assistScore), c.send(this.list[o].id, "10")), this.list[o] == e ? c.send(e.id, "3", e.sid, n ? n.sid : 0, [n ? n.loadout[n.weaponIndex] : -1, a ? p.getScore(a) : 0], r) : c.send(this.list[o].id, "3", e.sid, n ? n.sid : 0, null, r)
        }, this.indexBySid = function(t) {
            for (var e = 0; e < this.list.length; ++e)
                if (this.list[e].sid == t) return e;
            return -1
        }, this.findBySid = function(t) {
            for (var e = 0; e < this.list.length; ++e)
                if (this.list[e].sid === t) return this.list[e];
            return null
        }
    }
}, function(t, e) {
    t.exports = [{
        name: "Triggerman",
        loadout: [1, 2],
        colors: [10975328, 4013373, 2302755, 2631720, 7098434, 12566463],
        health: 100,
        speed: 1.05
    }, {
        name: "Hunter",
        loadout: [0, 2],
        colors: [10975328, 8083261, 6506290, 2631720, 6506290, 6506290],
        health: 60,
        speed: 1.05
    }, {
        name: "Run N Gun",
        loadout: [3],
        colors: [10975328, 4088706, 3099491, 2631720, 6506290, 3099491],
        health: 100,
        speed: 1.1
    }, {
        name: "Spray N Pray",
        loadout: [6],
        colors: [10975328, 5793865, 4806204, 2631720, 2631720, 4806204],
        health: 150,
        speed: 1
    }, {
        name: "Vince",
        loadout: [5, 2],
        colors: [8412234, 5526119, 4144461, 2631720, 2631720, 4144461],
        health: 100,
        speed: 1
    }, {
        name: "Detective",
        loadout: [4],
        colors: [10975328, 7360054, 6308654, 2631720, 6506290, 6308654],
        health: 100,
        speed: 1
    }, {
        name: "Marksman",
        loadout: [7, 2],
        colors: [10975328, 5793865, 4806204, 2631720, 2631720, 4806204],
        health: 100,
        speed: 1
    }, {
        name: "Rocketeer",
        loadout: [8, 2],
        colors: [10975328, 5793865, 4806204, 2631720, 7098434, 4806204],
        health: 130,
        speed: .86
    }, {
        name: "Runner",
        hide: !0,
        loadout: [9],
        colors: [10975328, 4013373, 2302755, 2631720, 2631720, 2302755],
        health: 100,
        speed: 1
    }]
}, function(t, e) {
    t.exports = [{
        name: "Sniper Rifle",
        src: "weapon_1",
        icon: "icon_1",
        sound: "weapon_1",
        nAuto: !0,
        type: 0,
        scope: !0,
        swapTime: 300,
        aimSpeed: 120,
        spdMlt: .95,
        ammo: 3,
        reload: 1500,
        dmg: 100,
        pierce: .2,
        range: 1e3,
        dropStart: 230,
        dmgDrop: 30,
        scale: 1.1,
        leftHoldY: -.7,
        rightHoldY: -.75,
        leftHoldZ: 2.4,
        rightHoldZ: .4,
        xOff: .8,
        yOff: -.75,
        zOff: -2,
        xOrg: 0,
        yOrg: -.55,
        zOrg: -.8,
        muzOff: 8,
        muzMlt: 1.6,
        rate: 900,
        spread: 260,
        zoom: 2.7,
        leanMlt: 2,
        recoil: .009,
        recoilR: .02,
        recover: .993,
        recoverY: .997,
        recoverF: .975,
        recoilY: 1,
        recoilZ: 1.8
    }, {
        name: "Assault Rifle",
        src: "weapon_2",
        icon: "icon_2",
        sound: "weapon_2",
        transp: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 130,
        spdMlt: .95,
        ammo: 30,
        reload: 1200,
        dmg: 22,
        pierce: 1,
        range: 700,
        dmgDrop: 10,
        scale: 1,
        leftHoldY: -.5,
        rightHoldY: -.7,
        leftHoldZ: 2,
        rightHoldZ: .2,
        xOff: 1.2,
        yOff: -1,
        zOff: -2.5,
        xOrg: 0,
        yOrg: -.55,
        zOrg: -.2,
        caseZOff: -1.7,
        caseYOff: -.2,
        muzOff: 5.9,
        muzOffY: .3,
        muzMlt: 1.4,
        rate: 110,
        spread: 120,
        minSpread: 5,
        zoom: 1.6,
        leanMlt: 1,
        recoil: .003,
        recoilR: .012,
        recover: .978,
        recoverY: .995,
        recoverF: .975,
        recoilY: 1,
        recoilZ: 5
    }, {
        name: "Pistol",
        src: "weapon_3",
        icon: "icon_3",
        sound: "weapon_3",
        transp: !0,
        nAuto: !0,
        kill: ["", 75],
        type: 1,
        swapTime: 350,
        aimSpeed: 120,
        spdMlt: 1.05,
        ammo: 10,
        reload: 700,
        dmg: 20,
        range: 700,
        dmgDrop: 10,
        scale: .95,
        leftHoldY: -.82,
        rightHoldY: -.62,
        leftHoldZ: -.5,
        rightHoldZ: -.5,
        xOff: .7,
        yOff: -.95,
        zOff: -4.5,
        xOrg: 0,
        yOrg: -.2,
        zOrg: -4.25,
        caseZOff: .2,
        caseYOff: 0,
        muzOff: 1.5,
        muzOffY: 0,
        muzMlt: .95,
        rate: 150,
        spread: 90,
        zoom: 1.4,
        leanMlt: 1,
        recoil: .006,
        recoilR: .005,
        recover: .98,
        recoverY: .99,
        recoverF: .98,
        recoilY: 3,
        recoilZ: 1
    }, {
        name: "Submachine Gun",
        src: "weapon_4",
        icon: "icon_4",
        sound: "weapon_4",
        transp: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 120,
        spdMlt: 1.04,
        ammo: 24,
        reload: 1200,
        dmg: 18,
        pierce: 1,
        range: 700,
        dmgDrop: 12,
        scale: 1,
        leftHoldY: -.35,
        rightHoldY: -.45,
        leftHoldZ: 1.2,
        rightHoldZ: -.2,
        xOff: .95,
        yOff: -.95,
        zOff: -3,
        xOrg: 0,
        yOrg: -.62,
        zOrg: -2.5,
        caseYOff: -.15,
        caseZOff: -.4,
        muzOff: 2.7,
        muzOffY: .1,
        rate: 90,
        spread: 170,
        minSpread: 20,
        zoom: 1.5,
        leanMlt: 1.2,
        recoil: .0034,
        recoilR: .015,
        recover: .978,
        recoverY: .996,
        recoverF: .975,
        recoilY: .3,
        recoilZ: 5.3
    }, {
        name: "Revolver",
        src: "weapon_5",
        icon: "icon_5",
        sound: "weapon_5",
        nAuto: !0,
        nCase: !0,
        transp: !0,
        kill: ["", 50],
        type: 1,
        swapTime: 200,
        aimSpeed: 120,
        spdMlt: 1.04,
        ammo: 6,
        reload: 900,
        dmg: 66,
        pierce: .85,
        dmgDrop: 10,
        scale: 1.3,
        leftHoldY: -1,
        rightHoldY: -.8,
        leftHoldZ: -.5,
        rightHoldZ: -.5,
        xOff: .7,
        yOff: -.8,
        zOff: -4.1,
        xOrg: 0,
        yOrg: -.35,
        zOrg: -3.8,
        muzOff: 2.75,
        muzOffY: .2,
        muzMlt: .95,
        range: 700,
        rate: 300,
        spread: 100,
        zoom: 1.4,
        leanMlt: 1.6,
        recoil: .01,
        recoilR: .01,
        recover: .982,
        recoverY: .994,
        recoverF: .98,
        recoilY: 1.25,
        recoilZ: 2
    }, {
        name: "Shotgun",
        src: "weapon_6",
        icon: "icon_6",
        sound: "weapon_6",
        nAuto: !0,
        nCase: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 180,
        spdMlt: 1,
        ammo: 2,
        shots: 5,
        reload: 900,
        dmg: 50,
        dmgDrop: 36,
        scale: 1.25,
        leftHoldY: -.7,
        rightHoldY: -.9,
        leftHoldZ: 1.2,
        rightHoldZ: -.3,
        xOff: .95,
        yOff: -.8,
        zOff: -3,
        xOrg: 0,
        yOrg: -.2,
        zOrg: -1.5,
        muzOff: 6,
        muzMlt: 1.5,
        range: 240,
        rate: 400,
        innac: 110,
        spread: 120,
        minSpread: 20,
        zoom: 1.25,
        leanMlt: 1.6,
        recoil: .013,
        recoilR: .015,
        recover: .99,
        recoverF: .975,
        recoilY: .8,
        recoilZ: 2
    }, {
        name: "Light Machine Gun",
        src: "weapon_7",
        icon: "icon_7",
        sound: "weapon_7",
        transp: !0,
        type: 0,
        swapTime: 800,
        aimSpeed: 200,
        spdMlt: .79,
        ammo: 100,
        reload: 2500,
        dmg: 22,
        pierce: 1,
        range: 700,
        dmgDrop: 10,
        scale: 1.3,
        leftHoldY: -.6,
        leftHoldX: -.5,
        rightHoldY: -.75,
        leftHoldZ: .6,
        rightHoldZ: -.2,
        xOff: .95,
        yOff: -.8,
        zOff: -2.8,
        xOrg: 0,
        yOrg: -.45,
        zOrg: -2,
        caseInd: 2,
        caseZOff: -.5,
        caseYOff: -.1,
        muzOff: 5.5,
        muzMlt: 1.5,
        rate: 120,
        spread: 300,
        minSpread: 15,
        zoom: 1.2,
        leanMlt: 1.6,
        recoil: .0032,
        recoilR: .012,
        recover: .98,
        recoverY: .9975,
        recoverF: .975,
        recoilY: .4,
        recoilZ: 3.8
    }, {
        name: "Semi Auto",
        src: "weapon_8",
        icon: "icon_8",
        sound: "weapon_8",
        nAuto: !0,
        type: 0,
        scope: !0,
        swapTime: 400,
        aimSpeed: 120,
        spdMlt: 1,
        ammo: 6,
        reload: 1300,
        dmg: 55,
        pierce: .2,
        range: 1e3,
        dmgDrop: 0,
        scale: 1,
        leftHoldY: -.7,
        rightHoldY: -.75,
        leftHoldZ: 2.4,
        rightHoldZ: .4,
        xOff: .8,
        yOff: -.75,
        zOff: -2,
        xOrg: 0,
        yOrg: -.55,
        zOrg: -.8,
        muzOff: 5.7,
        muzOffY: .5,
        muzMlt: 1.4,
        rate: 330,
        spread: 300,
        zoom: 2.4,
        leanMlt: 2,
        recoil: .01,
        recoilR: .01,
        recover: .984,
        recoverY: .997,
        recoverF: .975,
        recoilY: .4,
        recoilZ: 1.8
    }, {
        name: "Rocket Launcher",
        src: "weapon_9",
        icon: "icon_9",
        sound: "weapon_9",
        nSkill: !0,
        nAuto: !0,
        nCase: !0,
        projectile: 0,
        type: 0,
        swapTime: 600,
        aimSpeed: 200,
        spdMlt: .9,
        ammo: 1,
        reload: 1600,
        scale: 1.3,
        leftHoldY: -.5,
        rightHoldY: -.6,
        leftHoldZ: 3.2,
        rightHoldZ: 1.6,
        xOff: .95,
        yOff: -.4,
        zOff: -.7,
        xOrg: 0,
        yOrg: -.6,
        zOrg: -1.5,
        muzOff: 5,
        muzOffY: 0,
        muzMlt: 1.5,
        rate: 1,
        spread: 120,
        minSpread: 15,
        zoom: 1.5,
        leanMlt: 1.6,
        recoil: .008,
        recoilR: .012,
        recover: .99,
        recoverY: .998,
        recoverF: .975,
        recoilY: .8,
        recoilZ: 4
    }, {
        name: "Hands",
        melee: !0,
        type: 1,
        swapTime: 350,
        spdMlt: 1.1,
        spread: 100,
        leftHoldY: -.82,
        leftHoldX: -1.3,
        rightHoldX: 1.3,
        rightHoldY: -.82,
        leftHoldZ: -.5,
        rightHoldZ: -.5,
        xOff: 0,
        yOff: -.95,
        zOff: -3,
        xOrg: 0,
        yOrg: 0,
        zOrg: 0,
        leanMlt: 1
    }]
}, function(t, e, n) {
    n(9), n(14), e.codec = {
        preset: n(4).preset
    }
}, function(t, e, n) {
    n(9), n(14), e.createCodec = n(4).createCodec
}, function(t, e, n) {
    e.Decoder = a;
    var i = n(18),
        r = n(20).DecodeBuffer;

    function a(t) {
        if (!(this instanceof a)) return new a(t);
        r.call(this, t)
    }
    a.prototype = new r, i.mixin(a.prototype), a.prototype.decode = function(t) {
        arguments.length && this.write(t), this.flush()
    }, a.prototype.push = function(t) {
        this.emit("data", t)
    }, a.prototype.end = function(t) {
        this.decode(t), this.emit("end")
    }
}, function(t, e, n) {
    e.Encoder = a;
    var i = n(18),
        r = n(25).EncodeBuffer;

    function a(t) {
        if (!(this instanceof a)) return new a(t);
        r.call(this, t)
    }
    a.prototype = new r, i.mixin(a.prototype), a.prototype.encode = function(t) {
        this.write(t), this.emit("data", this.read())
    }, a.prototype.end = function(t) {
        arguments.length && this.encode(t), this.flush(), this.emit("end")
    }
}, function(t, e, n) {
    var i = n(19);

    function r(t) {
        var e, n = new Array(256);
        for (e = 0; e <= 127; e++) n[e] = a(e);
        for (e = 128; e <= 143; e++) n[e] = s(e - 128, t.map);
        for (e = 144; e <= 159; e++) n[e] = s(e - 144, t.array);
        for (e = 160; e <= 191; e++) n[e] = s(e - 160, t.str);
        for (n[192] = a(null), n[193] = null, n[194] = a(!1), n[195] = a(!0), n[196] = o(t.uint8, t.bin), n[197] = o(t.uint16, t.bin), n[198] = o(t.uint32, t.bin), n[199] = o(t.uint8, t.ext), n[200] = o(t.uint16, t.ext), n[201] = o(t.uint32, t.ext), n[202] = t.float32, n[203] = t.float64, n[204] = t.uint8, n[205] = t.uint16, n[206] = t.uint32, n[207] = t.uint64, n[208] = t.int8, n[209] = t.int16, n[210] = t.int32, n[211] = t.int64, n[212] = s(1, t.ext), n[213] = s(2, t.ext), n[214] = s(4, t.ext), n[215] = s(8, t.ext), n[216] = s(16, t.ext), n[217] = o(t.uint8, t.str), n[218] = o(t.uint16, t.str), n[219] = o(t.uint32, t.str), n[220] = o(t.uint16, t.array), n[221] = o(t.uint32, t.array), n[222] = o(t.uint16, t.map), n[223] = o(t.uint32, t.map), e = 224; e <= 255; e++) n[e] = a(e - 256);
        return n
    }

    function a(t) {
        return function() {
            return t
        }
    }

    function o(t, e) {
        return function(n) {
            var i = t(n);
            return e(n, i)
        }
    }

    function s(t, e) {
        return function(n) {
            return e(n, t)
        }
    }
    e.getReadToken = function(t) {
        var e = i.getReadFormat(t);
        return t && t.useraw ? function(t) {
            var e, n = r(t).slice();
            for (n[217] = n[196], n[218] = n[197], n[219] = n[198], e = 160; e <= 191; e++) n[e] = s(e - 160, t.bin);
            return n
        }(e) : r(e)
    }
}, function(t, e, n) {
    e.setExtUnpackers = function(t) {
        t.addExtUnpacker(14, [s, l(Error)]), t.addExtUnpacker(1, [s, l(EvalError)]), t.addExtUnpacker(2, [s, l(RangeError)]), t.addExtUnpacker(3, [s, l(ReferenceError)]), t.addExtUnpacker(4, [s, l(SyntaxError)]), t.addExtUnpacker(5, [s, l(TypeError)]), t.addExtUnpacker(6, [s, l(URIError)]), t.addExtUnpacker(10, [s, c]), t.addExtUnpacker(11, [s, h(Boolean)]), t.addExtUnpacker(12, [s, h(String)]), t.addExtUnpacker(13, [s, h(Date)]), t.addExtUnpacker(15, [s, h(Number)]), "undefined" != typeof Uint8Array && (t.addExtUnpacker(17, h(Int8Array)), t.addExtUnpacker(18, h(Uint8Array)), t.addExtUnpacker(19, [u, h(Int16Array)]), t.addExtUnpacker(20, [u, h(Uint16Array)]), t.addExtUnpacker(21, [u, h(Int32Array)]), t.addExtUnpacker(22, [u, h(Uint32Array)]), t.addExtUnpacker(23, [u, h(Float32Array)]), "undefined" != typeof Float64Array && t.addExtUnpacker(24, [u, h(Float64Array)]), "undefined" != typeof Uint8ClampedArray && t.addExtUnpacker(25, h(Uint8ClampedArray)), t.addExtUnpacker(26, u), t.addExtUnpacker(29, [u, h(DataView)])), r.hasBuffer && t.addExtUnpacker(27, h(a))
    };
    var i, r = n(0),
        a = r.global,
        o = {
            name: 1,
            message: 1,
            stack: 1,
            columnNumber: 1,
            fileName: 1,
            lineNumber: 1
        };

    function s(t) {
        return i || (i = n(21).decode), i(t)
    }

    function c(t) {
        return RegExp.apply(null, t)
    }

    function l(t) {
        return function(e) {
            var n = new t;
            for (var i in o) n[i] = e[i];
            return n
        }
    }

    function h(t) {
        return function(e) {
            return new t(e)
        }
    }

    function u(t) {
        return new Uint8Array(t).buffer
    }
}, function(t, e, n) {
    var i = n(12),
        r = n(10),
        a = r.Uint64BE,
        o = r.Int64BE,
        s = n(23).uint8,
        c = n(0),
        l = c.global,
        h = c.hasBuffer && "TYPED_ARRAY_SUPPORT" in l && !l.TYPED_ARRAY_SUPPORT,
        u = c.hasBuffer && l.prototype || {};

    function p() {
        var t = s.slice();
        return t[196] = d(196), t[197] = f(197), t[198] = m(198), t[199] = d(199), t[200] = f(200), t[201] = m(201), t[202] = g(202, 4, u.writeFloatBE || x, !0), t[203] = g(203, 8, u.writeDoubleBE || w, !0), t[204] = d(204), t[205] = f(205), t[206] = m(206), t[207] = g(207, 8, v), t[208] = d(208), t[209] = f(209), t[210] = m(210), t[211] = g(211, 8, y), t[217] = d(217), t[218] = f(218), t[219] = m(219), t[220] = f(220), t[221] = m(221), t[222] = f(222), t[223] = m(223), t
    }

    function d(t) {
        return function(e, n) {
            var i = e.reserve(2),
                r = e.buffer;
            r[i++] = t, r[i] = n
        }
    }

    function f(t) {
        return function(e, n) {
            var i = e.reserve(3),
                r = e.buffer;
            r[i++] = t, r[i++] = n >>> 8, r[i] = n
        }
    }

    function m(t) {
        return function(e, n) {
            var i = e.reserve(5),
                r = e.buffer;
            r[i++] = t, r[i++] = n >>> 24, r[i++] = n >>> 16, r[i++] = n >>> 8, r[i] = n
        }
    }

    function g(t, e, n, i) {
        return function(r, a) {
            var o = r.reserve(e + 1);
            r.buffer[o++] = t, n.call(r.buffer, a, o, i)
        }
    }

    function v(t, e) {
        new a(this, e, t)
    }

    function y(t, e) {
        new o(this, e, t)
    }

    function x(t, e) {
        i.write(this, t, e, !1, 23, 4)
    }

    function w(t, e) {
        i.write(this, t, e, !1, 52, 8)
    }
    e.getWriteToken = function(t) {
        return t && t.uint8array ? function() {
            var t = p();
            return t[202] = g(202, 4, x), t[203] = g(203, 8, w), t
        }() : h || c.hasBuffer && t && t.safe ? function() {
            var t = s.slice();
            return t[196] = g(196, 1, l.prototype.writeUInt8), t[197] = g(197, 2, l.prototype.writeUInt16BE), t[198] = g(198, 4, l.prototype.writeUInt32BE), t[199] = g(199, 1, l.prototype.writeUInt8), t[200] = g(200, 2, l.prototype.writeUInt16BE), t[201] = g(201, 4, l.prototype.writeUInt32BE), t[202] = g(202, 4, l.prototype.writeFloatBE), t[203] = g(203, 8, l.prototype.writeDoubleBE), t[204] = g(204, 1, l.prototype.writeUInt8), t[205] = g(205, 2, l.prototype.writeUInt16BE), t[206] = g(206, 4, l.prototype.writeUInt32BE), t[207] = g(207, 8, v), t[208] = g(208, 1, l.prototype.writeInt8), t[209] = g(209, 2, l.prototype.writeInt16BE), t[210] = g(210, 4, l.prototype.writeInt32BE), t[211] = g(211, 8, y), t[217] = g(217, 1, l.prototype.writeUInt8), t[218] = g(218, 2, l.prototype.writeUInt16BE), t[219] = g(219, 4, l.prototype.writeUInt32BE), t[220] = g(220, 2, l.prototype.writeUInt16BE), t[221] = g(221, 4, l.prototype.writeUInt32BE), t[222] = g(222, 2, l.prototype.writeUInt16BE), t[223] = g(223, 4, l.prototype.writeUInt32BE), t
        }() : p()
    }
}, function(t, e, n) {
    var i = n(5),
        r = n(10),
        a = r.Uint64BE,
        o = r.Int64BE,
        s = n(0),
        c = n(11),
        l = n(40),
        h = n(23).uint8,
        u = n(13).ExtBuffer,
        p = "undefined" != typeof Uint8Array,
        d = "undefined" != typeof Map,
        f = [];
    f[1] = 212, f[2] = 213, f[4] = 214, f[8] = 215, f[16] = 216, e.getWriteType = function(t) {
        var e = l.getWriteToken(t),
            n = t && t.useraw,
            r = p && t && t.binarraybuffer,
            m = r ? s.isArrayBuffer : s.isBuffer,
            g = r ? function(t, e) {
                w(t, new Uint8Array(e))
            } : w,
            v = d && t && t.usemap ? function(t, n) {
                if (!(n instanceof Map)) return b(t, n);
                var i = n.size;
                e[i < 16 ? 128 + i : i <= 65535 ? 222 : 223](t, i);
                var r = t.codec.encode;
                n.forEach(function(e, n, i) {
                    r(t, n), r(t, e)
                })
            } : b;
        return {
            boolean: function(t, n) {
                e[n ? 195 : 194](t, n)
            },
            function: x,
            number: function(t, n) {
                var i = 0 | n;
                n === i ? e[-32 <= i && i <= 127 ? 255 & i : 0 <= i ? i <= 255 ? 204 : i <= 65535 ? 205 : 206 : -128 <= i ? 208 : -32768 <= i ? 209 : 210](t, i) : e[203](t, n)
            },
            object: n ? function(t, n) {
                if (m(n)) return function(t, n) {
                    var i = n.length;
                    e[i < 32 ? 160 + i : i <= 65535 ? 218 : 219](t, i), t.send(n)
                }(t, n);
                y(t, n)
            } : y,
            string: function(t) {
                return function(n, i) {
                    var r = i.length,
                        a = 5 + 3 * r;
                    n.offset = n.reserve(a);
                    var o = n.buffer,
                        s = t(r),
                        l = n.offset + s;
                    r = c.write.call(o, i, l);
                    var h = t(r);
                    if (s !== h) {
                        var u = l + h - s,
                            p = l + r;
                        c.copy.call(o, o, u, l, p)
                    }
                    e[1 === h ? 160 + r : h <= 3 ? 215 + h : 219](n, r), n.offset += r
                }
            }(n ? function(t) {
                return t < 32 ? 1 : t <= 65535 ? 3 : 5
            } : function(t) {
                return t < 32 ? 1 : t <= 255 ? 2 : t <= 65535 ? 3 : 5
            }),
            symbol: x,
            undefined: x
        };

        function y(t, n) {
            if (null === n) return x(t, n);
            if (m(n)) return g(t, n);
            if (i(n)) return function(t, n) {
                var i = n.length;
                e[i < 16 ? 144 + i : i <= 65535 ? 220 : 221](t, i);
                for (var r = t.codec.encode, a = 0; a < i; a++) r(t, n[a])
            }(t, n);
            if (a.isUint64BE(n)) return function(t, n) {
                e[207](t, n.toArray())
            }(t, n);
            if (o.isInt64BE(n)) return function(t, n) {
                e[211](t, n.toArray())
            }(t, n);
            var r = t.codec.getExtPacker(n);
            if (r && (n = r(n)), n instanceof u) return function(t, n) {
                var i = n.buffer,
                    r = i.length,
                    a = f[r] || (r < 255 ? 199 : r <= 65535 ? 200 : 201);
                e[a](t, r), h[n.type](t), t.send(i)
            }(t, n);
            v(t, n)
        }

        function x(t, n) {
            e[192](t, n)
        }

        function w(t, n) {
            var i = n.length;
            e[i < 255 ? 196 : i <= 65535 ? 197 : 198](t, i), t.send(n)
        }

        function b(t, n) {
            var i = Object.keys(n),
                r = i.length;
            e[r < 16 ? 128 + r : r <= 65535 ? 222 : 223](t, r);
            var a = t.codec.encode;
            i.forEach(function(e) {
                a(t, e), a(t, n[e])
            })
        }
    }
}, function(t, e, n) {
    e.setExtPackers = function(t) {
        t.addExtPacker(14, Error, [u, c]), t.addExtPacker(1, EvalError, [u, c]), t.addExtPacker(2, RangeError, [u, c]), t.addExtPacker(3, ReferenceError, [u, c]), t.addExtPacker(4, SyntaxError, [u, c]), t.addExtPacker(5, TypeError, [u, c]), t.addExtPacker(6, URIError, [u, c]), t.addExtPacker(10, RegExp, [h, c]), t.addExtPacker(11, Boolean, [l, c]), t.addExtPacker(12, String, [l, c]), t.addExtPacker(13, Date, [Number, c]), t.addExtPacker(15, Number, [l, c]), "undefined" != typeof Uint8Array && (t.addExtPacker(17, Int8Array, o), t.addExtPacker(18, Uint8Array, o), t.addExtPacker(19, Int16Array, o), t.addExtPacker(20, Uint16Array, o), t.addExtPacker(21, Int32Array, o), t.addExtPacker(22, Uint32Array, o), t.addExtPacker(23, Float32Array, o), "undefined" != typeof Float64Array && t.addExtPacker(24, Float64Array, o), "undefined" != typeof Uint8ClampedArray && t.addExtPacker(25, Uint8ClampedArray, o), t.addExtPacker(26, ArrayBuffer, o), t.addExtPacker(29, DataView, o)), r.hasBuffer && t.addExtPacker(27, a, r.from)
    };
    var i, r = n(0),
        a = r.global,
        o = r.Uint8Array.from,
        s = {
            name: 1,
            message: 1,
            stack: 1,
            columnNumber: 1,
            fileName: 1,
            lineNumber: 1
        };

    function c(t) {
        return i || (i = n(26).encode), i(t)
    }

    function l(t) {
        return t.valueOf()
    }

    function h(t) {
        (t = RegExp.prototype.toString.call(t).split("/")).shift();
        var e = [t.pop()];
        return e.unshift(t.join("/")), e
    }

    function u(t) {
        var e = {};
        for (var n in s) e[n] = t[n];
        return e
    }
}, function(t, e) {
    e.copy = function(t, e, n, i) {
        var r;
        n || (n = 0), i || 0 === i || (i = this.length), e || (e = 0);
        var a = i - n;
        if (t === this && n < e && e < i)
            for (r = a - 1; r >= 0; r--) t[r + e] = this[r + n];
        else
            for (r = 0; r < a; r++) t[r + e] = this[r + n];
        return a
    }, e.toString = function(t, e, n) {
        var i = 0 | e;
        n || (n = this.length);
        for (var r = "", a = 0; i < n;)(a = this[i++]) < 128 ? r += String.fromCharCode(a) : (192 == (224 & a) ? a = (31 & a) << 6 | 63 & this[i++] : 224 == (240 & a) ? a = (15 & a) << 12 | (63 & this[i++]) << 6 | 63 & this[i++] : 240 == (248 & a) && (a = (7 & a) << 18 | (63 & this[i++]) << 12 | (63 & this[i++]) << 6 | 63 & this[i++]), a >= 65536 ? (a -= 65536, r += String.fromCharCode(55296 + (a >>> 10), 56320 + (1023 & a))) : r += String.fromCharCode(a));
        return r
    }, e.write = function(t, e) {
        for (var n = e || (e |= 0), i = t.length, r = 0, a = 0; a < i;)(r = t.charCodeAt(a++)) < 128 ? this[n++] = r : r < 2048 ? (this[n++] = 192 | r >>> 6, this[n++] = 128 | 63 & r) : r < 55296 || r > 57343 ? (this[n++] = 224 | r >>> 12, this[n++] = 128 | r >>> 6 & 63, this[n++] = 128 | 63 & r) : (r = 65536 + (r - 55296 << 10 | t.charCodeAt(a++) - 56320), this[n++] = 240 | r >>> 18, this[n++] = 128 | r >>> 12 & 63, this[n++] = 128 | r >>> 6 & 63, this[n++] = 128 | 63 & r);
        return n - e
    }
}, function(t, e, n) {
    var i = n(0);

    function r(t) {
        return new Uint8Array(t)
    }(e = t.exports = i.hasArrayBuffer ? r(0) : []).alloc = r, e.concat = i.concat, e.from = function(t) {
        if (i.isView(t)) {
            var n = t.byteOffset,
                r = t.byteLength;
            (t = t.buffer).byteLength !== r && (t.slice ? t = t.slice(n, n + r) : (t = new Uint8Array(t)).byteLength !== r && (t = Array.prototype.slice.call(t, n, n + r)))
        } else {
            if ("string" == typeof t) return i.from.call(e, t);
            if ("number" == typeof t) throw new TypeError('"value" argument must not be a number')
        }
        return new Uint8Array(t)
    }
}, function(t, e, n) {
    var i = n(0),
        r = i.global;

    function a(t) {
        return new r(t)
    }(e = t.exports = i.hasBuffer ? a(0) : []).alloc = i.hasBuffer && r.alloc || a, e.concat = i.concat, e.from = function(t) {
        if (!i.isBuffer(t) && i.isView(t)) t = i.Uint8Array.from(t);
        else if (i.isArrayBuffer(t)) t = new Uint8Array(t);
        else {
            if ("string" == typeof t) return i.from.call(e, t);
            if ("number" == typeof t) throw new TypeError('"value" argument must not be a number')
        }
        return r.from && 1 !== r.from.length ? r.from(t) : new r(t)
    }
}, function(t, e, n) {
    var i = n(0);

    function r(t) {
        return new Array(t)
    }(e = t.exports = r(0)).alloc = r, e.concat = i.concat, e.from = function(t) {
        if (!i.isBuffer(t) && i.isView(t)) t = i.Uint8Array.from(t);
        else if (i.isArrayBuffer(t)) t = new Uint8Array(t);
        else {
            if ("string" == typeof t) return i.from.call(e, t);
            if ("number" == typeof t) throw new TypeError('"value" argument must not be a number')
        }
        return Array.prototype.slice.call(t)
    }
}, function(t, e, n) {
    "use strict";
    e.byteLength = function(t) {
        var e = l(t),
            n = e[0],
            i = e[1];
        return 3 * (n + i) / 4 - i
    }, e.toByteArray = function(t) {
        for (var e, n = l(t), i = n[0], o = n[1], s = new a(3 * (i + o) / 4 - o), c = 0, h = o > 0 ? i - 4 : i, u = 0; u < h; u += 4) e = r[t.charCodeAt(u)] << 18 | r[t.charCodeAt(u + 1)] << 12 | r[t.charCodeAt(u + 2)] << 6 | r[t.charCodeAt(u + 3)], s[c++] = e >> 16 & 255, s[c++] = e >> 8 & 255, s[c++] = 255 & e;
        return 2 === o && (e = r[t.charCodeAt(u)] << 2 | r[t.charCodeAt(u + 1)] >> 4, s[c++] = 255 & e), 1 === o && (e = r[t.charCodeAt(u)] << 10 | r[t.charCodeAt(u + 1)] << 4 | r[t.charCodeAt(u + 2)] >> 2, s[c++] = e >> 8 & 255, s[c++] = 255 & e), s
    }, e.fromByteArray = function(t) {
        for (var e, n = t.length, r = n % 3, a = [], o = 0, s = n - r; o < s; o += 16383) a.push(u(t, o, o + 16383 > s ? s : o + 16383));
        return 1 === r ? (e = t[n - 1], a.push(i[e >> 2] + i[e << 4 & 63] + "==")) : 2 === r && (e = (t[n - 2] << 8) + t[n - 1], a.push(i[e >> 10] + i[e >> 4 & 63] + i[e << 2 & 63] + "=")), a.join("")
    };
    for (var i = [], r = [], a = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, c = o.length; s < c; ++s) i[s] = o[s], r[o.charCodeAt(s)] = s;

    function l(t) {
        var e = t.length;
        if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        var n = t.indexOf("=");
        return -1 === n && (n = e), [n, n === e ? 0 : 4 - n % 4]
    }

    function h(t) {
        return i[t >> 18 & 63] + i[t >> 12 & 63] + i[t >> 6 & 63] + i[63 & t]
    }

    function u(t, e, n) {
        for (var i, r = [], a = e; a < n; a += 3) i = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), r.push(h(i));
        return r.join("")
    }
    r["-".charCodeAt(0)] = 62, r["_".charCodeAt(0)] = 63
}, function(t, e, n) {
    (function(e) {
        function n(t) {
            return t && t.isBuffer && t
        }
        t.exports = n(void 0 !== e && e) || n(this.Buffer) || n("undefined" != typeof window && window.Buffer) || this.Buffer
    }).call(this, n(24).Buffer)
}, function(t, e, n) {
    e.encode = n(26).encode, e.decode = n(21).decode, e.Encoder = n(37).Encoder, e.Decoder = n(36).Decoder, e.createCodec = n(35).createCodec, e.codec = n(34).codec
}, function(t, e, n) {
    var i = n(49),
        r = n(1);
    t.exports = {
        socket: null,
        connected: !1,
        socketId: -1,
        connect: function(t, e, n) {
            if (!this.socket) {
                var a = r.enableHttps ? "wss:" : "ws:",
                    o = this;
                try {
                    var s = !1,
                        c = a + t;
                    this.socket = new WebSocket(c), this.socket.binaryType = "arraybuffer", this.socket.onmessage = function(t) {
                        var e = new Uint8Array(t.data),
                            r = i.decode(e),
                            a = r[0];
                        e = r[1], "io-init" == a ? o.socketId = e[0] : n[a].apply(void 0, e)
                    }, this.socket.onopen = function() {
                        o.connected = !0, e()
                    }, this.socket.onclose = function() {
                        o.connected = !1, s || e("Disconnected. Try connecting to another server.")
                    }, this.socket.onerror = function(t) {
                        this.socket.readyState != WebSocket.OPEN && (s = !0, console.error("Socket error", arguments), e("Socket error"))
                    }
                } catch (t) {
                    console.error("Socket connection error:", t), e(t)
                }
            }
        },
        send: function(t) {
            var e = Array.prototype.slice.call(arguments, 1),
                n = i.encode([t, e]);
            this.socket.send(n)
        },
        socketReady: function() {
            return this.socket && this.connected
        }
    }
}, function(t, e, n) {
    var i = n(2),
        r = n(3),
        a = new i.Vector3;

    function o() {
        i.Object3D.call(this), this.largeSpawnCount = 8, this.smallSpawnCount = 15, this.emissiveness = .55, this.velocityDamping = 3, this.lifeSpeedMin = 2.2, this.lifeSpeedRange = 3;
        var t = new i.Geometry({
                dynamic: !0
            }),
            e = new i.Color(12303291);
        this.mesh = new i.Mesh(t, new i.MeshLambertMaterial({
            color: e,
            emissive: e.multiplyScalar(this.emissiveness),
            shading: i.FlatShading
        })), this.mesh.castShadow = !0, this.mesh.receiveShadow = !0, this.add(this.mesh), this.cubeTemplate = new i.BoxGeometry(1, 1, 1);
        for (var n = 0; n < this.cubeTemplate.faces.length; n++) this.cubeTemplate.faces[n].materialIndex = 0;
        this.cubeTemplate.faceVertexUvs = [
            []
        ], this.entities = []
    }
    o.staticMatrix = new i.Matrix4, o.prototype = Object.create(i.Object3D.prototype), Object.defineProperty(o, "finished", function() {
        return 0 === this.entities.length
    }), o.prototype.explodeAt = function(t, e, n, i) {
        this.sizeMin = .35 * i, this.sizeRange = 2.2 * i, this.velocityMin = 30 * i, this.velocityRange = 17 * i, a.set(t, e, n);
        for (var r = 0; r < this.largeSpawnCount; r++) this.spawnEntity(.1 * Math.random() + .9, a, !1);
        for (r = 0; r < this.smallSpawnCount; r++) this.spawnEntity(.9 * Math.random(), a, !1)
    }, o.prototype.spawnEntity = function(t, e) {
        for (var n = Math.pow(t, 2.5), i = n * this.sizeRange + this.sizeMin, r = (1 - n) * this.velocityRange + this.velocityMin, a = this._randomVector().normalize().multiplyScalar(r), s = n * this.lifeSpeedRange + this.lifeSpeedMin, c = 0;;) {
            for (var l = !0, h = 0; h < this.entities.length; h++)
                if (this.entities[h].index === c) {
                    l = !1;
                    break
                } if (l) break;
            c++
        }
        8 * c > this.mesh.geometry.vertices.length - 1 && this.mesh.geometry.merge(this.cubeTemplate, o.emptyMatrix), this.entities.push({
            index: c,
            rank: n,
            rankSeed: t,
            life: 0,
            lifeSpeed: s,
            size: i,
            position: e.clone(),
            velocity: a
        })
    }, o.prototype.destroyEntity = function(t) {
        this.entities.splice(this.entities.indexOf(t), 1);
        for (var e = 8 * t.index; e < 8 * (t.index + 1); e++) this.mesh.geometry.vertices[e].set(0, 0, 0);
        this.mesh.geometry.verticesNeedUpdate = !0, this.mesh.geometry.elementsNeedUpdate = !0, this._cleanGeometry()
    }, o.prototype.update = function(t) {
        for (var e of (t /= 1e3, this.entities)) {
            e.life += t * e.lifeSpeed, e.velocity.multiplyScalar(1 - this.velocityDamping * t), e.position.add(e.velocity.clone().multiplyScalar(t));
            var n = 2 - Math.pow(e.life / Math.sqrt(2), 2);
            n *= e.size;
            for (var i = 8 * e.index; i < 8 * (e.index + 1); i++) {
                var r = this.mesh.geometry.vertices[i],
                    a = this.cubeTemplate.vertices[i % 8];
                r.set(e.position.x, e.position.y, e.position.z).addScaledVector(a, n)
            }
            n <= 0 && this.destroyEntity(e)
        }
        this.mesh.geometry.verticesNeedUpdate = !0, this.mesh.geometry.elementsNeedUpdate = !0, this.mesh.geometry.computeBoundingSphere()
    }, o.prototype._cleanGeometry = function() {
        for (var t = this.mesh.geometry.vertices, e = this.mesh.geometry.faces, n = -1, i = 0; i < this.entities.length; i++) {
            var r = this.entities[i];
            r.index > n && (n = r.index)
        }
        var a = n + 1;
        t.splice(8 * a, t.length - 8 * a), e.splice(12 * a, e.length - 12 * a)
    }, o.prototype._randomVector = function() {
        return new i.Vector3(Math.random() - .5, Math.random() - .5, Math.random() - .5)
    };
    var s = [{
        mat: i.MeshBasicMaterial,
        spd: 1.7,
        scale: 1.4,
        length: 10,
        color: 16777179
    }, {
        spd: [.03, .04],
        grav: 4e-4,
        spn: [.03, .05],
        scale: .15,
        length: .5,
        color: 10124094
    }, {
        spd: [.03, .04],
        grav: 4e-4,
        spn: [.03, .05],
        scale: .11,
        length: .4,
        color: 12816686
    }];
    i.Sprite.prototype.init = function(t, e, n, i, r, a, o, s, c, l) {
        this.position.x = t, this.position.y = e, this.position.z = n, this.xVel = i, this.yVel = r, this.zVel = a, this.scale.x = this.scale.y = o, this.life = s || 0, this.grav = c || 0, this.area = l, this.updC = 0
    }, i.Sprite.prototype.update = function(t) {
        if (this.visible) {
            if (this.position.x += this.xVel * t, this.position.y += this.yVel * t, this.yVel -= this.grav * t, this.position.z += this.zVel * t, this.area) {
                var e = this.scale.x / 2;
                this.position.x - e >= this.area.x + this.area.w ? this.position.x = this.area.x - this.area.w - e : this.position.x + e <= this.area.x - this.area.w && (this.position.x = this.area.x + this.area.w + e), this.position.z - e >= this.area.z + this.area.l ? this.position.z = this.area.z - this.area.l - e : this.position.z + e <= this.area.z - this.area.l && (this.position.z = this.area.z + this.area.l + e), this.position.y - e >= this.area.y + this.area.h ? this.position.y = this.area.y - e : this.position.y + e <= this.area.y && (this.position.y = this.area.y + this.area.h + e)
            }
            this.life -= t, this.life <= 0 && this.updC && (this.visible = !1), this.updC++
        }
    };
    var c = [Math.PI / 3, -Math.PI / 3],
        l = [{
            hole: !0,
            count: 2,
            grav: -2e-5,
            scale: [5, 9],
            speed: [0, .025],
            spread: [-.4, .4],
            life: [300, 500]
        }, {}, {
            count: 1,
            blending: 2,
            scale: [5, 7],
            speed: [0, 0],
            spread: [0, 0],
            life: [30, 35]
        }, {
            count: 1,
            blending: 2,
            scale: [2e3, 2e3],
            speed: [0, 0],
            spread: [0, 0]
        }, {
            count: 4,
            src: "0",
            scale: [5, 6],
            speed: [0, .01],
            spread: [-1, 1],
            life: [600, 800]
        }];
    t.exports = function(t, e) {
        var n, a;
        this.particles = [], this.physObjs = [], this.areas = [], this.active = !0, this.ExplosionManager = new o, this.area = function(t, e, n, i, a, o, s, c) {
            i /= 2, o /= 2, this.areas.push({
                f: c,
                x: t,
                y: e,
                z: n,
                w: i,
                h: a,
                l: o
            });
            for (var l = 0; l < s.count; ++l) this.add(s.src, t + r.randInt(-i, i), e + r.randInt(0, a), n + r.randInt(-o, o), s.spd * Math.sin(s.dir), s.grav ? r.randFloat(s.grav[0], s.grav[1]) : 0, s.spd * Math.cos(s.dir), r.randFloat(s.scl[0], s.scl[1]), 0, s.grav, s.blending, this.areas[this.areas.length - 1])
        }, this.effect = function(e, a, o, s, c, h) {
            if (this.active && (0 == t.useDepthMap || "0" == t.useDepthMap)) {
                n = l[h];
                for (var u = 0; u < n.count; ++u) {
                    var p = r.randFloat(n.speed[0], n.speed[1]),
                        d = s + r.randFloat(n.spread[0], n.spread[1]),
                        f = c + r.randFloat(n.spread[0], n.spread[1]);
                    this.add(h, e, a, o, p * Math.sin(d) * Math.cos(f), p * Math.sin(f), p * Math.cos(d) * Math.cos(f), r.randFloat(n.scale[0], n.scale[1]), n.life ? r.randInt(n.life[0], n.life[1]) : 0, n.grav, n.blending, null, n.src)
                }
                n.hole && this.add(1, e, a, o, 0, 0, 0, r.randFloat(.4, 1), 5e3, 0, i.SubtractiveBlending)
            }
        }, this.add = function(e, n, r, o, s, c, l, h, u, p, d, f, m) {
            a = null;
            for (var g = 0; g < this.particles.length; ++g)
                if (!this.particles[g].visible && !this.particles[g].static) {
                    a = this.particles[g];
                    break
                } a || (a = new i.Sprite, this.particles.push(a), t.scene.add(a)), this.setMaterial(a, m || e, d, !0), a.visible = !0, a.init(n, r, o, s, c, l, h, u, p, f)
        }, this.setMaterial = function(e, n, a, o) {
            e.material = t.getMat("particles/" + n, {
                mat: i.SpriteMaterial,
                depthWrite: !1,
                blending: a || i.NormalBlending,
                rotation: o ? c[r.randInt(0, 2)] : 0
            })
        }, this.physObj = function(e, n, o, c, l, h, u, p, d, f) {
            if (0 == t.useDepthMap || "0" == t.useDepthMap) {
                a = null;
                for (var m = 0; m < this.physObjs.length; ++m)
                    if (!this.physObjs[m].mesh.visible) {
                        a = this.physObjs[m];
                        break
                    } a || (a = new function(t) {
                    this.mesh = new i.Mesh(t.cubeGeo), this.init = function(e, n, a, o, s, c, l, h) {
                        this.dst = c, this.spd = l.spd[1] ? r.randFloat(l.spd[0], l.spd[1]) : l.spd, o -= Math.PI, this.xS = this.spd * Math.sin(o) * Math.cos(s) + (h ? h.xVel : 0), this.zS = this.spd * Math.cos(o) * Math.cos(s) + (h ? h.zVel : 0), this.yS = this.spd * Math.sin(s) + (h ? h.yVel : 0), this.grav = l.grav, this.spin = l.spn ? l.spn[1] ? r.randFloat(l.spn[0], l.spn[1]) : l.spn : 0, this.mesh.receiveShadow = l.mat != i.MeshBasicMaterial, this.mesh.material = t.getMat("default", {
                            fog: l.mat != i.MeshBasicMaterial,
                            color: l.color,
                            emissive: l.emis,
                            mat: l.mat
                        }), t.moveMesh(this.mesh, e, n, a), this.mesh.lookAt(e + this.xS, n + this.yS, a + this.zS), t.scaleMesh(this.mesh, l.scale, l.scale, l.length)
                    }, this.update = function(t) {
                        this.mesh.visible && (this.mesh.position.x += this.xS * t, this.mesh.position.z += this.zS * t, this.mesh.position.y += this.yS * t, this.spin && (this.mesh.rotation.x += this.spin * t), this.yS -= (this.grav || 0) * t, this.dst -= this.spd * t, this.dst <= 0 && (this.mesh.visible = !1))
                    }
                }(t), this.physObjs.push(a), t.scene.add(a.mesh)), a.sid = void 0 != f ? f : null, a.mesh.visible = !0, a.init(e, n, o, c, l, h, d || s[u], p)
            }
        }, this.disablePhys = function(t) {
            for (var e = 0; e < this.physObjs.length; ++e) this.physObjs[e].sid == t && (this.physObjs[e].mesh.visible = !1)
        }, this.update = function(t, e) {
            if (e && e.active)
                for (var n = 0; n < this.areas.length; ++n) this.areas[n].f && (this.areas[n].x = e.x, this.areas[n].y = e.y, this.areas[n].z = e.z);
            for (n = 0; n < this.particles.length; ++n) this.particles[n].update(t);
            for (n = 0; n < this.physObjs.length; ++n) this.physObjs[n].update(t);
            this.ExplosionManager.update(t)
        }, this.reset = function() {
            this.particles.length = 0, this.physObjs.length = 0, this.areas.length = 0
        }
    }
}, function(t, e) {
    var n = {
        utf8: {
            stringToBytes: function(t) {
                return n.bin.stringToBytes(unescape(encodeURIComponent(t)))
            },
            bytesToString: function(t) {
                return decodeURIComponent(escape(n.bin.bytesToString(t)))
            }
        },
        bin: {
            stringToBytes: function(t) {
                for (var e = [], n = 0; n < t.length; n++) e.push(255 & t.charCodeAt(n));
                return e
            },
            bytesToString: function(t) {
                for (var e = [], n = 0; n < t.length; n++) e.push(String.fromCharCode(t[n]));
                return e.join("")
            }
        }
    };
    t.exports = n
}, , , , , function(t, e) {
    t.exports = function(t, e, n, i) {
        n = n || {}, this.id = t, this.name = e, this.score = n.player_score || 0, this.kills = n.player_kills || 0, this.deaths = n.player_deaths || 0, this.wins = n.player_wins || 0, this.games = n.player_games_played || 0, this.clan = n.player_clanid, this.funds = n.player_funds || 0, this.featured = n.player_featured || 0, this.clan = n.player_clan || null, this.timePlayed = n.player_timeplayed || 0, this.skins = n.skins || [], this.setData = function(t) {
            this.kills = t[1], this.wins = t[2], this.games = t[3], this.deaths = t[4], this.funds = t[5], this.score = t[6], this.updateLevel(), this.clan = t[7], this.timePlayed = t[8], this.featured = t[9], this.skins = t[10]
        }, this.updateLevel = function() {
            var t = i.rankVar * Math.sqrt(this.score);
            this.level = Math.floor(t), this.levelProg = Math.round(100 * (t - this.level)), this.level = Math.max(1, this.level)
        }, this.updateLevel(), this.getData = function() {
            return [this.id, this.kills, this.wins, this.games, this.deaths, this.funds, this.score, this.clan, this.timePlayed, this.featured, this.skins]
        }
    }
}, function(t, e, n) {
    n(2), t.exports = function(t, e, n, i, r, a, o) {
        var s = this,
            c = t.renderer.domElement;
        if (this.hasPointerlock = "pointerLockElement" in document || "mozPointerLockElement" in document || "webkitPointerLockElement" in document, this.hasPointerlock) {
            c.requestPointerLock = c.requestPointerLock || c.mozRequestPointerLock || c.webkitRequestPointerLock;
            var l = function(t) {
                s.enabled = document.pointerLockElement === c || document.mozPointerLockElement === c || document.webkitPointerLockElement === c, (o.connected || r.singlePlayer) && (s.enabled && enterGame(), n.toggleControlUI(s.enabled))
            };
            document.addEventListener("pointerlockchange", l, !1), document.addEventListener("mozpointerlockchange", l, !1), document.addEventListener("webkitpointerlockchange", l, !1)
        }
        this.isn = 0, this.tmpInputs = [], this.getISN = function() {
            return this.isn++
        }, this.masterLock = !0, this.sensMlt = 1, this.sensAimMlt = 1, this.locked = !1, this.enabled = !1, t.camera.rotation.set(0, 0, 0), this.pitchObject = new e.Object3D, this.pitchObject.add(t.camera), this.object = new e.Object3D, this.object.add(this.pitchObject);
        var h = Math.PI / 2;
        c.addEventListener("mousemove", function(e) {
            if (s.enabled && !window.locked) {
                e.preventDefault(), window.idleTimer = 0;
                var n = e.movementX || e.mozMovementX || e.webkitMovementX || 0,
                    i = e.movementY || e.mozMovementY || e.webkitMovementY || 0,
                    r = s.mouseDownR ? s.sensAimMlt : s.sensMlt,
                    o = a.mouseSens * r * (s.target ? a.camChaseSen : 1) * (t.camera.fov / t.fov);
                s.pitchObject.rotation.x -= i * o * (s.invertY ? -1 : 1), s.unlockView || (s.pitchObject.rotation.x = Math.max(-h, Math.min(h, s.pitchObject.rotation.x)));
                var c = Math.abs(s.pitchObject.rotation.x % (2 * Math.PI));
                dirFlip = c > Math.PI / 2 && c < Math.PI + Math.PI / 2 ? -1 : 1, s.object.rotation.y -= n * o * dirFlip, s.yDr = (s.pitchObject.rotation.x % Math.PI2).round(3), s.xDr = (s.object.rotation.y % Math.PI2).round(3)
            }
        }, !1), c.addEventListener("mousedown", function(t) {
            if (!s.masterLock) switch (s.enabled || s.toggle(!0), document.activeElement == chatInput && chatInput.blur(), t.which) {
                case 3:
                    s.mouseDownR = 1;
                    break;
                default:
                    s.mouseDownL = 1
            }
        }, !1), c.addEventListener("mouseup", function(t) {
            if (!s.locked) switch (t.which) {
                case 3:
                    s.mouseDownR = 0;
                    break;
                default:
                    s.mouseDownL = 0
            }
        }, !1);
        var u = function(t) {
            return t = window.event || t, s.skipScroll ? s.skipScroll = !1 : s.scrollDelta = -Math.max(-1, Math.min(1, t.wheelDelta || -t.detail)), !1
        };

        function p(t, e) {
            if (window.idleTimer = 0, s.keys) {
                if (e && s.keys[t] !== e && null != s.inputChanger) s.moveKeys[s.inputChanger] ? s.moveKeys[s.inputChanger] = t : s[s.inputChanger] = t, saveVal("cont_" + s.inputChanger, t), "recordKey" == s.inputChanger ? showWindow(12, !0) : showWindow(7, !0), s.inputChanger = null;
                else if (!s.enabled) return;
                s.keys[t] !== e && (s.keys[t] = e, t == s.voiceKey ? toggleRecord(e) : s.moveKeys.indexOf(t) >= 0 && s.updateMoveDir(), e && (t == s.swapKeyU ? s.scrollDelta = 1 : t == s.swapKeyD ? s.scrollDelta = -1 : window.pressButton(t)))
            }
        }
        c.addEventListener ? (c.addEventListener("mousewheel", u, !1), c.addEventListener("DOMMouseScroll", u, !1)) : myitem.attachEvent("onmousewheel", u), this.update = function(e) {
            if (this.target) {
                var n = i.getAngleDist(this.object.rotation.y, this.target.yD);
                this.object.rotation.y += n * e * a.camChaseTrn, n = i.getAngleDist(s.pitchObject.rotation.x, this.target.xD), this.pitchObject.rotation.x += n * e * a.camChaseTrn, n = i.getDistance3D(this.object.position.x, this.object.position.y, this.object.position.z, this.target.x, this.target.y, this.target.z) * e * a.camChaseSpd;
                var r = i.getDirection(this.object.position.z, this.object.position.x, this.target.z, this.target.x),
                    o = i.getXDir(this.object.position.x, this.object.position.y, this.object.position.z, this.target.x, this.target.y, this.target.z);
                this.object.position.x -= n * Math.sin(r) * Math.cos(o), this.object.position.y += n * Math.sin(o), this.object.position.z -= n * Math.cos(r) * Math.cos(o), t.updateFrustum()
            }
        }, this.camLookAt = function(t, e, n) {
            var r = i.getXDir(this.object.position.x, this.object.position.y, this.object.position.z, t, e, n),
                o = i.getDirection(this.object.position.z, this.object.position.x, n, t);
            this.target = {
                xD: r,
                yD: o,
                x: t + a.camChaseDst * Math.sin(o) * Math.cos(r),
                y: e - a.camChaseDst * Math.sin(r),
                z: n + a.camChaseDst * Math.cos(o) * Math.cos(r)
            }
        }, this.moveCam = function(e, n, i) {
            s.object.position.set(e, n, i), t.camera.updateProjectionMatrix(), t.updateFrustum()
        }, this.rotateCam = function(e, n, i) {
            t.camera.rotation.y = e, t.camera.rotation.x = n, t.camera.rotation.z = i
        }, this.jumpKey = parseInt(getSavedVal("cont_jumpKey") || 32), this.crouchKey = parseInt(getSavedVal("cont_crouchKey") || 16), this.swapKeyD = parseInt(getSavedVal("cont_swapKeyD") || 81), this.swapKeyU = parseInt(getSavedVal("cont_swapKeyU") || 69), this.reloadKey = parseInt(getSavedVal("cont_reloadKey") || 82), this.sprayKey = parseInt(getSavedVal("cont_sprayKey") || 70), this.aimKey = parseInt(getSavedVal("cont_aimKey") || 67), this.chatKey = parseInt(getSavedVal("cont_chatKey") || 13), this.voiceKey = parseInt(getSavedVal("cont_voiceKey") || 86), this.recordKey = parseInt(getSavedVal("cont_recordKey") || 84), this.moveKeys = [parseInt(getSavedVal("cont_0") || 87), parseInt(getSavedVal("cont_1") || 83), parseInt(getSavedVal("cont_2") || 65), parseInt(getSavedVal("cont_3") || 68)], this.moveDirs = [
            [0, -1],
            [0, 1],
            [-1, 0],
            [1, 0]
        ], this.updateMoveDir = function() {
            for (var t = 0, e = 0, n = 0; n < s.moveKeys.length; ++n) s.keys[s.moveKeys[n]] && (t += s.moveDirs[n][0], e += s.moveDirs[n][1]);
            this.moveDir = 0 == t && 0 == e ? null : Math.atan2(e, t)
        }, window.addEventListener("keydown", function(t) {
            (t.which || t.keyCode) == s.chatKey ? window.pressButton(t.which || t.keyCode) : document.activeElement != chatInput && (s.enabled && t.preventDefault(), p(t.which || t.keyCode || 0, 1))
        }, !1), window.addEventListener("keyup", function(t) {
            s.enabled && t.preventDefault(), p(t.which || t.keyCode || 0, 0)
        }, !1), this.toggle = function(t) {
            this.locked || this.masterLock || ("block" == windowHolder.style.display ? t && n.toggleWindow(!1) : t ? c.requestPointerLock() : document.exitPointerLock())
        }, this.disable = function() {
            s.toggle(!1), s.locked = !0
        }, this.reset = function() {
            this.mouseDownL = 0, this.mouseDownR = 0, this.keys = {}, this.tmpInputs.length = 0, this.scrollDelta = 0, this.xDr = 0, this.yDr = 0, this.isn = 0, this.moveDir = null, this.skipScroll = !1, this.inputChanger = null, this.target = null, this.locked = !1, s.pitchObject.rotation.x = 0, s.object.rotation.y = 0, t.camera.rotation.set(0, 0, 0)
        }
    }
}, function(t, e, n) {
    var i = n(3),
        r = n(1);
    t.exports = function(t, e) {
        var a, o, s = e ? {} : n(2),
            c = [];
        this.projectiles = [], this.types = [{
            mat: s.MeshBasicMaterial,
            color: 16777179,
            explode: 50,
            dmg: 125,
            spd: .5,
            scale: 1.4,
            length: 10,
            range: 600
        }], this.update = function(n) {
            for (var s = 0; s < this.projectiles.length; ++s)
                if ((a = this.projectiles[s]).active) {
                    if (a.update(n), a.active) {
                        c.length = 0;
                        for (var l = 1 / (a.spd * n * Math.sin(a.xD) * Math.cos(a.yD)), h = 1 / (a.spd * n * Math.cos(a.xD) * Math.cos(a.yD)), u = 1 / (a.spd * n * Math.sin(a.yD)), p = 0; p < t.map.manager.objects.length; ++p)(o = t.map.manager.objects[p]).noShoot || (tmpDst = i.lineInRect(a.x, a.z, a.y, l, h, u, o.x - o.width, o.z - o.length, o.y - o.height, o.x + o.width, o.z + o.length, o.y + o.height), tmpDst && tmpDst <= 1 && c.push(tmpDst));
                        for (p = 0; p < t.players.list.length; ++p)(o = t.players.list[p]).active && o != a.owner && (tmpDst = i.lineInRect(a.x, a.z, a.y, l, h, u, o.x - o.scale - r.hitBoxPad, o.z - o.scale - r.hitBoxPad, o.y, o.x + o.scale + r.hitBoxPad, o.z + o.scale + r.hitBoxPad, o.y + o.height + r.hitBoxPad), tmpDst && tmpDst <= 1 && c.push(tmpDst));
                        c.length && (c.sort(i.orderByNum), a.active = !1, a.x += c[0] * (a.xS * n), a.y += c[0] * (a.yS * n), a.z += c[0] * (a.zS * n))
                    }
                    if (!a.active)
                        for (a.expl && t.explosion(a.x, a.y, a.z, a.expl, a.dmg, a.owner), p = 0; p < t.players.list.length; ++p) e.send(t.players.list[p].id, "pre", a.sid)
                }
        }, this.init = function(n, i, r, o, s, c, l) {
            n = n.round(1), i = i.round(1), r = r.round(1), o = o.round(3), s = s.round(3), a = null;
            for (var h = 0; h < this.projectiles.length; ++h)
                if (!this.projectiles[h].active) {
                    a = this.projectiles[h];
                    break
                } if (a || ((a = new function() {
                    this.init = function(t, e, n, i, r, a, o) {
                        this.x = t, this.y = e, this.z = n, i -= Math.PI, this.xD = i, this.yD = r, this.spd = a.spd, this.range = a.range, this.dmg = a.dmg, this.owner = o, this.skipMove = !0, this.expl = a.explode, this.xS = this.spd * Math.sin(i) * Math.cos(r), this.zS = this.spd * Math.cos(i) * Math.cos(r), this.yS = this.spd * Math.sin(r), this.active = !0
                    }, this.update = function(t) {
                        this.active && (this.skipMove ? this.skipMove = !1 : (this.x += this.xS * t, this.z += this.zS * t, this.y += this.yS * t, this.range -= this.spd * t, this.range <= 0 && (this.active = !1)))
                    }
                }).sid = this.projectiles.length, this.projectiles.push(a)), a.init(n, i, r, o, s, this.types[c], l), e)
                for (h = 0; h < t.players.list.length; ++h) t.players.list[h].active && e.send(t.players.list[h].id, "pr", n, i, r, o, s, c, a.sid)
        }
    }
}, function(t, e) {
    t.exports = [{
        name: "Dummy",
        opacity: 1
    }, {
        name: "Target",
        opacity: .7
    }, {
        name: "Vertix",
        opacity: .7
    }, {
        name: "Oil Rig",
        opacity: .7
    }, {
        name: "Krunker Boys",
        opacity: .7
    }, {
        name: "Ladder",
        opacity: 1
    }, {
        name: "Complaints",
        opacity: .8
    }, {
        name: "Duck",
        opacity: .7
    }, {
        name: "Sid",
        opacity: .7
    }, {
        name: "Vince",
        opacity: .7
    }, {
        name: "Kiki",
        opacity: .7
    }]
}, function(t, e) {
    t.exports.wheels = [{
        name: "Starter",
        lab: {
            nm: "Any",
            col: "#E040FB"
        },
        price: 50,
        rarities: [75, 22, 3, 0, 0]
    }, {
        name: "Elite",
        lab: {
            nm: "Any",
            col: "#E040FB"
        },
        price: 100,
        rarities: [50, 30, 15, 5, 0]
    }, {
        name: "Heroic",
        lab: {
            nm: "Any",
            col: "#E040FB"
        },
        price: 500,
        rarities: [15, 35, 34, 14, 2]
    }, {
        name: "Attire",
        lab: {
            nm: "Outfits Only!",
            col: "#ed4242"
        },
        itemTypes: [1, 2],
        price: 750,
        rarities: [43, 33, 17, 6, 1]
    }], t.exports.types = ["weapons/weapon_", "hats/hat_", "body/body_"], t.exports.purchases = [{
        val: 300,
        price: .99
    }, {
        val: 600,
        price: 1.79
    }, {
        val: 2600,
        tag: "Popular!",
        tagCol: "#ed4242",
        price: 7.49
    }, {
        val: 7e3,
        tag: "20% Off",
        tagCol: "#E040FB",
        price: 15.99
    }, {
        val: 2e4,
        tag: "30% Off",
        tagCol: "#fab640",
        price: 34.99
    }], t.exports.rarities = [{
        name: "Uncommon",
        color: "#b2f252"
    }, {
        name: "Rare",
        color: "#2196F3"
    }, {
        name: "Epic",
        color: "#E040FB"
    }, {
        name: "Legendary",
        color: "#FBC02D"
    }, {
        name: "Relic",
        color: "#ed4242"
    }], t.exports.previews = {
        1: {
            xOff: -1.5,
            scl: 1.2
        },
        2: {
            xOff: -.8,
            scl: 1.15
        },
        3: {
            xOff: 0,
            yOff: 1,
            scl: 1.8
        },
        4: {
            xOff: -1.2,
            scl: 1.4
        },
        5: {
            xOff: -.8,
            yOff: .5,
            scl: 2
        },
        6: {
            xOff: -1,
            scl: 1.7
        },
        7: {
            xOff: -1,
            scl: 1.6
        },
        8: {
            xOff: -1,
            scl: 1.2
        },
        9: {
            xOff: -1.2,
            yOff: -1,
            scl: 1.6
        }
    }, t.exports.skins = [{
        name: "Arctic Hunt",
        id: 0,
        weapon: 1,
        rarity: 1
    }, {
        name: "Autumn Hunt",
        id: 1,
        weapon: 1,
        rarity: 1
    }, {
        name: "Reticle Blaze",
        id: 2,
        weapon: 1,
        rarity: 2
    }, {
        name: "Digital Hunt",
        id: 3,
        weapon: 1,
        rarity: 0
    }, {
        name: "Moon Dragon",
        id: 4,
        weapon: 1,
        rarity: 3
    }, {
        name: "Scharfschütze",
        id: 5,
        weapon: 1,
        rarity: 1
    }, {
        name: "Woodland Sniper",
        id: 6,
        weapon: 1,
        rarity: 0
    }, {
        name: "Hazard Reticle",
        id: 7,
        weapon: 1,
        rarity: 1
    }, {
        name: "Kodac Reticle",
        id: 8,
        weapon: 1,
        rarity: 1
    }, {
        name: "Seafarer",
        id: 9,
        weapon: 1,
        rarity: 0
    }, {
        name: "Acid Breath",
        id: 10,
        weapon: 1,
        rarity: 3
    }, {
        name: "Trail Scout",
        id: 11,
        weapon: 1,
        rarity: 0
    }, {
        name: "Arctic AK",
        id: 0,
        weapon: 2,
        rarity: 1
    }, {
        name: "Autumn AK",
        id: 1,
        weapon: 2,
        rarity: 1
    }, {
        name: "Blaze AK",
        id: 2,
        weapon: 2,
        rarity: 2
    }, {
        name: "Digital AK",
        id: 3,
        weapon: 2,
        rarity: 0
    }, {
        name: "Luna Dragon",
        id: 4,
        weapon: 2,
        rarity: 3
    }, {
        name: "Flecken AK",
        id: 5,
        weapon: 2,
        rarity: 1
    }, {
        name: "Woodland AK",
        id: 6,
        weapon: 2,
        rarity: 0
    }, {
        name: "Hazard AK",
        id: 7,
        weapon: 2,
        rarity: 1
    }, {
        name: "Kodac AK",
        id: 8,
        weapon: 2,
        rarity: 1
    }, {
        name: "Seafarer AK",
        id: 9,
        weapon: 2,
        rarity: 0
    }, {
        name: "Trail AK",
        id: 10,
        weapon: 2,
        rarity: 0
    }, {
        name: "Arctic SMG",
        id: 0,
        weapon: 4,
        rarity: 1
    }, {
        name: "Autumn SMG",
        id: 1,
        weapon: 4,
        rarity: 1
    }, {
        name: "Blaze SMG",
        id: 2,
        weapon: 4,
        rarity: 2
    }, {
        name: "Digital SMG",
        id: 3,
        weapon: 4,
        rarity: 0
    }, {
        name: "Flecken SMG",
        id: 4,
        weapon: 4,
        rarity: 1
    }, {
        name: "Woodland SMG",
        id: 5,
        weapon: 4,
        rarity: 0
    }, {
        name: "Hazard SMG",
        id: 6,
        weapon: 4,
        rarity: 1
    }, {
        name: "Kodac SMG",
        id: 7,
        weapon: 4,
        rarity: 1
    }, {
        name: "Seafarer SMG",
        id: 8,
        weapon: 4,
        rarity: 0
    }, {
        name: "Trail SMG",
        id: 9,
        weapon: 4,
        rarity: 0
    }, {
        name: "Arctic Python",
        id: 0,
        weapon: 5,
        rarity: 1
    }, {
        name: "Autumn Python",
        id: 1,
        weapon: 5,
        rarity: 1
    }, {
        name: "Blaze Python",
        id: 2,
        weapon: 5,
        rarity: 2
    }, {
        name: "Digital Python",
        id: 3,
        weapon: 5,
        rarity: 0
    }, {
        name: "Flecken Python",
        id: 4,
        weapon: 5,
        rarity: 1
    }, {
        name: "Woodland",
        id: 5,
        weapon: 5,
        rarity: 0
    }, {
        name: "Hazard Python",
        id: 6,
        weapon: 5,
        rarity: 1
    }, {
        name: "Kodac Python",
        id: 7,
        weapon: 5,
        rarity: 1
    }, {
        name: "Seafarer",
        id: 8,
        weapon: 5,
        rarity: 0
    }, {
        name: "Trail Python",
        id: 9,
        weapon: 5,
        rarity: 0
    }, {
        name: "Arctic Slug",
        id: 0,
        weapon: 6,
        rarity: 1
    }, {
        name: "Autumn Slug",
        id: 1,
        weapon: 6,
        rarity: 1
    }, {
        name: "Blaze Slug",
        id: 2,
        weapon: 6,
        rarity: 2
    }, {
        name: "Digital Slug",
        id: 3,
        weapon: 6,
        rarity: 0
    }, {
        name: "Flecken Slug",
        id: 4,
        weapon: 6,
        rarity: 1
    }, {
        name: "Woodland Slug",
        id: 5,
        weapon: 6,
        rarity: 0
    }, {
        name: "Hazard Slug",
        id: 6,
        weapon: 6,
        rarity: 1
    }, {
        name: "Kodac Slug",
        id: 7,
        weapon: 6,
        rarity: 1
    }, {
        name: "Seafarer Slug",
        id: 8,
        weapon: 6,
        rarity: 0
    }, {
        name: "Trail Slug",
        id: 9,
        weapon: 6,
        rarity: 0
    }, {
        name: "Arctic LMG",
        id: 0,
        weapon: 7,
        rarity: 1
    }, {
        name: "Autumn LMG",
        id: 1,
        weapon: 7,
        rarity: 1
    }, {
        name: "Blaze LMG",
        id: 2,
        weapon: 7,
        rarity: 2
    }, {
        name: "Digital LMG",
        id: 3,
        weapon: 7,
        rarity: 0
    }, {
        name: "Flecken LMG",
        id: 4,
        weapon: 7,
        rarity: 1
    }, {
        name: "Woodland LMG",
        id: 5,
        weapon: 7,
        rarity: 0
    }, {
        name: "Hazard LMG",
        id: 6,
        weapon: 7,
        rarity: 1
    }, {
        name: "Kodac LMG",
        id: 7,
        weapon: 7,
        rarity: 1
    }, {
        name: "Seafarer LMG",
        id: 8,
        weapon: 7,
        rarity: 0
    }, {
        name: "Trail LMG",
        id: 9,
        weapon: 7,
        rarity: 0
    }, {
        name: "Arctic Auto",
        id: 0,
        weapon: 8,
        rarity: 1
    }, {
        name: "Autumn Auto",
        id: 1,
        weapon: 8,
        rarity: 1
    }, {
        name: "Blaze Auto",
        id: 2,
        weapon: 8,
        rarity: 2
    }, {
        name: "Digital Auto",
        id: 3,
        weapon: 8,
        rarity: 0
    }, {
        name: "Flecken Auto",
        id: 4,
        weapon: 8,
        rarity: 1
    }, {
        name: "Woodland Auto",
        id: 5,
        weapon: 8,
        rarity: 0
    }, {
        name: "Hazard Auto",
        id: 6,
        weapon: 8,
        rarity: 1
    }, {
        name: "Kodac Auto",
        id: 7,
        weapon: 8,
        rarity: 1
    }, {
        name: "Seafarer Auto",
        id: 8,
        weapon: 8,
        rarity: 0
    }, {
        name: "Trail Auto",
        id: 9,
        weapon: 8,
        rarity: 0
    }, {
        name: "Mach Auto",
        id: 10,
        creator: "AtarSt",
        weapon: 8,
        rarity: 1
    }, {
        name: "Arctic RL",
        id: 0,
        weapon: 9,
        rarity: 1
    }, {
        name: "Autumn RL",
        id: 1,
        weapon: 9,
        rarity: 1
    }, {
        name: "Blaze RL",
        id: 2,
        weapon: 9,
        rarity: 2
    }, {
        name: "Digital RL",
        id: 3,
        weapon: 9,
        rarity: 0
    }, {
        name: "Flecken RL",
        id: 4,
        weapon: 9,
        rarity: 1
    }, {
        name: "Woodland RL",
        id: 5,
        weapon: 9,
        rarity: 0
    }, {
        name: "Hazard RL",
        id: 6,
        weapon: 9,
        rarity: 1
    }, {
        name: "Kodac RL",
        id: 7,
        weapon: 9,
        rarity: 1
    }, {
        name: "Seafarer RL",
        id: 8,
        weapon: 9,
        rarity: 0
    }, {
        name: "Trail RL",
        id: 9,
        weapon: 9,
        rarity: 0
    }, {
        name: "101 Skullbreaker",
        id: 12,
        weapon: 1,
        rarity: 4
    }, {
        name: "Reticle Faded",
        id: 13,
        weapon: 1,
        rarity: 0
    }, {
        name: "Puma Sniper",
        id: 14,
        weapon: 1,
        rarity: 1
    }, {
        name: "Scoped Elite",
        id: 15,
        weapon: 1,
        rarity: 3
    }, {
        name: "Faded AK",
        id: 11,
        weapon: 2,
        rarity: 0
    }, {
        name: "Puma AR",
        id: 12,
        weapon: 2,
        rarity: 1
    }, {
        name: "Faded SMG",
        id: 10,
        weapon: 4,
        rarity: 0
    }, {
        name: "Puma SMG",
        id: 11,
        weapon: 4,
        rarity: 1
    }, {
        name: "Faded Python",
        id: 10,
        weapon: 5,
        rarity: 0
    }, {
        name: "Puma Python",
        id: 11,
        weapon: 5,
        rarity: 1
    }, {
        name: "Faded Slug",
        id: 10,
        weapon: 6,
        rarity: 0
    }, {
        name: "Puma Slug",
        id: 11,
        weapon: 6,
        rarity: 1
    }, {
        name: "Faded LMG",
        id: 10,
        weapon: 7,
        rarity: 0
    }, {
        name: "Puma LMG",
        id: 11,
        weapon: 7,
        rarity: 1
    }, {
        name: "Faded MMR",
        id: 11,
        weapon: 8,
        rarity: 0
    }, {
        name: "Puma MMR",
        id: 12,
        weapon: 8,
        rarity: 1
    }, {
        name: "Faded RTL",
        id: 10,
        weapon: 9,
        rarity: 0
    }, {
        name: "Puma RTL",
        id: 11,
        weapon: 9,
        rarity: 1
    }, {
        name: "Scoped Carbon",
        id: 16,
        weapon: 1,
        rarity: 0
    }, {
        name: "Carbon AK",
        id: 13,
        weapon: 2,
        rarity: 0
    }, {
        name: "Carbon SMG",
        id: 12,
        weapon: 4,
        rarity: 0
    }, {
        name: "Carbon Python",
        id: 12,
        weapon: 5,
        rarity: 0
    }, {
        name: "Carbon Slug",
        id: 12,
        weapon: 6,
        rarity: 0
    }, {
        name: "Carbon LMG",
        id: 12,
        weapon: 7,
        rarity: 0
    }, {
        name: "Carbon MMR",
        id: 13,
        weapon: 8,
        rarity: 0
    }, {
        name: "Carbon RTL",
        id: 12,
        weapon: 9,
        rarity: 0
    }, {
        name: "Neon Ripper",
        id: 14,
        glow: !0,
        weapon: 2,
        rarity: 4
    }, {
        name: "Top Hat",
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -4,
        id: 1,
        rarity: 2
    }, {
        name: "SMG Spitfire",
        id: 13,
        weapon: 4,
        rarity: 3
    }, {
        name: "Cowboy Hat",
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        id: 0,
        rarity: 0
    }, {
        name: "Flame Tamer",
        id: 13,
        weapon: 5,
        glow: !0,
        rarity: 4
    }, {
        name: "Cool Cap",
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        id: 2,
        rarity: 1
    }, {
        name: "Jack O' Lantern",
        type: 1,
        scl: 2.8,
        glow: !0,
        sclMlt: 1.4,
        sitOff: 2.05,
        yOff: -4,
        id: 3,
        rarity: 3
    }, {
        name: "Medic Helmet",
        type: 1,
        scl: 2.8,
        sclMlt: 1,
        sitOff: .65,
        yOff: -2.5,
        id: 4,
        rarity: 2
    }, {
        name: "Neon Reaver",
        creator: "Electrode_",
        id: 17,
        glow: !0,
        weapon: 1,
        rarity: 4
    }, {
        name: "Sun Glasses",
        type: 1,
        scl: 2.8,
        sclMlt: 1,
        sitOff: 2.3,
        yOff: -5,
        xOff: 2,
        id: 5,
        rarity: 0
    }, {
        name: "Afro",
        type: 1,
        scl: 2,
        sclMlt: .9,
        sitOff: 1.4,
        yOff: -4,
        id: 6,
        rarity: 0
    }, {
        name: "Hard Hat",
        type: 1,
        scl: 3,
        sitOff: .4,
        yOff: -3,
        id: 7,
        rarity: 0
    }, {
        name: "Zombie Head",
        type: 1,
        scl: 2.8,
        glow: !0,
        sclMlt: 1.2,
        sitOff: 2.05,
        yOff: -4,
        id: 8,
        rarity: 3
    }, {
        name: "Barbed Rifle",
        id: 18,
        weapon: 1,
        rarity: 2
    }, {
        name: "Blushed Sniper",
        id: 19,
        weapon: 1,
        rarity: 0
    }, {
        name: "AWP Mech",
        id: 20,
        weapon: 1,
        rarity: 1
    }, {
        name: "Olympus Rifle",
        id: 21,
        weapon: 1,
        rarity: 2
    }, {
        name: "Scoped Tuscan",
        id: 22,
        weapon: 1,
        rarity: 1
    }, {
        name: "AWP Pacemaker",
        id: 23,
        weapon: 1,
        rarity: 4,
        glow: !0
    }, {
        name: "AR Wired",
        id: 15,
        weapon: 2,
        rarity: 2
    }, {
        name: "Blushed AK",
        id: 16,
        weapon: 2,
        rarity: 0
    }, {
        name: "Mach Rifle",
        id: 17,
        weapon: 2,
        rarity: 1
    }, {
        name: "Olympus Rifle",
        id: 18,
        weapon: 2,
        rarity: 2
    }, {
        name: "AR Tuscan",
        id: 19,
        weapon: 2,
        rarity: 1
    }, {
        name: "Barbed MG",
        id: 14,
        weapon: 4,
        rarity: 2
    }, {
        name: "Blushed SMG",
        id: 15,
        weapon: 4,
        rarity: 0
    }, {
        name: "Machinist SMG",
        id: 16,
        weapon: 4,
        rarity: 1
    }, {
        name: "Olympus MG",
        id: 17,
        weapon: 4,
        rarity: 2
    }, {
        name: "Tuscan SMG",
        id: 18,
        weapon: 4,
        rarity: 1
    }, {
        name: "Barbed Python",
        id: 14,
        weapon: 5,
        rarity: 2
    }, {
        name: "Blushed Revolver",
        id: 15,
        weapon: 5,
        rarity: 0
    }, {
        name: "Machinist Python",
        id: 16,
        weapon: 5,
        rarity: 1
    }, {
        name: "REV Olympus",
        id: 17,
        weapon: 5,
        rarity: 2
    }, {
        name: "Tuscan Revolver",
        id: 18,
        weapon: 5,
        rarity: 1
    }, {
        name: "Barbed Slugger",
        id: 13,
        weapon: 6,
        rarity: 2
    }, {
        name: "Blushed Shotty",
        id: 14,
        weapon: 6,
        rarity: 0
    }, {
        name: "Machinist Shotty",
        id: 15,
        weapon: 6,
        rarity: 1
    }, {
        name: "Olympus Slug",
        id: 16,
        weapon: 6,
        rarity: 2
    }, {
        name: "Tuscan Slug",
        id: 17,
        weapon: 6,
        rarity: 1
    }, {
        name: "Blushed LMG",
        id: 13,
        weapon: 7,
        rarity: 0
    }, {
        name: "Machinist LMG",
        id: 14,
        weapon: 7,
        rarity: 1
    }, {
        name: "Olympus LMG",
        id: 15,
        weapon: 7,
        rarity: 2
    }, {
        name: "Tuscan LMG",
        id: 16,
        weapon: 7,
        rarity: 1
    }, {
        name: "Barbed Auto",
        id: 14,
        weapon: 8,
        rarity: 2
    }, {
        name: "Blushed MMA",
        id: 15,
        weapon: 8,
        rarity: 0
    }, {
        name: "Auto Machinist",
        id: 16,
        weapon: 8,
        rarity: 1
    }, {
        name: "Olympus MMA",
        id: 17,
        weapon: 8,
        rarity: 2
    }, {
        name: "Tuscan MMA",
        id: 18,
        weapon: 8,
        rarity: 1
    }, {
        name: "Barbed Laucher",
        id: 13,
        weapon: 9,
        rarity: 2
    }, {
        name: "Blushed Laucher",
        id: 14,
        weapon: 9,
        rarity: 0
    }, {
        name: "Machinist Laucher",
        id: 15,
        weapon: 9,
        rarity: 1
    }, {
        name: "Olympus Laucher",
        id: 16,
        weapon: 9,
        rarity: 2
    }, {
        name: "Tuscan Laucher",
        id: 17,
        weapon: 9,
        rarity: 1
    }, {
        name: "AWP Paranoya",
        id: 24,
        creator: "Cowboy",
        weapon: 1,
        rarity: 3
    }, {
        name: "Scoped Moss",
        id: 25,
        weapon: 1,
        rarity: 1
    }, {
        name: "Swamped Scope",
        id: 26,
        weapon: 1,
        rarity: 0
    }, {
        name: "Tiger Bolt",
        id: 27,
        weapon: 1,
        rarity: 2
    }, {
        name: "Zebra Bolt",
        id: 28,
        weapon: 1,
        rarity: 2
    }, {
        name: "Plasma Bolt",
        id: 29,
        weapon: 1,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Bolt",
        id: 30,
        weapon: 1,
        rarity: 3
    }, {
        name: "Sky Bolt",
        id: 31,
        weapon: 1,
        rarity: 2
    }, {
        name: "Bark Bolt",
        id: 32,
        weapon: 1,
        rarity: 0
    }, {
        name: "Bolt Wanderer",
        id: 33,
        weapon: 1,
        rarity: 0
    }, {
        name: "Mossy Rifle",
        id: 20,
        weapon: 2,
        rarity: 1
    }, {
        name: "Swamped AK",
        id: 21,
        weapon: 2,
        rarity: 0
    }, {
        name: "Tiger Rifle",
        id: 22,
        weapon: 2,
        rarity: 2
    }, {
        name: "Zebra Rifle",
        id: 23,
        weapon: 2,
        rarity: 2
    }, {
        name: "Plasma Rifle",
        id: 24,
        weapon: 2,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Rifle",
        id: 25,
        weapon: 2,
        rarity: 3
    }, {
        name: "Sky Rifle",
        id: 26,
        weapon: 2,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark AK",
        id: 27,
        weapon: 2,
        rarity: 0
    }, {
        name: "Rifle Wanderer",
        id: 28,
        weapon: 2,
        rarity: 0
    }, {
        name: "Mossy SMG",
        id: 19,
        weapon: 4,
        rarity: 1
    }, {
        name: "Swamped SMG",
        id: 20,
        weapon: 4,
        rarity: 0
    }, {
        name: "Tiger SMG",
        id: 21,
        weapon: 4,
        rarity: 2
    }, {
        name: "Zebra SMG",
        id: 22,
        weapon: 4,
        rarity: 2
    }, {
        name: "Rapid Plasma",
        id: 23,
        weapon: 4,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava SMG",
        id: 24,
        weapon: 4,
        rarity: 3
    }, {
        name: "Sky SMG",
        id: 25,
        weapon: 4,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark SMG",
        id: 26,
        weapon: 4,
        rarity: 0
    }, {
        name: "Wanderer SMG",
        id: 27,
        weapon: 4,
        rarity: 0
    }, {
        name: "Mossy Python",
        id: 19,
        weapon: 5,
        rarity: 1
    }, {
        name: "Swamped Revolver",
        id: 20,
        weapon: 5,
        rarity: 0
    }, {
        name: "Tiger Python",
        id: 21,
        weapon: 5,
        rarity: 2
    }, {
        name: "Zebra Python",
        id: 22,
        weapon: 5,
        rarity: 2
    }, {
        name: "Plasma Python",
        id: 23,
        weapon: 5,
        rarity: 4
    }, {
        name: "Lava Revolver",
        id: 24,
        weapon: 5,
        rarity: 3
    }, {
        name: "Sky Python",
        id: 25,
        weapon: 5,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark Python",
        id: 26,
        weapon: 5,
        rarity: 0
    }, {
        name: "Wanderer Python",
        id: 27,
        weapon: 5,
        rarity: 0
    }, {
        name: "Mossy Barrel",
        id: 19,
        weapon: 6,
        rarity: 1
    }, {
        name: "Swamped Shotgun",
        id: 20,
        weapon: 6,
        rarity: 0
    }, {
        name: "Tiger Slug",
        id: 21,
        weapon: 6,
        rarity: 2
    }, {
        name: "Zebra Slug",
        id: 22,
        weapon: 6,
        rarity: 2
    }, {
        name: "Plasma Slug",
        id: 23,
        weapon: 6,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Slug",
        id: 24,
        weapon: 6,
        rarity: 3
    }, {
        name: "Sky Pump",
        id: 25,
        weapon: 6,
        rarity: 2
    }, {
        name: "Bark Slug",
        id: 26,
        weapon: 6,
        rarity: 0
    }, {
        name: "Slug Wanderer",
        id: 27,
        weapon: 6,
        rarity: 0
    }, {
        name: "Mossy LMG",
        id: 17,
        weapon: 7,
        rarity: 1
    }, {
        name: "Swamped LMG",
        id: 18,
        weapon: 7,
        rarity: 0
    }, {
        name: "Tiger LMG",
        id: 19,
        weapon: 7,
        rarity: 2
    }, {
        name: "Zebra LMG",
        id: 20,
        weapon: 7,
        rarity: 2
    }, {
        name: "Heavy Plasma",
        id: 21,
        weapon: 7,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava LMG",
        id: 22,
        weapon: 7,
        rarity: 3
    }, {
        name: "Sky LMG",
        id: 23,
        weapon: 7,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark LMG",
        id: 24,
        weapon: 7,
        rarity: 0
    }, {
        name: "LMG Wanderer",
        id: 25,
        weapon: 7,
        rarity: 0
    }, {
        name: "Mossy MMA",
        id: 19,
        weapon: 8,
        rarity: 1
    }, {
        name: "Swamped AUTO",
        id: 20,
        weapon: 8,
        rarity: 0
    }, {
        name: "Tiger MMA",
        id: 21,
        weapon: 8,
        rarity: 2
    }, {
        name: "Zebra MMA",
        id: 22,
        weapon: 8,
        rarity: 2
    }, {
        name: "MMA Plasma",
        id: 23,
        weapon: 8,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava MMA",
        id: 24,
        weapon: 8,
        rarity: 3
    }, {
        name: "Sky AUTO",
        id: 25,
        weapon: 8,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark AUTO",
        id: 26,
        weapon: 8,
        rarity: 0
    }, {
        name: "MMA Wanderer",
        id: 27,
        weapon: 8,
        rarity: 0
    }, {
        name: "Mossy Rockets",
        id: 18,
        weapon: 9,
        rarity: 1
    }, {
        name: "Swamped Laucher",
        id: 19,
        weapon: 9,
        rarity: 0
    }, {
        name: "Tiger Rockets",
        id: 20,
        weapon: 9,
        rarity: 2
    }, {
        name: "Zebra Laucher",
        id: 21,
        weapon: 9,
        rarity: 2
    }, {
        name: "Plasma Nuke",
        id: 22,
        weapon: 9,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Rocket",
        id: 23,
        weapon: 9,
        rarity: 3
    }, {
        name: "Sky Laucher",
        id: 24,
        weapon: 9,
        rarity: 2
    }, {
        name: "Bark Laucher",
        id: 25,
        weapon: 9,
        rarity: 0
    }, {
        name: "Wanderer Rocket",
        id: 26,
        weapon: 9,
        rarity: 0
    }, {
        name: "Purple Cap",
        id: 2,
        tex: 1,
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        rarity: 0
    }, {
        name: "Bear Mask",
        id: 9,
        type: 1,
        scl: 2.5,
        sclMlt: 1.3,
        sitOff: 2.05,
        yOff: -4,
        xOff: 1,
        rarity: 2
    }, {
        name: "Panda Mask",
        id: 9,
        tex: 1,
        type: 1,
        scl: 2.5,
        sclMlt: 1.3,
        sitOff: 2.05,
        yOff: -4,
        xOff: 1,
        rarity: 2
    }, {
        name: "Brown Beard",
        id: 11,
        type: 1,
        scl: 2.8,
        sclMlt: .9,
        sitOff: 2,
        yOff: -3,
        rarity: 2
    }, {
        name: "Blonde Beard",
        id: 11,
        tex: 1,
        type: 1,
        scl: 2.8,
        sclMlt: .9,
        sitOff: 2,
        yOff: -3,
        rarity: 2
    }, {
        name: "Skull Mask",
        id: 12,
        type: 1,
        scl: 3,
        glow: !0,
        sclMlt: 1.05,
        sitOff: 2.5,
        sitOffZ: 1.1,
        yOff: -4.2,
        xOff: -3,
        tex: 0,
        rarity: 3
    }, {
        name: "Red Beanie",
        id: 13,
        type: 1,
        scl: 3,
        sclMlt: 1.1,
        sitOff: .4,
        yOff: -3,
        tex: 0,
        rarity: 0
    }, {
        name: "Blue Beanie",
        id: 13,
        type: 1,
        scl: 3,
        sclMlt: 1.1,
        sitOff: .4,
        yOff: -3,
        tex: 1,
        rarity: 0
    }, {
        name: "Krunk Headset",
        id: 14,
        type: 1,
        scl: 2,
        sclMlt: .9,
        sitOff: 1.4,
        yOff: -4,
        rarity: 2
    }, {
        name: "Cherry Headset",
        id: 14,
        type: 1,
        tex: 1,
        scl: 2,
        sclMlt: 1.1,
        sitOff: 1.4,
        yOff: -4,
        rarity: 2
    }, {
        name: "Demonic Wings",
        id: 0,
        type: 2,
        glow: !0,
        scl: 3.5,
        sclMlt: 3,
        xOff: -1.5,
        sitOff: -1.3,
        sitOffZ: -1.4,
        yOff: -2,
        rarity: 4
    }, {
        name: "Bass Guitar",
        id: 1,
        type: 2,
        scl: 4,
        sclMlt: 3.8,
        sitOff: -1.3,
        sitOffZ: -1,
        yOff: -2,
        rarity: 2
    }, {
        name: "Samurai Blades",
        id: 2,
        type: 2,
        glow: !0,
        scl: 4.5,
        sclMlt: 3.8,
        sitOff: -1.3,
        sitOffZ: -.95,
        yOff: -1,
        xOff: -.5,
        rarity: 3
    }, {
        name: "Blood Harvest",
        id: 3,
        type: 2,
        glow: !0,
        scl: 4.8,
        sclMlt: 5,
        sitOff: -1.3,
        sitOffZ: -.95,
        yOff: -2,
        rarity: 3
    }]
}, function(t, e, n) {
    var i = n(8),
        r = n(3),
        a = n(1);
    t.exports.validMap = function(t, e) {
        if (!r.isString(t.name) || !t.name.replace(/\s/g, "").length) return "Missing map name.";
        if (-1 !== t.name.indexOf("<") || -1 !== t.name.indexOf(">")) return "Illegal characters in map name.";
        if (t.name.length > 16) return "Map name too long.";
        if (!r.isArray(t.spawns) || !t.spawns.length) return "Missing spawn points.";
        if (t.spawns.length > a.spawnLimit) return "Too many spawn points.";
        for (var n = 0; n < t.spawns.length; ++n) {
            var i = t.spawns[n];
            if (!r.isArray(i) || !i.length || 3 != i.length && 4 != i.length) return "Spawn point error.";
            for (var o = 0; o < i.length; ++o) {
                if (o < 3 && !r.isNumber(i[o])) return "Spawn point error.";
                if (3 == o && void 0 == i[o] && 1 == i[o] && 2 == i[o]) return "Spawn team error."
            }
        }
        if (!r.isArray(t.objects) || !t.objects.length) return "Missing objects.";
        if (t.objects.length > (e ? a.objectLimitF : a.objectLimit)) return "Map exceeds object limit.";
        for (n = 0; n < t.objects.length; ++n) {
            var s = t.objects[n];
            if (!r.isArray(s.s) || 3 != s.s.length || !r.arrayInts(s.s)) return "Object scale error.";
            if (!r.isArray(s.p) || 3 != s.p.length || !r.arrayInts(s.p)) return "Object position error.";
            if (r.isArray(s.r)) {
                if (3 != s.r.length || !r.arrayInts(s.r)) return "Object rotation value error."
            } else if (void 0 != s.r) return "Object rotation error.";
            if (void 0 != s.d && !r.isNumber(s.d)) return "Object direction error.";
            s.col = !!s.col
        }
        return null
    }, t.exports.obj = function(e, o, s, c, l, h, u) {
        var p, d;
        this.index = e, this.connectedClients = 0, this.password = void 0, this.map = new i.manager(s, l, r, a), this.store = n(61), this.weapons = n(33), this.classes = n(32), this.sprays = n(60), this.projectiles = new(n(59))(this, h), this.players = new(n(31).manager)(this, s, c, l, r, a, h), this.endData = [], this.banList = [], this.applyConfig = function(t, e) {
            t = t || {}, this.config = {};
            for (var n = 0; n < a.serverConfig.length; ++n) {
                var i = a.serverConfig[n];
                if (i.bool) this.config[i.varN] = !!t[i.varN];
                else {
                    var o = t[i.varN];
                    r.isNumber(o) || (o = i.def), this.config[i.varN] = r.limitMM(o, i.min, e && i.maxF || i.max)
                }
            }
            if (this.config.maps = t.maps, !r.isArray(this.config.maps) || !this.config.maps.length || this.config.maps.length > this.map.maps.length)
                for (this.config.maps = [], n = 0; n < this.map.maps.length; n++) this.config.maps.push(n);
            else
                for (n = 0; n < this.config.maps.length; n++)
                    if (!this.map.maps[this.config.maps[n]]) {
                        this.config.maps = [0];
                        break
                    } if (this.config.modes = t.modes, !r.isArray(this.config.modes) || !this.config.modes.length || this.config.modes.length > this.map.modes.length) this.config.modes = null;
            else
                for (n = 0; n < this.config.modes.length; n++)
                    if (!this.map.modes[this.config.modes[n]]) {
                        this.config.modes = null;
                        break
                    } var s = !1;
            if (this.config.classes = t.classes, !r.isArray(this.config.classes) || !this.config.classes.length || this.config.classes.length > this.classes.length) s = !0;
            else
                for (n = 0; n < this.config.classes.length; n++)
                    if (!this.classes[this.config.classes[n]]) {
                        s = !0;
                        break
                    } if (s)
                for (this.config.classes = [], n = 0; n < this.classes.length; n++) this.config.classes.push(n)
        }, this.applyConfig(), this.getInfo = function() {
            return this.mode.alias + "_" + this.map.maps[this.mapIndex].name
        }, this.customMap = function(e, n, i, r, o) {
            if (e) try {
                var s = JSON.parse(e);
                if (h && (this.customMapData = {
                        data: e,
                        id: n,
                        featured: r,
                        creator: i
                    }), !o) {
                    var c = t.exports.validMap(s, r);
                    if (c) return c
                }
                for (var l = 0; l < s.objects.length; ++l) {
                    if (s.objects[l].id = a.prefabIDS[s.objects[l].id || 0], !s.objects[l].id) return "Object ID error.";
                    if (s.objects[l].t = a.textureIDS[s.objects[l].t || 0], !s.objects[l].t) return "Object Texture error."
                }
                s.creator = i, this.map.setMaps([s]), this.config.maps = [0]
            } catch (t) {
                return "Map error occured."
            }
        }, this.playSound = function(t, e, n, i, r) {
            if (c) c.play(t, e, !1, r);
            else
                for (var a = 0; a < this.players.list.length; ++a)(p = this.players.list[a]).active && (n != p || i) && h.send(p.id, "s", t, n.sid)
        }, this.playerSound = function(t, e, n, i, r) {
            (p = i || this.players.findBySid(e)) && c.play3D(t, p.x, p.y, p.z, n || 1, r)
        }, this.explosion = function(t, e, n, i, a, o) {
            for (var s = 0; s < this.players.list.length; ++s)
                if ((p = this.players.list[s]).active) {
                    h.send(p.id, "ex", Math.round(t), Math.round(e), Math.round(n), Math.round(i));
                    var c = r.getDistance3D(t, e, n, p.x, p.y, p.z),
                        l = 1 - c / i;
                    l > 0 && this.players.changeHealth(p, o, a * l, o == p) && this.players.kill(p, o, {
                        dst: c
                    })
                }
        };
        var f = [];
        this.getSpawnPoint = function(t, e) {
            if (e) return this.map.spawns[0];
            f.length = 0;
            for (var n, i = 0; i < this.map.spawns.length; ++i) {
                this.map.spawns[i].dst = 0;
                for (var o = 0; o < this.players.list.length; ++o) !(p = this.players.list[o]).active || t && p.team == t || this.canSee(p, this.map.spawns[i].x, this.map.spawns[i].y + a.playerHeight, this.map.spawns[i].z) || this.map.spawns[i].dst++
            }
            for (this.map.spawns.sort(r.orderByDst), n = this.map.spawns[0].dst, i = 0; i < this.map.spawns.length; ++i)
                if (this.map.spawns[i].dst == n) {
                    for (this.map.spawns[i].dst = 0, o = 0; o < this.players.list.length; ++o) !(p = this.players.list[o]).active || t && p.team == t || (this.map.spawns[i].dst += r.getDistance3D(this.map.spawns[i].x, this.map.spawns[i].y, this.map.spawns[i].z, p.x, p.y, p.z));
                    (t && this.map.spawns[i].team == t || !this.map.spawns[i].team) && f.push(this.map.spawns[i])
                } return f.sort(r.orderByDst), f.reverse(), f[0] || this.map.spawns[0]
        }, this.canSee = function(t, e, n, i, o) {
            o = o || 0;
            for (var s = r.getDistance3D(t.x, t.y, t.z, e, n, i), c = r.getDirection(t.z, t.x, i, e), l = r.getDirection(r.getDistance(t.x, t.z, e, i), n, 0, t.y), h = 1 / (s * Math.sin(c - Math.PI) * Math.cos(l)), u = 1 / (s * Math.cos(c - Math.PI) * Math.cos(l)), p = 1 / (s * Math.sin(l)), d = 0; d < this.map.manager.objects.length; ++d) {
                var f = this.map.manager.objects[d];
                if (!f.noShoot) {
                    var m = r.lineInRect(t.x, t.z, t.y + t.height - a.cameraHeight, h, u, p, f.x - Math.max(0, f.width - o), f.z - Math.max(0, f.length - o), f.y - Math.max(0, f.height - o), f.x + Math.max(0, f.width - o), f.z + Math.max(0, f.length - o), f.y + Math.max(0, f.height - o));
                    if (m && m < 1) return m
                }
            }
            return null
        }, this.updateAccounts = function() {
            for (var t = 0; t < this.players.list.length; ++t)(p = this.players.list[t]).account && (p.account.timePlayed += p.playTime || 0, void 0 == this.host && (p.account.games++, p.account.kills += p.kills, p.account.deaths += p.deaths, p.account.score += p.score, p.didWin && p.account.wins++), h.send(p.id, "ua", p.account.getData()), this.addFunds(p, p.reward))
        }, this.addFunds = function(t, e) {
            t.account && e && o.call(20, [t.account.id, e], function(e, n) {
                if (t && t.account && !e && n && n[0] && n[0][0]) {
                    var i = n[0][0].funds;
                    null != i && void 0 != i && (t.account.funds = i, h.send(t.id, "uf", i))
                }
            })
        }, this.savePlayerData = function(t) {
            if (o && t.account) {
                var e = t.account;
                o.call(2, [e.id, e.kills, e.wins, e.games, e.deaths, e.score, e.clan, e.timePlayed])
            }
        }, this.lockPlayer = function(t, e) {
            t.locked = e, h.send(p.id, "lock", e)
        }, this.updateTeam = function(t, e) {
            t.team = e;
            for (var n = 0; n < t.sentTo.length; ++n) h.send(t.sentTo[n], "tm", t.sid, e);
            this.players.syncLeaders()
        }, this.infectRandom = function() {
            m.length = 0;
            for (var t = 0; t < this.players.list.length; ++t) this.players.list[t].active && m.push(t);
            var e = 1;
            for (m.length >= 14 ? e = 3 : m.length >= 8 && (e = 2), t = 0; t < e; ++t) {
                var n = r.randInt(0, m.length - 1);
                (p = this.players.list[m[n]]) && (this.players.kill(p, null, null, !0), h.broadcast("game" + this.sid, "ac", p.sid, null, "got infected")), m.splice(n, 1)
            }
        }, this.pickBoss = function() {
            m.length = 0;
            for (var t = 0; t < this.players.list.length; ++t) this.players.list[t].active && m.push(t);
            (p = this.players.list[m[r.randInt(0, m.length - 1)]]) && (this.updateTeam(p, "boss"), p.maxHealth = 5e3, p.health = p.maxHealth, h.send(p.id, "h", p.health))
        };
        var m = [];
        this.pickSeeker = function() {
            m.length = 0;
            for (var t = 0; t < this.players.list.length; ++t) this.players.list[t].active && m.push(t);
            (p = this.players.list[m[r.randInt(0, m.length - 1)]]) && (this.updateTeam(p, "seek"), this.lockPlayer(p, !0))
        }, this.releaseSeeker = function() {
            for (var t = 0; t < this.players.list.length; ++t) "seek" == (p = this.players.list[t]).team && this.lockPlayer(p, !1)
        }, this.updateUI = function() {
            killCount.style.display = this.mode.friendly ? "none" : "inline-block"
        }, this.init = function(t, e, n) {
            if (this.players.clear(), this.mapIndex = void 0 != t ? t : this.config.maps[r.randInt(0, this.config.maps.length - 1)], this.modeIndex = void 0 != e ? e : this.config.modes ? this.config.modes[r.randInt(0, this.config.modes.length - 1)] : i.mapModes[this.mapIndex][r.randInt(0, i.mapModes[this.mapIndex].length - 1)], this.mode = i.modes[this.modeIndex], this.map.generate(this.mapIndex, this.mode, n), h && this.mode.gameStart && this.mode.gameStart(this), this.gameTimer = void 0 != this.mode.gameTime ? this.mode.gameTime : 6e4 * this.config.gameTime, this.lastTimer = 0, this.lastTimerW = 0, this.waitTimers = null, this.mode.waitTimers) {
                this.waitTimers = [];
                for (var o = 0; o < this.mode.waitTimers.length; ++o) this.waitTimers.push({
                    time: this.mode.waitTimers[o].time,
                    trigger: this.mode.waitTimers[o].trigger,
                    msg: this.mode.waitTimers[o].msg
                })
            }
            if (this.kills = 0, c && c.play("ambient_1", .12, !0), this.earnKR = !1, void 0 != this.host && !this.private && this.maxPlayers >= a.maxPlayers && this.gameTimer >= 24e4 && !this.mode.noReward) {
                var s = !0;
                for (o = 0; o < a.serverConfig.length; ++o)
                    if (a.serverConfig[o].dontChange && this.config[a.serverConfig[o].varN] != a.serverConfig[o].def) {
                        s = !1;
                        break
                    } var l = 0;
                for (o = 0; o < this.map.manager.objects.length; ++o) this.map.manager.objects[o].score && l++;
                this.earnKR = s && l <= 10
            }
            u && u.updateGameData(this.index, this.maxPlayers, this.private, this.earnKR, this.getInfo())
        }, this.endGame = function() {
            if (this.endTimer = a.endTimer, this.mode.endSort ? this.players.list.sort(this.mode.endSort) : this.players.list.sort(r.orderByScore), void 0 == this.host || this.earnKR)
                for (var t = 0; t < this.players.list.length; ++t)(p = this.players.list[t]).reward = 0, p.account && (p.reward = Math.min(10, Math.floor(p.score / 150)), 0 == t && (p.reward *= 1.5), 1 == t && (p.reward *= 1.2), this.earnKR && (p.reward *= .5), p.reward = Math.floor(p.reward));
            this.endData.length = 0;
            var e = this.mode.endStats || a.endStats;
            for (t = 0; t < this.players.list.length; ++t)
                for (var n = 0; n < e.length; ++n) this.endData.push(a.endForm[e[n]] ? a.endForm[e[n]](this.players.list[t][e[n]], this, this.players.list[t]) : this.players.list[t][e[n]]);
            if (this.mode.winCondition) this.winner = this.mode.winCondition(this);
            else if (this.mode.teams) {
                var i = [];
                for (t = 0; t < this.players.list.length; ++t) i[(p = this.players.list[t]).team] || (i[p.team] = {
                    id: p.team,
                    score: 0
                }), i[p.team].score += p.score;
                var o = [];
                for (var s in i) i.hasOwnProperty(s) && o.push(i[s]);
                o.sort(function(t, e) {
                    return e.score < t.score ? -1 : e.score > t.score ? 1 : 0
                }), this.winner = o[0] ? o[0].id : null
            } else this.winner = this.players.list[0];
            for (t = 0; t < this.players.list.length; ++t)(p = this.players.list[t]).didWin = p.team && p.team == this.winner || p == this.winner, h.send(p.id, "end", !1, p.didWin, this.endData);
            this.updateAccounts(), this.init()
        }, this.update = function(t, e, n) {
            if (this.now = e, h) {
                var i = !0;
                this.endTimer > 0 ? (i = !1, this.endTimer -= t, this.endTimer <= 0 ? (this.endTimer = 0, h.broadcast("game" + this.sid, "init", this.mapIndex, this.modeIndex, this.host, this.config, 0, this.customMapData ? 1 : null)) : (d = r.getTime(this.endTimer)) != this.lastTimer && (this.lastTimer = d, h.broadcast("game" + this.sid, "t", d, 1))) : this.waitTimers && (i = !1, this.mode.minPlayers && this.players.activeCount() < this.mode.minPlayers || (this.waitTimers[0].time -= t, this.waitTimers[0].time <= 0 ? (this.waitTimers[0].trigger && this.waitTimers[0].trigger(this), this.waitTimers.splice(0, 1), this.waitTimers.length || (this.waitTimers = null, h.broadcast("game" + this.sid, "gmsg"))) : (d = r.getTime(this.waitTimers[0].time)) != this.lastTimerW && (this.lastTimerW = d, h.broadcast("game" + this.sid, "gmsg", this.waitTimers[0].msg + d)))), (i || this.waitTimers && this.waitTimers[0].contTime) && (this.mode.condition && !this.mode.condition(this) && (this.gameTimer = "skip"), "skip" != this.gameTimer && this.mode.timed ? (this.gameTimer += t, (d = r.getTime(this.gameTimer)) != this.lastTimer && (this.lastTimer = d, h.broadcast("game" + this.sid, "t", d))) : (this.gameTimer > 0 || "skip" == this.gameTimer) && ("skip" != this.gameTimer && (this.gameTimer -= t), "skip" == this.gameTimer || this.gameTimer <= 0 ? (this.gameTimer = 0, this.endGame()) : (d = r.getTime(this.gameTimer)) != this.lastTimer && (this.lastTimer = d, h.broadcast("game" + this.sid, "t", d))))
            }
            this.players.update(t * this.config.deltaMlt), this.projectiles.update(t * this.config.deltaMlt), l && l.update(t * this.config.deltaMlt, n), s && s.render(t * this.config.deltaMlt)
        }
    }
}, function(t, e) {
    t.exports = function(t, e) {
        var n;
        this.divs = [], this.update = function(t) {
            for (var e = this.divs.length - 1; e >= 0; --e)
                if ((n = this.divs[e]).delay > 0) n.delay -= t, n.delay <= 0 && (n.style.display = "inline-block");
                else {
                    if (n.scale > n.minScale && (n.scale -= n.scaleSpeed * t, n.scale <= n.minScale && (n.scale = n.minScale), n.style.fontSize = n.scale + "px"), n.scaleSpd && (n.startS += n.scaleSpd * t, n.style.width = n.startS + "vh", n.style.height = n.startS + "vh"), n.life -= t, n.life <= 0) {
                        n.style.display = "none";
                        var i = n.callback;
                        this.divs.splice(e, 1), i && i()
                    }
                    n.fade && n.life <= n.fade && (n.style.opacity = n.life / n.fade)
                }
        }, this.animateText = function(t, e, n, i, r, a, o, s) {
            this.divs.indexOf(t) < 0 && this.divs.push(t), t.delay = o, o || (t.style.display = "inline-block"), t.style.fontSize = n + "px", t.scale = n, t.minScale = i ? .4 * n : n, t.innerHTML = e, t.scaleSpeed = i, t.life = r, t.fade = a, t.style.opacity = 1, t.callback = s
        }, this.animateDiv = function(t, e, n, i, r) {
            this.divs.indexOf(t) < 0 && this.divs.push(t), t.style.display = "block", t.life = e, t.maxLife = e, t.style.opacity = 1, t.fade = n, i && (t.style.width = i + "vh", t.style.height = i + "vh", t.startS = i, t.scaleSpd = r)
        }, this.reset = function() {
            for (var t = 0; t < this.divs.length; ++t) this.divs[t].style.display = "none";
            this.divs.length = 0
        }
    }
}, function(t, e) {
    var n = t.exports;
    n.active = !0, n.toggleMenu = function(t) {
        menuHolder.style.display = t ? "block" : "none", speakerDisplay.style.display = t ? "none" : "block", chatHolder.style.bottom = (t ? 20 : 88) + "px", voiceDisplay.style.bottom = (t ? 18 : 84) + "px", t && (endUI.style.display = "none", instructionHolder.style.display = "block"), n.active = !0
    }, n.hideUI = function() {
        n.toggleMenu(!1), inGameUI.style.display = "none", aimRecticle.style.display = "none", instructionHolder.style.display = "none", chatHolder.style.bottom = "20px", voiceDisplay.style.bottom = "18px", speakerDisplay.style.right = "20px", n.active = !1
    }, n.hideDiscon = function() {
        chatHolder.style.display = "none", voiceDisplay.style.display = "none", speakerDisplay.style.display = "none", rightHolder.style.display = "none", followHolder.style.display = "none"
    }, n.showEndScreen = function() {
        endTable.style.display = "none", endUI.style.display = "block", n.hideUI()
    }, n.toggleWindow = function(t) {
        windowHolder.style.display = t ? "block" : "none", instructions.innerHTML = t ? "" : "CLICK TO PLAY"
    }, n.showError = function(t) {
        n.toggleMenu(!0), instructions.innerHTML = t
    }, n.toggleGameUI = function(t) {
        topRight.style.display = t ? "block" : "none", crosshair.style.display = t ? "block" : "none", reloadMsg.style.display = t ? "block" : "none", healthHolder.style.display = t ? "block" : "none", weaponDisplay.style.display = t ? "block" : "none", ammoDisplay.style.display = t ? "block" : "none", killCardHolder.style.display = t ? "none" : "block", speakerDisplay.style.right = (t ? 360 : 20) + "px", chatHolder.style.bottom = (t ? 88 : 20) + "px", voiceDisplay.style.bottom = (t ? 84 : 18) + "px"
    }, n.toggleControlUI = function(t) {
        window.loading && (t = !1), inGameUI.style.display = t && n.active && !n.hideGameUI ? "block" : "none", aimRecticle.style.display = t && n.active ? "block" : "none", instructionHolder.style.display = !t && n.active ? "block" : "none", aHolder.style.display = t ? "none" : "block", toggleAd(!t), infoHolder.style.display = t ? "none" : "block", chatHolder.style.bottom = (t ? 88 : 20) + "px", voiceDisplay.style.bottom = (t ? 84 : 18) + "px", speakerDisplay.style.display = t && n.active ? "block" : "none", "block" != endUI.style.display && (menuHolder.style.display = t ? "none" : "block")
    };
    var i = 0,
        r = 0;
    n.updateCrosshair = function(t, e) {
        i == Math.round(t) && r == e.round(1) || (r = e.round(1), i = Math.round(t), crosshair.style.width = i + "px", crosshair.style.height = i + "px", crosshair.style.opacity = r)
    }
}, function(t, e) {
    t.exports = function(t, e) {
        var n;
        this.sounds = [], this.listener = {}, this.setVolume = function(t) {
            Howler.volume(t)
        }, this.getSound = function(t, e) {
            var i = t + (e || "");
            (n = this.sounds[i]) || (n = new Howl({
                src: ".././sound/" + t + ".mp3"
            }), this.sounds[i] = n)
        }, this.play = function(t, e, i, r) {
            if (this.getSound(t), !i || !n.isPlaying) {
                n.isPlaying = !0;
                var a = n.play();
                n.volume(e || 1, a), n.loop(i, a), n.rate(r || 1, a)
            }
        }, this.stop = function(t) {
            this.getSound(t), n && n.stop()
        }, this.play3D = function(t, i, r, a, o, s, c, l) {
            this.getSound(t, "3d");
            var h = n.play();
            o = (o || 1) * e.otherSoundMlt, n.volume(o, h), n.rate(s || 1, h), n.pos(i, r, a, h), n.pannerAttr({
                refDistance: c || 25,
                rolloffFactor: l || 1
            }, h)
        }
    }
}, function(t, e) {
    t.exports = function(t) {
        t.THREEx = {}, t.THREEx.RendererStats = function() {
            var e = document.createElement("div");
            e.style.cssText = "width:80px;opacity:0.9;cursor:pointer";
            var n = document.createElement("div");
            n.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#200;", e.appendChild(n);
            var i = document.createElement("div");
            i.style.cssText = "color:#f00;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px", i.innerHTML = "WebGLRenderer", n.appendChild(i);
            var r = [];
            for (i = 0; 9 > i; i++) r[i] = document.createElement("div"), r[i].style.cssText = "color:#f00;background-color:#311;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px", n.appendChild(r[i]), r[i].innerHTML = "-";
            var a = Date.now();
            return {
                domElement: e,
                update: function(e) {
                    if (console.assert(e instanceof t.WebGLRenderer), !(Date.now() - a < 1e3 / 30)) {
                        a = Date.now();
                        var n = 0;
                        r[n++].textContent = "== Memory =====", r[n++].textContent = "Programs: " + e.info.memory.programs, r[n++].textContent = "Geometries: " + e.info.memory.geometries, r[n++].textContent = "Textures: " + e.info.memory.textures, r[n++].textContent = "== Render =====", r[n++].textContent = "Calls: " + e.info.render.calls, r[n++].textContent = "Vertices: " + e.info.render.vertices, r[n++].textContent = "Faces: " + e.info.render.faces, r[n++].textContent = "Points: " + e.info.render.points
                    }
                }
            }
        }, t.SSAOShader = {
            uniforms: {
                tDiffuse: {
                    value: null
                },
                tDepth: {
                    value: null
                },
                size: {
                    value: new t.Vector2(64, 64)
                },
                cameraNear: {
                    value: 1
                },
                cameraFar: {
                    value: 100
                },
                radius: {
                    value: 40
                },
                onlyAO: {
                    value: 0
                },
                aoClamp: {
                    value: 1
                },
                lumInfluence: {
                    value: .7
                }
            },
            vertexShader: "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "uniform float cameraNear;\nuniform float cameraFar;\n#ifdef USE_LOGDEPTHBUF\nuniform float logDepthBufFC;\n#endif\nuniform float radius;\nuniform bool onlyAO;\nuniform vec2 size;\nuniform float aoClamp;\nuniform float lumInfluence;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDepth;\nvarying vec2 vUv;\n#define DL 2.399963229728653\n#define EULER 2.718281828459045\nconst int samples = 8;\nconst bool useNoise = true;\nconst float noiseAmount = 0.0004;\nconst float diffArea = 0.4;\nconst float gDisplace = 0.4;\n#include <packing>\nvec2 rand( const vec2 coord ) {\nvec2 noise;\nif ( useNoise ) {\nfloat nx = dot ( coord, vec2( 12.9898, 78.233 ) );\nfloat ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\nnoise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\n} else {\nfloat ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\nfloat gg = fract( coord.t * ( size.y / 2.0 ) );\nnoise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\n}\nreturn ( noise * 2.0  - 1.0 ) * noiseAmount;\n}\nfloat readDepth( const in vec2 coord ) {\nfloat cameraFarPlusNear = cameraFar + cameraNear;\nfloat cameraFarMinusNear = cameraFar - cameraNear;\nfloat cameraCoef = 2.0 * cameraNear;\n#ifdef USE_LOGDEPTHBUF\nfloat logz = unpackRGBAToDepth( texture2D( tDepth, coord ) );\nfloat w = pow(2.0, (logz / logDepthBufFC)) - 1.0;\nfloat z = (logz / w) + 1.0;\n#else\nfloat z = unpackRGBAToDepth( texture2D( tDepth, coord ) );\n#endif\nreturn cameraCoef / ( cameraFarPlusNear - z * cameraFarMinusNear );\n}\nfloat compareDepths( const in float depth1, const in float depth2, inout int far ) {\nfloat garea = 8.0;\nfloat diff = ( depth1 - depth2 ) * 100.0;\nif ( diff < gDisplace ) {\ngarea = diffArea;\n} else {\nfar = 1;\n}\nfloat dd = diff - gDisplace;\nfloat gauss = pow( EULER, -2.0 * ( dd * dd ) / ( garea * garea ) );\nreturn gauss;\n}\nfloat calcAO( float depth, float dw, float dh ) {\nvec2 vv = vec2( dw, dh );\nvec2 coord1 = vUv + radius * vv;\nvec2 coord2 = vUv - radius * vv;\nfloat temp1 = 0.0;\nfloat temp2 = 0.0;\nint far = 0;\ntemp1 = compareDepths( depth, readDepth( coord1 ), far );\nif ( far > 0 ) {\ntemp2 = compareDepths( readDepth( coord2 ), depth, far );\ntemp1 += ( 1.0 - temp1 ) * temp2;\n}\nreturn temp1;\n}\nvoid main() {\nvec2 noise = rand( vUv );\nfloat depth = readDepth( vUv );\nfloat tt = clamp( depth, aoClamp, 1.0 );\nfloat w = ( 1.0 / size.x ) / tt + ( noise.x * ( 1.0 - noise.x ) );\nfloat h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\nfloat ao = 0.0;\nfloat dz = 1.0 / float( samples );\nfloat l = 0.0;\nfloat z = 1.0 - dz / 2.0;\nfor ( int i = 0; i <= samples; i ++ ) {\nfloat r = sqrt( 1.0 - z );\nfloat pw = cos( l ) * r;\nfloat ph = sin( l ) * r;\nao += calcAO( depth, pw * w, ph * h );\nz = z - dz;\nl = l + DL;\n}\nao /= float( samples );\nao = 1.0 - ao;\nvec3 color = texture2D( tDiffuse, vUv ).rgb;\nvec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\nfloat lum = dot( color.rgb, lumcoeff );\nvec3 luminance = vec3( lum );\nvec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\nif ( onlyAO ) {\nfinal = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\n}\ngl_FragColor = vec4( final, 0.5 );\n}"
        }, t.CopyShader = {
            uniforms: {
                tDiffuse: {
                    value: null
                },
                opacity: {
                    value: 1
                }
            },
            vertexShader: "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"
        }, t.EffectComposer = function(e, n) {
            if (this.renderer = e, void 0 === n) {
                var i = {
                        minFilter: t.LinearFilter,
                        magFilter: t.LinearFilter,
                        format: t.RGBAFormat,
                        stencilBuffer: !1
                    },
                    r = e.getDrawingBufferSize();
                (n = new t.WebGLRenderTarget(r.width, r.height, i)).texture.name = "EffectComposer.rt1"
            }
            this.renderTarget1 = n, this.renderTarget2 = n.clone(), this.renderTarget2.texture.name = "EffectComposer.rt2", this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2, this.passes = [], void 0 === t.CopyShader && console.error("THREE.EffectComposer relies on THREE.CopyShader"), void 0 === t.ShaderPass && console.error("THREE.EffectComposer relies on THREE.ShaderPass"), this.copyPass = new t.ShaderPass(t.CopyShader)
        }, Object.assign(t.EffectComposer.prototype, {
            swapBuffers: function() {
                var t = this.readBuffer;
                this.readBuffer = this.writeBuffer, this.writeBuffer = t
            },
            addPass: function(t) {
                this.passes.push(t);
                var e = this.renderer.getDrawingBufferSize();
                t.setSize(e.width, e.height)
            },
            insertPass: function(t, e) {
                this.passes.splice(e, 0, t)
            },
            render: function(e) {
                var n, i = !1,
                    r = this.passes.length;
                for (n = 0; n < r; n++) {
                    var a = this.passes[n];
                    if (!1 !== a.enabled) {
                        if (a.render(this.renderer, this.writeBuffer, this.readBuffer, e, i), a.needsSwap) {
                            if (i) {
                                var o = this.renderer.context;
                                o.stencilFunc(o.NOTEQUAL, 1, 4294967295), this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, e), o.stencilFunc(o.EQUAL, 1, 4294967295)
                            }
                            this.swapBuffers()
                        }
                        void 0 !== t.MaskPass && (a instanceof t.MaskPass ? i = !0 : a instanceof t.ClearMaskPass && (i = !1))
                    }
                }
            },
            reset: function(t) {
                if (void 0 === t) {
                    var e = this.renderer.getDrawingBufferSize();
                    (t = this.renderTarget1.clone()).setSize(e.width, e.height)
                }
                this.renderTarget1.dispose(), this.renderTarget2.dispose(), this.renderTarget1 = t, this.renderTarget2 = t.clone(), this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2
            },
            setSize: function(t, e) {
                this.renderTarget1.setSize(t, e), this.renderTarget2.setSize(t, e);
                for (var n = 0; n < this.passes.length; n++) this.passes[n].setSize(t, e)
            }
        }), t.Pass = function() {
            this.needsSwap = this.enabled = !0, this.renderToScreen = this.clear = !1
        }, Object.assign(t.Pass.prototype, {
            setSize: function(t, e) {},
            render: function(t, e, n, i, r) {
                console.error("THREE.Pass: .render() must be implemented in derived pass.")
            }
        }), t.RenderPass = function(e, n, i, r, a) {
            t.Pass.call(this), this.scene = e, this.camera = n, this.overrideMaterial = i, this.clearColor = r, this.clearAlpha = void 0 !== a ? a : 0, this.clear = !0, this.needsSwap = this.clearDepth = !1
        }, t.RenderPass.prototype = Object.assign(Object.create(t.Pass.prototype), {
            constructor: t.RenderPass,
            render: function(t, e, n, i, r) {
                if (e = t.autoClear, t.autoClear = !1, this.scene.overrideMaterial = this.overrideMaterial, this.clearColor) {
                    var a = t.getClearColor().getHex(),
                        o = t.getClearAlpha();
                    t.setClearColor(this.clearColor, this.clearAlpha)
                }
                this.clearDepth && t.clearDepth(), t.render(this.scene, this.camera, this.renderToScreen ? null : n, this.clear), this.clearColor && t.setClearColor(a, o), this.scene.overrideMaterial = null, t.autoClear = e
            }
        }), t.ShaderPass = function(e, n) {
            t.Pass.call(this), this.textureID = void 0 !== n ? n : "tDiffuse", e instanceof t.ShaderMaterial ? (this.uniforms = e.uniforms, this.material = e) : e && (this.uniforms = t.UniformsUtils.clone(e.uniforms), this.material = new t.ShaderMaterial({
                defines: Object.assign({}, e.defines),
                uniforms: this.uniforms,
                vertexShader: e.vertexShader,
                fragmentShader: e.fragmentShader
            })), this.camera = new t.OrthographicCamera(-1, 1, 1, -1, 0, 1), this.scene = new t.Scene, this.quad = new t.Mesh(new t.PlaneBufferGeometry(2, 2), null), this.quad.frustumCulled = !1, this.scene.add(this.quad)
        }, t.ShaderPass.prototype = Object.assign(Object.create(t.Pass.prototype), {
            constructor: t.ShaderPass,
            render: function(t, e, n, i, r) {
                this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = n.texture), this.quad.material = this.material, this.renderToScreen ? t.render(this.scene, this.camera) : t.render(this.scene, this.camera, e, this.clear)
            }
        }), t.MaskPass = function(e, n) {
            t.Pass.call(this), this.scene = e, this.camera = n, this.clear = !0, this.inverse = this.needsSwap = !1
        }, t.MaskPass.prototype = Object.assign(Object.create(t.Pass.prototype), {
            constructor: t.MaskPass,
            render: function(t, e, n, i, r) {
                if (i = t.context, (r = t.state).buffers.color.setMask(!1), r.buffers.depth.setMask(!1), r.buffers.color.setLocked(!0), r.buffers.depth.setLocked(!0), this.inverse) var a = 0,
                    o = 1;
                else a = 1, o = 0;
                r.buffers.stencil.setTest(!0), r.buffers.stencil.setOp(i.REPLACE, i.REPLACE, i.REPLACE), r.buffers.stencil.setFunc(i.ALWAYS, a, 4294967295), r.buffers.stencil.setClear(o), t.render(this.scene, this.camera, n, this.clear), t.render(this.scene, this.camera, e, this.clear), r.buffers.color.setLocked(!1), r.buffers.depth.setLocked(!1), r.buffers.stencil.setFunc(i.EQUAL, 1, 4294967295), r.buffers.stencil.setOp(i.KEEP, i.KEEP, i.KEEP)
            }
        }), t.ClearMaskPass = function() {
            t.Pass.call(this), this.needsSwap = !1
        }, t.ClearMaskPass.prototype = Object.create(t.Pass.prototype), Object.assign(t.ClearMaskPass.prototype, {
            render: function(t, e, n, i, r) {
                t.state.buffers.stencil.setTest(!1)
            }
        }), t.SSAOPass = function(e, n, i, r) {
            if (void 0 === t.SSAOShader) return console.warn("THREE.SSAOPass depends on THREE.SSAOShader"), new t.ShaderPass;
            t.ShaderPass.call(this, t.SSAOShader), this.width = void 0 !== i ? i : 128, this.height = void 0 !== r ? r : 128, this.renderToScreen = !1, this.camera2 = n, this.scene2 = e, this.depthMaterial = new t.MeshDepthMaterial, this.depthMaterial.depthPacking = t.RGBADepthPacking, this.depthMaterial.blending = t.NoBlending, this.depthRenderTarget = new t.WebGLRenderTarget(this.width, this.height, {
                minFilter: t.LinearFilter,
                magFilter: t.LinearFilter
            }), this.uniforms.tDepth.value = this.depthRenderTarget.texture, this.uniforms.size.value.set(this.width, this.height), this.uniforms.cameraNear.value = this.camera2.near, this.uniforms.cameraFar.value = this.camera2.far, this.uniforms.radius.value = 4, this.uniforms.onlyAO.value = !1, this.uniforms.aoClamp.value = .25, this.uniforms.lumInfluence.value = .7, Object.defineProperties(this, {
                radius: {
                    get: function() {
                        return this.uniforms.radius.value
                    },
                    set: function(t) {
                        this.uniforms.radius.value = t
                    }
                },
                onlyAO: {
                    get: function() {
                        return this.uniforms.onlyAO.value
                    },
                    set: function(t) {
                        this.uniforms.onlyAO.value = t
                    }
                },
                aoClamp: {
                    get: function() {
                        return this.uniforms.aoClamp.value
                    },
                    set: function(t) {
                        this.uniforms.aoClamp.value = t
                    }
                },
                lumInfluence: {
                    get: function() {
                        return this.uniforms.lumInfluence.value
                    },
                    set: function(t) {
                        this.uniforms.lumInfluence.value = t
                    }
                }
            })
        }, t.SSAOPass.prototype = Object.create(t.ShaderPass.prototype), t.SSAOPass.prototype.render = function(e, n, i, r, a) {
            this.scene2.overrideMaterial = this.depthMaterial, e.render(this.scene2, this.camera2, this.depthRenderTarget, !0), this.scene2.overrideMaterial = null, t.ShaderPass.prototype.render.call(this, e, n, i, r, a)
        }, t.SSAOPass.prototype.setScene = function(t) {
            this.scene2 = t
        }, t.SSAOPass.prototype.setCamera = function(t) {
            this.camera2 = t, this.uniforms.cameraNear.value = this.camera2.near, this.uniforms.cameraFar.value = this.camera2.far
        }, t.SSAOPass.prototype.setSize = function(t, e) {
            this.width = t, this.height = e, this.uniforms.size.value.set(this.width, this.height), this.depthRenderTarget.setSize(this.width, this.height)
        }
    }
}, function(t, e) {
    function n(t) {
        return !!t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t)
    }
    t.exports = function(t) {
        return null != t && (n(t) || function(t) {
            return "function" == typeof t.readFloatLE && "function" == typeof t.slice && n(t.slice(0, 0))
        }(t) || !!t._isBuffer)
    }
}, function(t, e) {
    ! function() {
        var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
            n = {
                rotl: function(t, e) {
                    return t << e | t >>> 32 - e
                },
                rotr: function(t, e) {
                    return t << 32 - e | t >>> e
                },
                endian: function(t) {
                    if (t.constructor == Number) return 16711935 & n.rotl(t, 8) | 4278255360 & n.rotl(t, 24);
                    for (var e = 0; e < t.length; e++) t[e] = n.endian(t[e]);
                    return t
                },
                randomBytes: function(t) {
                    for (var e = []; t > 0; t--) e.push(Math.floor(256 * Math.random()));
                    return e
                },
                bytesToWords: function(t) {
                    for (var e = [], n = 0, i = 0; n < t.length; n++, i += 8) e[i >>> 5] |= t[n] << 24 - i % 32;
                    return e
                },
                wordsToBytes: function(t) {
                    for (var e = [], n = 0; n < 32 * t.length; n += 8) e.push(t[n >>> 5] >>> 24 - n % 32 & 255);
                    return e
                },
                bytesToHex: function(t) {
                    for (var e = [], n = 0; n < t.length; n++) e.push((t[n] >>> 4).toString(16)), e.push((15 & t[n]).toString(16));
                    return e.join("")
                },
                hexToBytes: function(t) {
                    for (var e = [], n = 0; n < t.length; n += 2) e.push(parseInt(t.substr(n, 2), 16));
                    return e
                },
                bytesToBase64: function(t) {
                    for (var n = [], i = 0; i < t.length; i += 3)
                        for (var r = t[i] << 16 | t[i + 1] << 8 | t[i + 2], a = 0; a < 4; a++) 8 * i + 6 * a <= 8 * t.length ? n.push(e.charAt(r >>> 6 * (3 - a) & 63)) : n.push("=");
                    return n.join("")
                },
                base64ToBytes: function(t) {
                    t = t.replace(/[^A-Z0-9+\/]/gi, "");
                    for (var n = [], i = 0, r = 0; i < t.length; r = ++i % 4) 0 != r && n.push((e.indexOf(t.charAt(i - 1)) & Math.pow(2, -2 * r + 8) - 1) << 2 * r | e.indexOf(t.charAt(i)) >>> 6 - 2 * r);
                    return n
                }
            };
        t.exports = n
    }()
}, function(t, e, n) {
    ! function() {
        var e = n(68),
            i = n(52).utf8,
            r = n(67),
            a = n(52).bin,
            o = function(t, n) {
                t.constructor == String ? t = n && "binary" === n.encoding ? a.stringToBytes(t) : i.stringToBytes(t) : r(t) ? t = Array.prototype.slice.call(t, 0) : Array.isArray(t) || (t = t.toString());
                for (var s = e.bytesToWords(t), c = 8 * t.length, l = 1732584193, h = -271733879, u = -1732584194, p = 271733878, d = 0; d < s.length; d++) s[d] = 16711935 & (s[d] << 8 | s[d] >>> 24) | 4278255360 & (s[d] << 24 | s[d] >>> 8);
                s[c >>> 5] |= 128 << c % 32, s[14 + (c + 64 >>> 9 << 4)] = c;
                var f = o._ff,
                    m = o._gg,
                    g = o._hh,
                    v = o._ii;
                for (d = 0; d < s.length; d += 16) {
                    var y = l,
                        x = h,
                        w = u,
                        b = p;
                    h = v(h = v(h = v(h = v(h = g(h = g(h = g(h = g(h = m(h = m(h = m(h = m(h = f(h = f(h = f(h = f(h, u = f(u, p = f(p, l = f(l, h, u, p, s[d + 0], 7, -680876936), h, u, s[d + 1], 12, -389564586), l, h, s[d + 2], 17, 606105819), p, l, s[d + 3], 22, -1044525330), u = f(u, p = f(p, l = f(l, h, u, p, s[d + 4], 7, -176418897), h, u, s[d + 5], 12, 1200080426), l, h, s[d + 6], 17, -1473231341), p, l, s[d + 7], 22, -45705983), u = f(u, p = f(p, l = f(l, h, u, p, s[d + 8], 7, 1770035416), h, u, s[d + 9], 12, -1958414417), l, h, s[d + 10], 17, -42063), p, l, s[d + 11], 22, -1990404162), u = f(u, p = f(p, l = f(l, h, u, p, s[d + 12], 7, 1804603682), h, u, s[d + 13], 12, -40341101), l, h, s[d + 14], 17, -1502002290), p, l, s[d + 15], 22, 1236535329), u = m(u, p = m(p, l = m(l, h, u, p, s[d + 1], 5, -165796510), h, u, s[d + 6], 9, -1069501632), l, h, s[d + 11], 14, 643717713), p, l, s[d + 0], 20, -373897302), u = m(u, p = m(p, l = m(l, h, u, p, s[d + 5], 5, -701558691), h, u, s[d + 10], 9, 38016083), l, h, s[d + 15], 14, -660478335), p, l, s[d + 4], 20, -405537848), u = m(u, p = m(p, l = m(l, h, u, p, s[d + 9], 5, 568446438), h, u, s[d + 14], 9, -1019803690), l, h, s[d + 3], 14, -187363961), p, l, s[d + 8], 20, 1163531501), u = m(u, p = m(p, l = m(l, h, u, p, s[d + 13], 5, -1444681467), h, u, s[d + 2], 9, -51403784), l, h, s[d + 7], 14, 1735328473), p, l, s[d + 12], 20, -1926607734), u = g(u, p = g(p, l = g(l, h, u, p, s[d + 5], 4, -378558), h, u, s[d + 8], 11, -2022574463), l, h, s[d + 11], 16, 1839030562), p, l, s[d + 14], 23, -35309556), u = g(u, p = g(p, l = g(l, h, u, p, s[d + 1], 4, -1530992060), h, u, s[d + 4], 11, 1272893353), l, h, s[d + 7], 16, -155497632), p, l, s[d + 10], 23, -1094730640), u = g(u, p = g(p, l = g(l, h, u, p, s[d + 13], 4, 681279174), h, u, s[d + 0], 11, -358537222), l, h, s[d + 3], 16, -722521979), p, l, s[d + 6], 23, 76029189), u = g(u, p = g(p, l = g(l, h, u, p, s[d + 9], 4, -640364487), h, u, s[d + 12], 11, -421815835), l, h, s[d + 15], 16, 530742520), p, l, s[d + 2], 23, -995338651), u = v(u, p = v(p, l = v(l, h, u, p, s[d + 0], 6, -198630844), h, u, s[d + 7], 10, 1126891415), l, h, s[d + 14], 15, -1416354905), p, l, s[d + 5], 21, -57434055), u = v(u, p = v(p, l = v(l, h, u, p, s[d + 12], 6, 1700485571), h, u, s[d + 3], 10, -1894986606), l, h, s[d + 10], 15, -1051523), p, l, s[d + 1], 21, -2054922799), u = v(u, p = v(p, l = v(l, h, u, p, s[d + 8], 6, 1873313359), h, u, s[d + 15], 10, -30611744), l, h, s[d + 6], 15, -1560198380), p, l, s[d + 13], 21, 1309151649), u = v(u, p = v(p, l = v(l, h, u, p, s[d + 4], 6, -145523070), h, u, s[d + 11], 10, -1120210379), l, h, s[d + 2], 15, 718787259), p, l, s[d + 9], 21, -343485551), l = l + y >>> 0, h = h + x >>> 0, u = u + w >>> 0, p = p + b >>> 0
                }
                return e.endian([l, h, u, p])
            };
        o._ff = function(t, e, n, i, r, a, o) {
            var s = t + (e & n | ~e & i) + (r >>> 0) + o;
            return (s << a | s >>> 32 - a) + e
        }, o._gg = function(t, e, n, i, r, a, o) {
            var s = t + (e & i | n & ~i) + (r >>> 0) + o;
            return (s << a | s >>> 32 - a) + e
        }, o._hh = function(t, e, n, i, r, a, o) {
            var s = t + (e ^ n ^ i) + (r >>> 0) + o;
            return (s << a | s >>> 32 - a) + e
        }, o._ii = function(t, e, n, i, r, a, o) {
            var s = t + (n ^ (e | ~i)) + (r >>> 0) + o;
            return (s << a | s >>> 32 - a) + e
        }, o._blocksize = 16, o._digestsize = 16, t.exports = function(t, n) {
            if (void 0 === t || null === t) throw new Error("Illegal argument " + t);
            var i = e.wordsToBytes(o(t, n));
            return n && n.asBytes ? i : n && n.asString ? a.bytesToString(i) : e.bytesToHex(i)
        }
    }()
}, function(t, e, n) {
    "use strict";
    var i = function(t) {
        switch (typeof t) {
            case "string":
                return t;
            case "boolean":
                return t ? "true" : "false";
            case "number":
                return isFinite(t) ? t : "";
            default:
                return ""
        }
    };
    t.exports = function(t, e, n, s) {
        return e = e || "&", n = n || "=", null === t && (t = void 0), "object" == typeof t ? a(o(t), function(o) {
            var s = encodeURIComponent(i(o)) + n;
            return r(t[o]) ? a(t[o], function(t) {
                return s + encodeURIComponent(i(t))
            }).join(e) : s + encodeURIComponent(i(t[o]))
        }).join(e) : s ? encodeURIComponent(i(s)) + n + encodeURIComponent(i(t)) : ""
    };
    var r = Array.isArray || function(t) {
        return "[object Array]" === Object.prototype.toString.call(t)
    };

    function a(t, e) {
        if (t.map) return t.map(e);
        for (var n = [], i = 0; i < t.length; i++) n.push(e(t[i], i));
        return n
    }
    var o = Object.keys || function(t) {
        var e = [];
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e.push(n);
        return e
    }
}, function(t, e, n) {
    "use strict";

    function i(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }
    t.exports = function(t, e, n, a) {
        e = e || "&", n = n || "=";
        var o = {};
        if ("string" != typeof t || 0 === t.length) return o;
        var s = /\+/g;
        t = t.split(e);
        var c = 1e3;
        a && "number" == typeof a.maxKeys && (c = a.maxKeys);
        var l = t.length;
        c > 0 && l > c && (l = c);
        for (var h = 0; h < l; ++h) {
            var u, p, d, f, m = t[h].replace(s, "%20"),
                g = m.indexOf(n);
            g >= 0 ? (u = m.substr(0, g), p = m.substr(g + 1)) : (u = m, p = ""), d = decodeURIComponent(u), f = decodeURIComponent(p), i(o, d) ? r(o[d]) ? o[d].push(f) : o[d] = [o[d], f] : o[d] = f
        }
        return o
    };
    var r = Array.isArray || function(t) {
        return "[object Array]" === Object.prototype.toString.call(t)
    }
}, function(t, e, n) {
    "use strict";
    e.decode = e.parse = n(71), e.encode = e.stringify = n(70)
}, function(t, e, n) {
    "use strict";
    t.exports = {
        isString: function(t) {
            return "string" == typeof t
        },
        isObject: function(t) {
            return "object" == typeof t && null !== t
        },
        isNull: function(t) {
            return null === t
        },
        isNullOrUndefined: function(t) {
            return null == t
        }
    }
}, function(t, e) {
    t.exports = function(t) {
        return t.webpackPolyfill || (t.deprecate = function() {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", {
            enumerable: !0,
            get: function() {
                return t.l
            }
        }), Object.defineProperty(t, "id", {
            enumerable: !0,
            get: function() {
                return t.i
            }
        }), t.webpackPolyfill = 1), t
    }
}, function(t, e, n) {
    (function(t, i) {
        var r;
        ! function(a) {
            "object" == typeof e && e && e.nodeType, "object" == typeof t && t && t.nodeType;
            var o = "object" == typeof i && i;
            o.global !== o && o.window !== o && o.self;
            var s, c = 2147483647,
                l = 36,
                h = 1,
                u = 26,
                p = 38,
                d = 700,
                f = 72,
                m = 128,
                g = "-",
                v = /^xn--/,
                y = /[^\x20-\x7E]/,
                x = /[\x2E\u3002\uFF0E\uFF61]/g,
                w = {
                    overflow: "Overflow: input needs wider integers to process",
                    "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                    "invalid-input": "Invalid input"
                },
                b = l - h,
                M = Math.floor,
                _ = String.fromCharCode;

            function S(t) {
                throw RangeError(w[t])
            }

            function E(t, e) {
                for (var n = t.length, i = []; n--;) i[n] = e(t[n]);
                return i
            }

            function T(t, e) {
                var n = t.split("@"),
                    i = "";
                return n.length > 1 && (i = n[0] + "@", t = n[1]), i + E((t = t.replace(x, ".")).split("."), e).join(".")
            }

            function A(t) {
                for (var e, n, i = [], r = 0, a = t.length; r < a;)(e = t.charCodeAt(r++)) >= 55296 && e <= 56319 && r < a ? 56320 == (64512 & (n = t.charCodeAt(r++))) ? i.push(((1023 & e) << 10) + (1023 & n) + 65536) : (i.push(e), r--) : i.push(e);
                return i
            }

            function L(t) {
                return E(t, function(t) {
                    var e = "";
                    return t > 65535 && (e += _((t -= 65536) >>> 10 & 1023 | 55296), t = 56320 | 1023 & t), e + _(t)
                }).join("")
            }

            function R(t) {
                return t - 48 < 10 ? t - 22 : t - 65 < 26 ? t - 65 : t - 97 < 26 ? t - 97 : l
            }

            function P(t, e) {
                return t + 22 + 75 * (t < 26) - ((0 != e) << 5)
            }

            function C(t, e, n) {
                var i = 0;
                for (t = n ? M(t / d) : t >> 1, t += M(t / e); t > b * u >> 1; i += l) t = M(t / b);
                return M(i + (b + 1) * t / (t + p))
            }

            function I(t) {
                var e, n, i, r, a, o, s, p, d, v, y = [],
                    x = t.length,
                    w = 0,
                    b = m,
                    _ = f;
                for ((n = t.lastIndexOf(g)) < 0 && (n = 0), i = 0; i < n; ++i) t.charCodeAt(i) >= 128 && S("not-basic"), y.push(t.charCodeAt(i));
                for (r = n > 0 ? n + 1 : 0; r < x;) {
                    for (a = w, o = 1, s = l; r >= x && S("invalid-input"), ((p = R(t.charCodeAt(r++))) >= l || p > M((c - w) / o)) && S("overflow"), w += p * o, !(p < (d = s <= _ ? h : s >= _ + u ? u : s - _)); s += l) o > M(c / (v = l - d)) && S("overflow"), o *= v;
                    _ = C(w - a, e = y.length + 1, 0 == a), M(w / e) > c - b && S("overflow"), b += M(w / e), w %= e, y.splice(w++, 0, b)
                }
                return L(y)
            }

            function O(t) {
                var e, n, i, r, a, o, s, p, d, v, y, x, w, b, E, T = [];
                for (x = (t = A(t)).length, e = m, n = 0, a = f, o = 0; o < x; ++o)(y = t[o]) < 128 && T.push(_(y));
                for (i = r = T.length, r && T.push(g); i < x;) {
                    for (s = c, o = 0; o < x; ++o)(y = t[o]) >= e && y < s && (s = y);
                    for (s - e > M((c - n) / (w = i + 1)) && S("overflow"), n += (s - e) * w, e = s, o = 0; o < x; ++o)
                        if ((y = t[o]) < e && ++n > c && S("overflow"), y == e) {
                            for (p = n, d = l; !(p < (v = d <= a ? h : d >= a + u ? u : d - a)); d += l) E = p - v, b = l - v, T.push(_(P(v + E % b, 0))), p = M(E / b);
                            T.push(_(P(p, 0))), a = C(n, w, i == r), n = 0, ++i
                        }++ n, ++e
                }
                return T.join("")
            }
            s = {
                version: "1.3.2",
                ucs2: {
                    decode: A,
                    encode: L
                },
                decode: I,
                encode: O,
                toASCII: function(t) {
                    return T(t, function(t) {
                        return y.test(t) ? "xn--" + O(t) : t
                    })
                },
                toUnicode: function(t) {
                    return T(t, function(t) {
                        return v.test(t) ? I(t.slice(4).toLowerCase()) : t
                    })
                }
            }, void 0 === (r = function() {
                return s
            }.call(e, n, e, t)) || (t.exports = r)
        }()
    }).call(this, n(74)(t), n(28))
}, function(t, e, n) {
    "use strict";
    var i = n(75),
        r = n(73);

    function a() {
        this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null
    }
    e.parse = x, e.resolve = function(t, e) {
        return x(t, !1, !0).resolve(e)
    }, e.resolveObject = function(t, e) {
        return t ? x(t, !1, !0).resolveObject(e) : e
    }, e.format = function(t) {
        return r.isString(t) && (t = x(t)), t instanceof a ? t.format() : a.prototype.format.call(t)
    }, e.Url = a;
    var o = /^([a-z0-9.+-]+:)/i,
        s = /:[0-9]*$/,
        c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
        l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]),
        h = ["'"].concat(l),
        u = ["%", "/", "?", ";", "#"].concat(h),
        p = ["/", "?", "#"],
        d = /^[+a-z0-9A-Z_-]{0,63}$/,
        f = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        m = {
            javascript: !0,
            "javascript:": !0
        },
        g = {
            javascript: !0,
            "javascript:": !0
        },
        v = {
            http: !0,
            https: !0,
            ftp: !0,
            gopher: !0,
            file: !0,
            "http:": !0,
            "https:": !0,
            "ftp:": !0,
            "gopher:": !0,
            "file:": !0
        },
        y = n(72);

    function x(t, e, n) {
        if (t && r.isObject(t) && t instanceof a) return t;
        var i = new a;
        return i.parse(t, e, n), i
    }
    a.prototype.parse = function(t, e, n) {
        if (!r.isString(t)) throw new TypeError("Parameter 'url' must be a string, not " + typeof t);
        var a = t.indexOf("?"),
            s = -1 !== a && a < t.indexOf("#") ? "?" : "#",
            l = t.split(s);
        l[0] = l[0].replace(/\\/g, "/");
        var x = t = l.join(s);
        if (x = x.trim(), !n && 1 === t.split("#").length) {
            var w = c.exec(x);
            if (w) return this.path = x, this.href = x, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = e ? y.parse(this.search.substr(1)) : this.search.substr(1)) : e && (this.search = "", this.query = {}), this
        }
        var b = o.exec(x);
        if (b) {
            var M = (b = b[0]).toLowerCase();
            this.protocol = M, x = x.substr(b.length)
        }
        if (n || b || x.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var _ = "//" === x.substr(0, 2);
            !_ || b && g[b] || (x = x.substr(2), this.slashes = !0)
        }
        if (!g[b] && (_ || b && !v[b])) {
            for (var S, E, T = -1, A = 0; A < p.length; A++) - 1 !== (L = x.indexOf(p[A])) && (-1 === T || L < T) && (T = L);
            for (-1 !== (E = -1 === T ? x.lastIndexOf("@") : x.lastIndexOf("@", T)) && (S = x.slice(0, E), x = x.slice(E + 1), this.auth = decodeURIComponent(S)), T = -1, A = 0; A < u.length; A++) {
                var L; - 1 !== (L = x.indexOf(u[A])) && (-1 === T || L < T) && (T = L)
            } - 1 === T && (T = x.length), this.host = x.slice(0, T), x = x.slice(T), this.parseHost(), this.hostname = this.hostname || "";
            var R = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
            if (!R)
                for (var P = this.hostname.split(/\./), C = (A = 0, P.length); A < C; A++) {
                    var I = P[A];
                    if (I && !I.match(d)) {
                        for (var O = "", D = 0, B = I.length; D < B; D++) I.charCodeAt(D) > 127 ? O += "x" : O += I[D];
                        if (!O.match(d)) {
                            var N = P.slice(0, A),
                                k = P.slice(A + 1),
                                U = I.match(f);
                            U && (N.push(U[1]), k.unshift(U[2])), k.length && (x = "/" + k.join(".") + x), this.hostname = N.join(".");
                            break
                        }
                    }
                }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), R || (this.hostname = i.toASCII(this.hostname));
            var z = this.port ? ":" + this.port : "",
                F = this.hostname || "";
            this.host = F + z, this.href += this.host, R && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== x[0] && (x = "/" + x))
        }
        if (!m[M])
            for (A = 0, C = h.length; A < C; A++) {
                var H = h[A];
                if (-1 !== x.indexOf(H)) {
                    var G = encodeURIComponent(H);
                    G === H && (G = escape(H)), x = x.split(H).join(G)
                }
            }
        var j = x.indexOf("#"); - 1 !== j && (this.hash = x.substr(j), x = x.slice(0, j));
        var V = x.indexOf("?");
        if (-1 !== V ? (this.search = x.substr(V), this.query = x.substr(V + 1), e && (this.query = y.parse(this.query)), x = x.slice(0, V)) : e && (this.search = "", this.query = {}), x && (this.pathname = x), v[M] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
            z = this.pathname || "";
            var W = this.search || "";
            this.path = z + W
        }
        return this.href = this.format(), this
    }, a.prototype.format = function() {
        var t = this.auth || "";
        t && (t = (t = encodeURIComponent(t)).replace(/%3A/i, ":"), t += "@");
        var e = this.protocol || "",
            n = this.pathname || "",
            i = this.hash || "",
            a = !1,
            o = "";
        this.host ? a = t + this.host : this.hostname && (a = t + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (a += ":" + this.port)), this.query && r.isObject(this.query) && Object.keys(this.query).length && (o = y.stringify(this.query));
        var s = this.search || o && "?" + o || "";
        return e && ":" !== e.substr(-1) && (e += ":"), this.slashes || (!e || v[e]) && !1 !== a ? (a = "//" + (a || ""), n && "/" !== n.charAt(0) && (n = "/" + n)) : a || (a = ""), i && "#" !== i.charAt(0) && (i = "#" + i), s && "?" !== s.charAt(0) && (s = "?" + s), e + a + (n = n.replace(/[?#]/g, function(t) {
            return encodeURIComponent(t)
        })) + (s = s.replace("#", "%23")) + i
    }, a.prototype.resolve = function(t) {
        return this.resolveObject(x(t, !1, !0)).format()
    }, a.prototype.resolveObject = function(t) {
        if (r.isString(t)) {
            var e = new a;
            e.parse(t, !1, !0), t = e
        }
        for (var n = new a, i = Object.keys(this), o = 0; o < i.length; o++) {
            var s = i[o];
            n[s] = this[s]
        }
        if (n.hash = t.hash, "" === t.href) return n.href = n.format(), n;
        if (t.slashes && !t.protocol) {
            for (var c = Object.keys(t), l = 0; l < c.length; l++) {
                var h = c[l];
                "protocol" !== h && (n[h] = t[h])
            }
            return v[n.protocol] && n.hostname && !n.pathname && (n.path = n.pathname = "/"), n.href = n.format(), n
        }
        if (t.protocol && t.protocol !== n.protocol) {
            if (!v[t.protocol]) {
                for (var u = Object.keys(t), p = 0; p < u.length; p++) {
                    var d = u[p];
                    n[d] = t[d]
                }
                return n.href = n.format(), n
            }
            if (n.protocol = t.protocol, t.host || g[t.protocol]) n.pathname = t.pathname;
            else {
                for (var f = (t.pathname || "").split("/"); f.length && !(t.host = f.shift()););
                t.host || (t.host = ""), t.hostname || (t.hostname = ""), "" !== f[0] && f.unshift(""), f.length < 2 && f.unshift(""), n.pathname = f.join("/")
            }
            if (n.search = t.search, n.query = t.query, n.host = t.host || "", n.auth = t.auth, n.hostname = t.hostname || t.host, n.port = t.port, n.pathname || n.search) {
                var m = n.pathname || "",
                    y = n.search || "";
                n.path = m + y
            }
            return n.slashes = n.slashes || t.slashes, n.href = n.format(), n
        }
        var x = n.pathname && "/" === n.pathname.charAt(0),
            w = t.host || t.pathname && "/" === t.pathname.charAt(0),
            b = w || x || n.host && t.pathname,
            M = b,
            _ = n.pathname && n.pathname.split("/") || [],
            S = (f = t.pathname && t.pathname.split("/") || [], n.protocol && !v[n.protocol]);
        if (S && (n.hostname = "", n.port = null, n.host && ("" === _[0] ? _[0] = n.host : _.unshift(n.host)), n.host = "", t.protocol && (t.hostname = null, t.port = null, t.host && ("" === f[0] ? f[0] = t.host : f.unshift(t.host)), t.host = null), b = b && ("" === f[0] || "" === _[0])), w) n.host = t.host || "" === t.host ? t.host : n.host, n.hostname = t.hostname || "" === t.hostname ? t.hostname : n.hostname, n.search = t.search, n.query = t.query, _ = f;
        else if (f.length) _ || (_ = []), _.pop(), _ = _.concat(f), n.search = t.search, n.query = t.query;
        else if (!r.isNullOrUndefined(t.search)) return S && (n.hostname = n.host = _.shift(), (R = !!(n.host && n.host.indexOf("@") > 0) && n.host.split("@")) && (n.auth = R.shift(), n.host = n.hostname = R.shift())), n.search = t.search, n.query = t.query, r.isNull(n.pathname) && r.isNull(n.search) || (n.path = (n.pathname ? n.pathname : "") + (n.search ? n.search : "")), n.href = n.format(), n;
        if (!_.length) return n.pathname = null, n.search ? n.path = "/" + n.search : n.path = null, n.href = n.format(), n;
        for (var E = _.slice(-1)[0], T = (n.host || t.host || _.length > 1) && ("." === E || ".." === E) || "" === E, A = 0, L = _.length; L >= 0; L--) "." === (E = _[L]) ? _.splice(L, 1) : ".." === E ? (_.splice(L, 1), A++) : A && (_.splice(L, 1), A--);
        if (!b && !M)
            for (; A--; A) _.unshift("..");
        !b || "" === _[0] || _[0] && "/" === _[0].charAt(0) || _.unshift(""), T && "/" !== _.join("/").substr(-1) && _.push("");
        var R, P = "" === _[0] || _[0] && "/" === _[0].charAt(0);
        return S && (n.hostname = n.host = P ? "" : _.length ? _.shift() : "", (R = !!(n.host && n.host.indexOf("@") > 0) && n.host.split("@")) && (n.auth = R.shift(), n.host = n.hostname = R.shift())), (b = b || n.host && _.length) && !P && _.unshift(""), _.length ? n.pathname = _.join("/") : (n.pathname = null, n.path = null), r.isNull(n.pathname) && r.isNull(n.search) || (n.path = (n.pathname ? n.pathname : "") + (n.search ? n.search : "")), n.auth = t.auth || n.auth, n.slashes = n.slashes || t.slashes, n.href = n.format(), n
    }, a.prototype.parseHost = function() {
        var t = this.host,
            e = s.exec(t);
        e && (":" !== (e = e[0]) && (this.port = e.substr(1)), t = t.substr(0, t.length - e.length)), t && (this.hostname = t)
    }
}, function(t, e, n) {
    var i = n(76),
        r = n(69),
        a = n(1);

    function o(t, e, n) {
        "localhost" == location.hostname && (window.location.hostname = "127.0.0.1"), this.debugLog = !1, this.baseUrl = t, this.devPort = e, this.rawIPs = !!n, this.server = void 0, this.gameIndex = void 0, this.callback = void 0, this.errorCallback = void 0, this.processServers(vultr.servers)
    }
    o.prototype.regionInfo = {
        0: {
            name: "Local",
            latitude: 0,
            longitude: 0
        },
        1: {
            name: "New Jersey",
            latitude: 40.1393329,
            longitude: -75.8521818
        },
        2: {
            name: "Chicago",
            latitude: 41.8339037,
            longitude: -87.872238
        },
        3: {
            name: "Dallas",
            latitude: 32.8208751,
            longitude: -96.8714229
        },
        4: {
            name: "Seattle",
            latitude: 47.6149942,
            longitude: -122.4759879
        },
        5: {
            name: "Los Angeles",
            latitude: 34.0207504,
            longitude: -118.691914
        },
        6: {
            name: "Atlanta",
            latitude: 33.7676334,
            longitude: -84.5610332
        },
        7: {
            name: "Amsterdam",
            latitude: 52.3745287,
            longitude: 4.7581878
        },
        8: {
            name: "London",
            latitude: 51.5283063,
            longitude: -.382486
        },
        9: {
            name: "Frankfurt",
            latitude: 50.1211273,
            longitude: 8.496137
        },
        12: {
            name: "Silicon Valley",
            latitude: 37.4024714,
            longitude: -122.3219752
        },
        19: {
            name: "Sydney",
            latitude: -33.8479715,
            longitude: 150.651084
        },
        24: {
            name: "Paris",
            latitude: 48.8588376,
            longitude: 2.2773454
        },
        25: {
            name: "Tokyo",
            latitude: 35.6732615,
            longitude: 139.569959
        },
        39: {
            name: "Miami",
            latitude: 25.7823071,
            longitude: -80.3012156
        },
        40: {
            name: "Singapore",
            latitude: 1.3147268,
            longitude: 103.7065876
        }
    }, o.prototype.start = function(t, e) {
        this.callback = t, this.errorCallback = e;
        var n = this.parseServerQuery();
        n ? (this.log("Found server in query."), this.password = n[3], this.connect(n[0], n[1], n[2])) : (this.log("Pinging servers..."), this.pingServers())
    }, o.prototype.parseServerQuery = function() {
        var t = i.parse(location.href, !0),
            e = t.query.server;
        if ("string" == typeof e) {
            var n = e.split(":");
            if (3 == n.length) return [parseInt(n[0]), parseInt(n[1]), parseInt(n[2]), t.query.password];
            this.errorCallback("Invalid number of server parameters in " + e)
        }
    }, o.prototype.findServer = function(t, e) {
        var n = this.servers[t];
        if (Array.isArray(n)) {
            for (var i = 0; i < n.length; i++) {
                var r = n[i];
                if (r.index == e) return r
            }
            console.warn("Could not find server in region " + t + " with index " + e + ".")
        } else this.errorCallback("No server list for region " + t)
    }, o.prototype.pingServers = function() {
        var t = this,
            e = [];
        for (var n in this.servers)
            if (this.servers.hasOwnProperty(n)) {
                var i = this.servers[n],
                    r = i[Math.floor(Math.random() * i.length)];
                void 0 != r ? function(i, r) {
                    var a = new XMLHttpRequest;
                    a.onreadystatechange = function(i) {
                        var a = i.target;
                        if (4 == a.readyState)
                            if (200 == a.status) {
                                for (var o = 0; o < e.length; o++) e[o].abort();
                                t.log("Connecting to region", r.region);
                                var s = t.seekServer(r.region);
                                t.connect(s[0], s[1], s[2])
                            } else console.warn("Error pinging " + r.ip + " in region " + n)
                    };
                    var o = "//" + t.serverAddress(r.ip, !0) + ":" + t.serverPort(r) + "/ping";
                    a.open("GET", o, !0), a.send(null), t.log("Pinging", o), e.push(a)
                }(0, r) : console.log("No target server for region " + n)
            }
    }, o.prototype.seekServer = function(t) {
        var e, n = this.servers[t].map(function(t) {
            for (var e = 0, n = 0; n < t.games.length; ++n) t.games[n].custom || (e += t.games[n].playerCount);
            return {
                index: t.index,
                region: t.region,
                space: a.maxPlayers * a.gamesPerServer - e,
                playerCount: e
            }
        }).filter(function(t) {
            return t.space > a.minServerSpace
        }).sort(function(t, e) {
            return e.playerCount - t.playerCount
        });
        return 0 == n.length ? (n = this.servers[t], serverIndex = Math.floor(Math.random() * n.length)) : serverIndex = Math.min(Math.floor(Math.random() * a.serverSpread), n.length - 1), [(e = n[serverIndex]).region, e.index, 0]
    }, o.prototype.connect = function(t, e, n) {
        if (!this.connected) {
            var i = this.findServer(t, e);
            void 0 != i ? (this.log("Connecting to server", i, "with game index", n), window.history.replaceState(document.title, document.title, this.generateHref(t, e, n, this.password)), this.server = i, this.gameIndex = n, this.callback(this.serverAddress(i.ip), this.serverPort(i), n)) : this.errorCallback("Failed to find server for region " + t + " and index " + e)
        }
    }, o.prototype.switchServer = function(t, e, n, i) {
        this.switchingServers = !0, window.location.href = this.generateHref(t, e, n, i)
    }, o.prototype.generateHref = function(t, e, n, i) {
        var r = "/?server=" + t + ":" + e + ":" + n;
        return i && (r += "&password=" + encodeURIComponent(i)), r
    }, o.prototype.serverAddress = function(t, e) {
        return "127.0.0.1" == t || "7f000001" == t || "903d62ef5d1c2fecdcaeb5e7dd485eff" == t ? window.location.hostname : this.rawIPs ? e ? "ip_" + this.hashIP(t) + "." + this.baseUrl : t : "ip_" + t + "." + this.baseUrl
    }, o.prototype.serverPort = function(t) {
        return 0 == t.region ? this.devPort : location.protocol.startsWith("https") ? 443 : 80
    }, o.prototype.processServers = function(t) {
        for (var e = {}, n = 0; n < t.length; n++) {
            var i = t[n],
                r = e[i.region];
            void 0 == r && (r = [], e[i.region] = r), r.push(i)
        }
        for (var a in e) e[a] = e[a].sort(function(t, e) {
            return t.index - e.index
        });
        this.servers = e
    }, o.prototype.ipToHex = function(t) {
        return t.split(".").map(t => ("00" + parseInt(t).toString(16)).substr(-2)).join("").toLowerCase()
    }, o.prototype.hashIP = function(t) {
        return r(this.ipToHex(t))
    }, o.prototype.log = function() {
        return this.debugLog ? console.log.apply(void 0, arguments) : console.verbose ? console.verbose.apply(void 0, arguments) : void 0
    };
    var s = function(t, e) {
        return t.concat(e)
    };
    Array.prototype.flatMap = function(t) {
        return function(t, e) {
            return e.map(t).reduce(s, [])
        }(t, this)
    }, t.exports = o
}, function(t, e, n) {
    var i = n(1),
        r = "undefined" != typeof Storage;

    function a(t) {
        r && localStorage.removeItem(t)
    }
    window.saveVal = function(t, e) {
        r && localStorage.setItem(t, e)
    }, window.getSavedVal = function(t) {
        return r ? localStorage.getItem(t) : null
    }, window.openURL = function(t) {
        window.open(t, "_blank")
    };
    var o = new(n(77))("krunker.io", 3e3, !1);

    function s(t, e) {
        hostGameMsg && (hostGameMsg.innerHTML = t), e && c(e), mt = null
    }

    function c(t) {
        var e = o.generateHref(o.server.region, o.server.index, t);
        window.history.replaceState({}, "Krunker", e), o.gameIndex = t, windows[1].lastLoadTime = 0
    }
    window.switchServer = function(t, e, n) {
        o.switchServer(t, e, n)
    }, window.createPrivateRoom = function() {
        for (var t = [], e = 0; e < S.length; e++) document.getElementById("gameMap" + e).checked && t.push(e);
        if (0 != t.length || mt || "" != rawMapData.value) {
            var n = [];
            for (e = 0; e < E.length; e++) document.getElementById("gameMode" + e).checked && n.push(e);
            if (0 != n.length) {
                var r = [];
                for (e = 0; e < g.classes.length; e++) document.getElementById("gameClass" + e).checked && r.push(e);
                if (0 != r.length) {
                    var a = {
                        customMap: mt,
                        rawMapData: rawMapData.value,
                        private: makePrivate.checked,
                        maps: t,
                        modes: n,
                        modURL: hostModURL.value,
                        classes: r
                    };
                    for (e = 0; e < i.serverConfig.length; e++) {
                        var o = document.getElementById("customS" + i.serverConfig[e].varN);
                        i.serverConfig[e].bool ? tmpV = o ? o.checked : 0 : tmpV = o ? parseFloat(o.value) : 0, a[i.serverConfig[e].varN] = tmpV
                    }
                    m.send("custom", a), hostGameMsg.innerHTML = "Please wait..."
                } else hostGameMsg.innerHTML = "<span class='error'>Select at least one class</span>"
            } else hostGameMsg.innerHTML = "<span class='error'>Select at least one Mode</span>"
        } else hostGameMsg.innerHTML = "<span class='error'>Select at least one Map</span>"
    }, Object.defineProperty(console, "_commandLineAPI", {
        get: function() {
            throw ""
        }
    });
    var l = n(2);
    l.OBJLoader = n(27)(l), l.Shaders = n(66)(l);
    var h = n(3),
        u = new(n(16))(l, h, i);
    window.SOUND = new(n(65))(h, i);
    var p = new(n(51))(u, i),
        d = n(64),
        f = new(n(63))(u, i),
        m = n(50),
        g = n(62).obj;
    g = new g(0, null, u, SOUND, p);
    var v, y, x, w, b, M, _ = new(n(58))(u, l, d, h, g, i, m),
        S = n(8).maps,
        E = n(8).modes,
        T = n(57),
        A = !1;
    window.locked = !1;
    var L, R, P, C, I = [],
        O = 0,
        D = 0,
        B = 0;
    window.idleTimer = 0, twitterHolder.innerHTML = "<a href='https://twitter.com/" + (h.randInt(0, 1) ? "Sidney_de_Vries" : "EatMyAppless") + "' class='twitter-follow-button' data-show-screen-name='false' data-size='large' data-show-count='true'>Follow</a>", Math.PI2 = 2 * Math.PI, Math.lerpAngle = function(t, e, n) {
        Math.abs(e - t) > Math.PI && (t > e ? e += Math.PI2 : t += Math.PI2);
        var i = e + (t - e) * n;
        return i >= 0 && i <= Math.PI2 ? i : i % Math.PI2
    }, console.warn = (t => {}), console.info = (t => {});
    var N, k, U = !1;

    function z() {
        window.innerWidth, N = window.innerHeight, k = N / 693, u.resize()
    }
    window.loading = !1, window.enterGame = function() {
        if (g.singlePlayer && !U) {
            qt("0:00");
            var t = g.getSpawnPoint(null, !0);
            ie([m.socketId, 1, t.x, t.y, t.z, "TEST", ct, null]), U = !0, de([1, "TEST", 0, 0, 0]), d.toggleMenu(!1)
        } else if (m.connected && !U) {
            U = !0, window.idleTimer = 0, d.toggleMenu(!1), instructions.innerHTML = "LOADING...", window.loading = !0;
            var e = parseInt(ct),
                n = g.classes[e].loadout,
                i = [void 0 != st[n[0]] ? st[n[0]] : -1, void 0 != st[n[1]] ? st[n[1]] : -1];
            m.send("etr", [e, parseInt(te), i, parseInt(at), parseInt(rt)])
        }
    }, window.addEventListener("resize", z), z(), window.toggleAd = function(t) {};
    var F = 0,
        H = StripeCheckout.configure({
            key: "pk_live_ZpOmTmwsx2tvx487Z2Pzrt6A",
            image: "./img/store.png",
            locale: "auto",
            token: function(t) {
                m && y && (menuHider.style.display = "none", purchaseLoad.style.display = "block", purchLoadRing.style.display = "inline-block", purchaseLabel.innerHTML = "Completing Purchase...", m.send("pr", F, t.id, t.email))
            }
        });

    function G(t) {
        y && (y.funds = t)
    }

    function j(t, e) {
        window.idleTimer = 0, t ? (purchLoadRing.style.display = "none", purchaseLabel.innerHTML = "Payment error occurred <a href='javascript:;' onclick='cancelPurchase()'>click here</a> and try again!") : (y && (y.funds = e), updateWindow(null, !0), menuHider.style.display = "block", purchaseLoad.style.display = "none")
    }
    window.cancelPurchase = function() {
        window.idleTimer = 0, menuHider.style.display = "block", purchaseLoad.style.display = "none"
    }, window.showPurchase = function(t) {
        window.idleTimer = 0, F = t, x = g.store.purchases[t], H.open({
            name: "Krunker.io",
            description: "Buy " + x.val + " KR",
            currency: "usd",
            zipCode: !0,
            amount: 100 * x.price
        })
    }, window.addEventListener("popstate", function() {
        H.close()
    });
    const V = new FileReader;
    var W, Y, X = !1,
        q = 0,
        Z = {};

    function K() {
        U = !1, window.idleTimer = 0, d.toggleMenu(!0), _.toggle(!1), zt = {
            states: []
        }
    }
    window.voiceChat = function(t, e) {
        if (q) try {
            var n = new Howl({
                src: [t],
                volume: q
            });
            n.on("load", function() {
                n.duration() <= i.voiceChatMaxLength && (n.on("end", function() {
                    if (Z[e]--, Z[e] <= 0) {
                        var t = document.getElementById("speaker" + e);
                        t && t.parentElement.removeChild(t), delete Z[e]
                    }
                }), Z[e] || (Z[e] = 0, speakerDisplay.innerHTML += "<div id='speaker" + e + "' class='voiceSpeaker'>" + e + " <i class='material-icons' style='color:#fff;font-size:35px;vertical-align:middle'>volume_down</i></div>"), Z[e]++, n.play())
            })
        } catch (t) {}
    }, V.addEventListener("loadend", t => {
        var e = V.result;
        m.send("vc", e)
    }), window.toggleRecord = function(t) {
        v && (t && !X ? (voiceDisplay.style.opacity = .9, X = !0, navigator.mediaDevices.getUserMedia({
            audio: !0,
            video: !1
        }).then(t => {
            (W = new MediaRecorder(t, {
                mimetype: "audio/ogg",
                bitsPerSecond: 6e3
            })).start();
            const e = [];
            W.addEventListener("dataavailable", t => {
                e.push(t.data)
            }), W.addEventListener("stop", () => {
                recTimer.style.display = "none", voiceDisplay.style.opacity = .3;
                var t = new Blob(e, {
                    type: "audio/ogg; codecs=opus"
                });
                V.readAsDataURL(t)
            }), recTimer.style.display = "inline-block", recTimer.innerHTML = i.voiceChatMaxLength;
            var n = i.voiceChatMaxLength;
            Y = setInterval(function() {
                n--, recTimer.innerHTML = n, n <= 0 && (X = !1, W.stop(), clearInterval(Y))
            }, 1e3)
        }).catch(function(t) {
            X = !1, Y && clearInterval(Y), voiceDisplay.style.opacity = .3
        })) : !t && X && W && (X = !1, W.stop(), clearInterval(Y)))
    }, window.updateSliderLabel = function(t, e) {
        var n = document.getElementById("customSet" + t);
        n && (n.innerHTML = e)
    }, window.setSetting = function(t, e) {
        document.getElementById("slid" + t) && (document.getElementById("slid" + t).innerHTML = e), J[t].set(e), J[t].val = e, saveVal("krun_set_" + t, e)
    };
    for (var J = [{
            name: "<div style='width:100%'><a href='javascript:;' onclick='showWindow(7);' class='menuLink'>Change Controls</a></div>",
            html: function() {
                return ""
            }
        }, {
            name: "Resolution",
            pre: "<div class='setHed'>Quality</div>",
            val: .7,
            html: function() {
                return "<span class='sliderVal' id='slid1'>" + J[1].val + "</span><div class='slidecontainer'><input type='range' min='0.1' max='2' step='0.1' value='" + J[1].val + "' class='sliderM' oninput='setSetting(1, this.value)'></div>"
            },
            set: function(t) {
                u.setResMlt(t)
            }
        }, {
            name: "Particles",
            val: !0,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(2, this.checked)' " + (J[2].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                p.active = t
            }
        }, {
            name: "Show UI",
            pre: "<div class='setHed'>Interface</div>",
            val: !0,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(3, this.checked)' " + (J[3].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                d.hideGameUI = !t, chatUI.style.display = t ? "block" : "none"
            }
        }, {
            name: "Show Chat",
            val: !0,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(4, this.checked)' " + (J[4].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                chatHolder.style.display = t ? "block" : "none"
            }
        }, {
            name: "Crosshair Color",
            val: "#ffffff",
            html: function() {
                return "<input type='color' id='head' name='color' value='" + J[5].val + "' oninput='setSetting(5, this.value)' style='float:right;margin-top:5px'/>"
            },
            set: function(t) {
                crosshairT.style.backgroundColor = t, crosshairB.style.backgroundColor = t, crosshairLL.style.backgroundColor = t, crosshairRL.style.backgroundColor = t
            }
        }, {
            name: "Sensitivity",
            pre: "<div class='setHed'>Gameplay</div>",
            val: 1,
            html: function() {
                return "<span class='sliderVal' id='slid6'>" + J[6].val + "</span><div class='slidecontainer'><input type='range' min='0.1' max='10' step='0.1' value='" + J[6].val + "' class='sliderM' oninput='setSetting(6, this.value)'></div>"
            },
            set: function(t) {
                _.sensMlt = t
            }
        }, {
            name: "Aim Sensitivity",
            val: 1,
            html: function() {
                return "<span class='sliderVal' id='slid7'>" + J[7].val + "</span><div class='slidecontainer'><input type='range' min='0.1' max='10' step='0.1' value='" + J[7].val + "' class='sliderM' oninput='setSetting(7, this.value)'></div>"
            },
            set: function(t) {
                _.sensAimMlt = t
            }
        }, {
            name: "Field of View",
            val: i.fov,
            html: function() {
                return "<span class='sliderVal' id='slid8'>" + J[8].val + "</span><div class='slidecontainer'><input type='range' min='60' max='120' step='5' value='" + J[8].val + "' class='sliderM' oninput='setSetting(8, this.value)'></div>"
            },
            set: function(t) {
                u.setFov(t)
            }
        }, {
            name: "Invert Y-Axis",
            val: !1,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(9, this.checked)' " + (J[9].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                _.invertY = t
            }
        }, {
            name: "Sound",
            pre: "<div class='setHed'>Audio</div>",
            val: 1,
            html: function() {
                return "<span class='sliderVal' id='slid10'>" + J[10].val + "</span><div class='slidecontainer'><input type='range' min='0' max='1' step='0.1' value='" + J[10].val + "' class='sliderM' oninput='setSetting(10, this.value)'></div>"
            },
            set: function(t) {
                SOUND.setVolume(t)
            }
        }, {
            name: "Voice Volume",
            val: 1,
            html: function() {
                return "<span class='sliderVal' id='slid11'>" + J[11].val + "</span><div class='slidecontainer'><input type='range' min='0' max='1' step='0.1' value='" + J[11].val + "' class='sliderM' oninput='setSetting(11, this.value)'></div>"
            },
            set: function(t) {
                q = t
            }
        }, {
            name: "Weapon Bobbing",
            pre: "<div class='setHed'>Editing</div>",
            val: 1,
            html: function() {
                return "<span class='sliderVal' id='slid12'>" + J[12].val + "</span><div class='slidecontainer'><input type='range' min='0' max='2' step='0.1' value='" + J[12].val + "' class='sliderM' oninput='setSetting(12, this.value)'></div>"
            },
            set: function(t) {
                u.weaponLean = t
            }
        }, {
            name: "Show Weapon",
            val: !0,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(13, this.checked)' " + (J[13].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                g.hideWeapon = !t, v && v.weaponMeshes[v.weaponIndex] && (v.weaponMeshes[v.weaponIndex].visible = t)
            }
        }, {
            name: "Depth Map",
            val: 0,
            html: function() {
                return "<span class='sliderVal' id='slid14'>" + J[14].val + "</span><div class='slidecontainer'><input type='range' min='0' max='500' step='5' value='" + J[14].val + "' class='sliderM' oninput='setSetting(14, this.value)'></div>"
            },
            set: function(t) {
                u.toggleDepthMap(t)
            }
        }, {
            name: "Green Screen",
            val: !1,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(15, this.checked)' " + (J[15].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                u.toggleGreenscreen(t)
            }
        }, {
            name: "Shading",
            val: !0,
            html: function() {
                return "<label class='switch'><input type='checkbox' onclick='setSetting(16, this.checked)' " + (J[16].val ? "checked" : "") + "><span class='slider'></span></label>"
            },
            set: function(t) {
                u.toggleMeshGroup("ambient_0", t), u.toggleMeshGroup("ambient_1", t)
            }
        }], Q = 0; Q < J.length; ++Q)
        if (J[Q].set) {
            var $ = getSavedVal("krun_set_" + Q);
            J[Q].val = null !== $ ? $ : J[Q].val, "false" == J[Q].val && (J[Q].val = !1), J[Q].set(J[Q].val, !0)
        }
    function tt(t) {
        y && y.setData(t), updateWindow(5)
    }

    function et(t) {
        try {
            accResp.innerHTML = t || "", accResp.style.display = t ? "block" : "none"
        } catch (t) {}
    }

    function nt(t, e) {
        t >= 0 && et("Please Wait..."), m.send("a", t, e)
    }

    function it(t, e, n, r, a) {
        t ? et(t) : (y = new T(e, n, null, i), saveVal("krunker_id", e), saveVal("krunker_username", n), tt(r), a && (saveVal("krunker_token", a), loginToken = a), updateWindow(null, !0))
    }
    window.changeCont = function(t, e) {
        e || showWindow(7, !0), t <= 3 ? _.inputChanger = t : 4 == t ? _.inputChanger = "jumpKey" : 5 == t ? _.inputChanger = "crouchKey" : 6 == t ? _.inputChanger = "swapKeyD" : 7 == t ? _.inputChanger = "swapKeyU" : 8 == t ? _.inputChanger = "reloadKey" : 9 == t ? _.inputChanger = "sprayKey" : 10 == t ? _.inputChanger = "aimKey" : 11 == t ? _.inputChanger = "chatKey" : 12 == t ? _.inputChanger = "voiceKey" : 13 == t && (_.inputChanger = "recordKey"), document.getElementById("cont" + t).innerHTML = "Press any Key"
    }, window.registerAcc = function() {
        nt(0, [accName.value, accPass.value])
    }, window.loginAcc = function() {
        nt(1, [accName.value, accPass.value, null])
    }, window.logoutAcc = function() {
        nt(-1), et(), a("krunker_id"), a("krunker_username"), a("krunker_token"), a("skins"), a("hatIndex"), a("backIndex"), at = -1, rt = -1, st = {}, windows[12].clanData = null, loginToken = null, y = null, tt()
    };
    var rt = getSavedVal("backIndex") || -1,
        at = getSavedVal("hatIndex") || -1,
        ot = getSavedVal("skins"),
        st = ot ? JSON.parse(ot) : {},
        ct = getSavedVal("classindex") || 0,
        lt = 0;

    function ht(t, e) {
        var n = "<div class='selItem'><div class='equipBtn' onclick='" + t + "(-1)'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName'>None</div><div class='itemCat'>Default</div></div></div>";
        if (y)
            for (var i = y.skins.slice().sort(function(t, e) {
                    return g.store.skins[e.ind] && g.store.skins[t.ind] ? g.store.skins[e.ind].rarity - g.store.skins[t.ind].rarity : 0
                }), r = 0; r < i.length; ++r)(x = g.store.skins[i[r].ind]) && x.type == e && (n += "<div class='selItem' style='margin-top:10px'><div class='equipBtn' onclick='" + t + "(" + i[r].ind + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName' style='color:" + g.store.rarities[x.rarity].color + "'>" + x.name + "<span style='color:rgba(0,0,0,0.3)'> x" + i[r].cnt + "</span></div><div class='itemCat'>by " + (x.creator || "Krunker.io") + "</div></div></div>");
        return n
    }
    for (window.selectHat = function(t) {
            saveVal("hatIndex", t), at = t, showWindow(3)
        }, window.selectBack = function(t) {
            saveVal("backIndex", t), rt = t, showWindow(3)
        }, window.selectClass = function(t) {
            saveVal("classindex", t), ct = t, showWindow(3)
        }, window.skinSelector = function(t) {
            lt = t, showWindow(15)
        }, window.selectSkin = function(t, e) {
            x = g.store.skins[t], st[e] = x ? t : void 0, saveVal("skins", JSON.stringify(st)), showWindow(3)
        }, window.windows = [{
            header: "Game Settings",
            gen: function() {
                for (var t = "", e = 0; e < J.length; ++e) J[e].pre && (t += J[e].pre), t += "<div class='settName'>" + J[e].name + " " + J[e].html() + "</div>";
                return t
            }
        }, {
            header: "Server Browser",
            lastLoadTime: 0,
            gen: function() {
                return Date.now() - this.lastLoadTime < i.serverBrowserRate ? this.genList() : (this.lastLoadTime = Date.now(), this.loadData())
            },
            loadData: function() {
                var t = new XMLHttpRequest;
                return t.onreadystatechange = function() {
                    4 == this.readyState && (200 == this.status ? (window.vultr = JSON.parse(this.responseText), o.processServers(vultr.servers), window.showWindow(2, !0)) : console.error("Failed to load server data with status code:", this.status))
                }, t.open("GET", "/serverData", !0), t.send(), "Loading..."
            },
            expandedRegion: -1,
            playerCount: 0,
            serverSearch: null,
            searchList: function(t) {
                this.serverSearch = t && "" != t ? t : null;
                var e = document.getElementById("serverHolder");
                e && (e.innerHTML = this.getServers())
            },
            getServers: function() {
                var t = "";
                this.playerCount = 0;
                var e = {
                    custom: {
                        order: 1,
                        name: "Custom Games",
                        players: 0,
                        games: []
                    }
                };
                for (var n in o.servers) {
                    e[n] || (e[n] = {
                        name: o.regionInfo[n].name,
                        players: 0,
                        games: []
                    });
                    for (var r = o.servers[n], a = 0; a < r.length; a++)
                        for (var s = 0; s < r[a].games.length; s++)
                            if (r[a].games[s].active) {
                                var c = r[a].games[s].custom ? "custom" : n;
                                (!this.serverSearch || r[a].games[s].gameInfo.indexOf(this.serverSearch) >= 0) && (e[c].players += r[a].games[s].playerCount), this.playerCount += r[a].games[s].playerCount, e[c].games.push({
                                    server: r[a].index,
                                    index: s,
                                    region: n,
                                    obj: r[a].games[s]
                                })
                            }
                }
                var l = [];
                for (var n in e) e.hasOwnProperty(n) && l.push(e[n]);
                l.sort(function(t, e) {
                    return (e.order || -1) - (t.order || -1)
                }), l[0].games.sort(function(t, e) {
                    return e.obj.playerCount < t.obj.playerCount ? -1 : e.obj.playerCount > t.obj.playerCount ? 1 : 0
                });
                for (var h = 0; h < l.length; h++) {
                    var u = (n = l[h]).name + " - " + n.players + " online",
                        p = this.expandedRegion == h;
                    if (t += "<div class='menuSelectorHeader' onclick='setExpandedRegion(" + (p ? -1 : h) + ")' style='cursor: pointer;'>" + (p ? "&#x25BC;" : "&#x25B6;") + " " + u + "</div>", p) {
                        t += "<div class='menuSelectorHolder'>";
                        for (var d = 0, f = 0; f < n.games.length; f++) {
                            var m = n.games[f],
                                g = o.server && o.server.region == m.region && o.server.index == m.server && o.gameIndex == m.index;
                            if (m.obj.active && (!m.obj.private || g) && (!this.serverSearch || m.obj.gameInfo.indexOf(this.serverSearch) >= 0)) {
                                d++, m.server, i.gamesPerServer, m.index;
                                var v = m.obj.gameInfo + (m.obj.reward ? " <i class='material-icons' style='color:#2196F3'>check_circle</i>" : "") + "<div class='serverPCount'>" + m.obj.playerCount + "/" + m.obj.maxPlayers + "</div>";
                                t += "<div class='menuSelector" + (g ? " selectedMenuSelector" : "") + "' onclick='switchServer(" + m.region + "," + m.server + "," + m.index + ")'>" + v + "</div>"
                            }
                        }
                        n.games.length && d || (t += "<div style='margin-left:30px;margin-top:5px'>No Games Found...</div>"), t += "</div>"
                    }
                }
                return t
            },
            genList: function() {
                var t = this;
                window.setExpandedRegion = function(e) {
                    t.expandedRegion = e, t.lastLoadTime = Date.now(), showWindow(2, !0)
                };
                var e = "<div style='font-size:20px'>";
                return e += "<a class='menuLink' onclick='openHostWindow()'>+ Host Game</a><div style='float:right;display:inline-block'><input id='serverSearch'" + (this.serverSearch ? "value='" + this.serverSearch + "'" : "") + " type='text' placeholder='Search' oninput='windows[1].searchList(this.value)'></input></div><div style='height:10px'></div>", e += "<div id='serverHolder'>" + this.getServers() + "</div>", (e += "<div style='height:10px'></div><b style='color:rgba(0,0,0,0.6)'>" + this.playerCount + " total online</b>") + "</div>"
            }
        }, {
            header: "Change Loadout",
            gen: function() {
                var t = g.classes[ct];
                g.config.classes.indexOf(parseInt(ct)) < 0 && (ct = g.config.classes[0], t = g.classes[ct]);
                var e = g.weapons[t.loadout[0]].name,
                    n = "#2196F3",
                    i = t.loadout[1] ? g.weapons[t.loadout[1]].name : "None",
                    r = t.loadout[1] ? "#2196F3" : "rgba(0,0,0,0.3)",
                    a = "rgba(0,0,0,0.3)",
                    o = a;
                return y && (void 0 != st[t.loadout[0]] && (e = g.store.skins[st[t.loadout[0]]], n = g.store.rarities[e.rarity].color, e = e.name), t.loadout[1] && void 0 != st[t.loadout[1]] && (i = g.store.skins[st[t.loadout[1]]], r = g.store.rarities[i.rarity].color, i = i.name), at >= 0 && (a = g.store.rarities[g.store.skins[at].rarity].color), rt >= 0 && (o = g.store.rarities[g.store.skins[rt].rarity].color)), "<div class='settName'>Class<span class='settText floatR' onclick='showWindow(6)'>" + t.name + "</span></div><div class='settName'>Primary<span class='settLabel wepLink' style='color:" + n + "' onclick='skinSelector(" + t.loadout[0] + ")'>" + e + "</span></div><div class='settName'>Secondary<span class='settLabel" + (t.loadout[1] ? " wepLink" : "") + "' " + (t.loadout[1] ? "onclick='skinSelector(" + t.loadout[1] + ")'" : "") + " style='color:" + r + "'>" + i + "</span></div><div class='settName'>Hat<span onclick='showWindow(16)' class='settText floatR' style='color:" + a + "'>" + (g.store.skins[at] ? g.store.skins[at].name : "None") + "</span></div><div class='settName'>Back<span onclick='showWindow(17)' class='settText floatR' style='color:" + o + "'>" + (g.store.skins[rt] ? g.store.skins[rt].name : "None") + "</span></div><div class='settName'>Spray<span onclick='showWindow(9)' class='settText floatR'>" + g.sprays[te].name + "</span></div>"
            }
        }, {
            header: "Mod Manager",
            gen: function() {
                return "<div id='modLinks'><a href='./docs/mods.txt' class='menuLink'>Guide</a> | <a href='./mod.zip' class='menuLink'>Mod List</a> | <a href='./mod.zip' class='menuLink'>Publish Mod</a></div><form id='modDropper'><input onchange='loadMod()' id='modInput'type='file'><p id='modLInfo'>drop mod file here or click</p></form><input type='text' id='modURL' class='accountInput' style='width:80%' placeholder='Mod Url'><a class='menuLink' style='display:inline-block;margin-left:10px' onclick='loadModURL()'>Load</a>"
            }
        }, {
            header: "Account",
            gen: function() {
                return y ? "<div class='settName' style='width:100%'>Name<a href='/social.html?p=profile&q=" + y.name + "' class='floatR'>" + y.name + "</a></div><div class='settName' style='width:100%'>Clan<a class='floatR' class='menuLink' onclick='showWindow(13)'>" + (y.clan ? "[" + y.clan + "]" : "None") + "</a></div><div class='settName'>Level<span class='floatR'>" + y.level + "</span></div><div class='xpBar'><div class='xpBarB' style='width:" + y.levelProg + "%'></div></div><div class='settName'>Score<span class='floatR'>" + y.score + "</span></div><div class='settName'>KR<span class='floatR'>" + y.funds + "KR</span></div><div class='settName'>Kills<span class='floatR'>" + y.kills + "</span></div><div class='settName'>Deaths<span class='floatR'>" + y.deaths + "</span></div><div class='settName'>KDR<span class='floatR'>" + (y.kills / Math.max(y.deaths, 1)).toFixed(2) + "</span></div><div class='settName'>Games Played<span class='floatR'>" + y.games + "</span></div><div class='settName'>Games Won<span class='floatR'>" + y.wins + "</span></div><div class='settName'>W/L<span class='floatR'>" + (y.wins / Math.max(y.games, 1)).toFixed(2) + "</span></div><div class='settName'>Time Played<span class='floatR'>" + h.getReadableTime(y.timePlayed) + "</span></div><div style='height:10px'></div><a class='menuLink' onclick='logoutAcc()'>Logout</a>" : "<input id='accName' type='text' placeholder='Username' class='accountInput' style='margin-top:0' value='" + (getSavedVal("krunker_username") || "") + "'></input><input id='accPass' type='password' placeholder='Password' class='accountInput'></input><div id='accResp' style='margin-top:10px;color:rgba(0,0,0,0.5);display:none'></div><div class='accountButton' onclick='registerAcc()'>Register</div><div class='accountButton' onclick='loginAcc()' style='margin-left: 20px'>Login</div>"
            }
        }, {
            header: "Select Class",
            gen: function() {
                for (var t = "", e = 0; e < g.classes.length; ++e) g.config.classes.indexOf(e) >= 0 && !g.classes[e].hide && (t += "<div class='selItem' style='margin-top:" + (e > 0 ? "10px" : "") + "'><div class='equipBtn' onclick='selectClass(" + e + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src='./textures/classes/icon_" + e + ".png'/></div><div class='itemInfo'><div class='itemName'>" + g.classes[e].name + "</div><div class='itemCat'>" + g.weapons[g.classes[e].loadout[0]].name + "</div></div></div>");
                return t
            }
        }, {
            header: "Change Controls",
            gen: function() {
                var t = "";
                return t += "<div class='settName'>Forward<span class='settText floatR' id='cont0' onclick='changeCont(0)'>" + h.getKeyName(_.moveKeys[0]) + "</span></div>", t += "<div class='settName'>Backward<span class='settText floatR' id='cont1' onclick='changeCont(1)'>" + h.getKeyName(_.moveKeys[1]) + "</span></div>", t += "<div class='settName'>Left<span class='settText floatR' id='cont2' onclick='changeCont(2)'>" + h.getKeyName(_.moveKeys[2]) + "</span></div>", t += "<div class='settName'>Right<span class='settText floatR' id='cont3' onclick='changeCont(3)'>" + h.getKeyName(_.moveKeys[3]) + "</span></div>", t += "<div class='settName'>Reload<span class='settText floatR' id='cont8' onclick='changeCont(8)'>" + h.getKeyName(_.reloadKey) + "</span></div>", t += "<div class='settName'>Aim<span class='settText floatR' id='cont10' onclick='changeCont(10)'>" + h.getKeyName(_.aimKey) + "</span></div>", t += "<div class='settName'>Spray<span class='settText floatR' id='cont9' onclick='changeCont(9)'>" + h.getKeyName(_.sprayKey) + "</span></div>", t += "<div class='settName'>Jump<span class='settText floatR' id='cont4' onclick='changeCont(4)'>" + h.getKeyName(_.jumpKey) + "</span></div>", t += "<div class='settName'>Crouch<span class='settText floatR' id='cont5' onclick='changeCont(5)'>" + h.getKeyName(_.crouchKey) + "</span></div>", t += "<div class='settName'>Next Weapon<span class='settText floatR' id='cont6' onclick='changeCont(6)'>" + h.getKeyName(_.swapKeyD) + "</span></div>", t += "<div class='settName'>Previous Weapon<span class='settText floatR' id='cont7' onclick='changeCont(7)'>" + h.getKeyName(_.swapKeyU) + "</span></div>", (t += "<div class='settName'>Chat<span class='settText floatR' id='cont11' onclick='changeCont(11)'>" + h.getKeyName(_.chatKey) + "</span></div>") + "<div class='settName'>Voice<span class='settText floatR' id='cont12' onclick='changeCont(12)'>" + h.getKeyName(_.voiceKey) + "</span></div>"
            }
        }, {
            header: "Host Custom Game",
            gen: function() {
                var t = "";
                t += "<div class='settName b'>Select Maps</div>", t += "<div style='margin-top:5px'>";
                for (var e = 0; e < S.length; e++) {
                    var n = S[e],
                        r = "<label class='switch'><input id='gameMap" + e + "' type='checkbox' checked=''><span class='slider'></span></label>";
                    t += "<div class='settNameSmall' style='margin:0'>" + h.capFirst(n.name) + r + "</div>"
                }
                for (t += "<div class='settNameSmall' style='margin:0;margin-top:10px'>Community Maps <a href='javascript:;' onclick='showWindow(11);' class='menuLink' style='float:right;font-size:18px'>" + (mt || "Select") + "</a></div><br/>", t += "<div class='settNameSmall' style='margin:0;margin-top:-24px;'>Raw Map Data<input id='rawMapData' type='text' class='formInput' placeholder='Map Data' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'></div><br/>", t += "</div>", t += "<div class='settName b'>Add Mod Pack</div>", t += "<div class='settNameSmall' style='margin:0;margin-top:5px;'>Mod URL<input id='hostModURL' type='text' class='formInput' placeholder='URL' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'></div><br/>", t += "<div class='settName b'>Select Modes</div>", t += "<div style='margin-top:5px'>", e = 0; e < E.length; e++) {
                    var a = E[e];
                    r = "<label class='switch'><input id='gameMode" + e + "' type='checkbox' " + (e ? "" : "checked") + "><span class='slider'></span></label>", t += "<div class='settNameSmall' style='margin:0'>" + h.capFirst(a.name) + r + "</div>"
                }
                for (t += "<div class='settName b' style='margin-top:20px'>Select Classes</div>", t += "<div style='margin-top:5px'>", e = 0; e < g.classes.length; e++) r = "<label class='switch'><input id='gameClass" + e + "' type='checkbox' checked><span class='slider'></span></label>", t += "<div class='settNameSmall' style='margin:0'>" + g.classes[e].name + r + "</div>";
                for (t += "<div class='settName b' style='margin-top:25px'>Settings</div>", e = 0; e < i.serverConfig.length; e++)(x = i.serverConfig[e]).bool ? t += "<div class='settNameSmall' style='margin:0;margin-bottom:5px;'>" + x.name + " <label class='switch'><input type='checkbox' id='customS" + x.varN + "'><span class='slider'></span></label></div>" : t += "<div class='settNameSmall' style='margin-left:0'>" + x.name + "<span class='sliderVal' id='customSet" + e + "'>" + x.def + "</span><div class='slidecontainer'><input type='range' min='" + x.min + "' max='" + (y && y.featured && x.maxF || x.max) + "' step='" + x.step + "' id='customS" + x.varN + "' value='" + x.def + "' oninput='updateSliderLabel(" + e + ",this.value)' class='sliderM'></div></div>";
                return t += "<div class='settNameSmall' style='margin:0'>Private <label class='switch'><input id='makePrivate' type='checkbox'><span class='slider'></span></label></div>", t += "<div style='text-align:left;margin-top:30px'>", t += "<div style='color:#919191;margin-bottom:5px' id='hostGameMsg'></div>", (t += "<a class='menuLink' onclick='createPrivateRoom()'>Start Game</a><br/>") + "</div>"
            }
        }, {
            header: "Select Spray",
            gen: function() {
                for (var t = "", e = 0; e < g.sprays.length; ++e) t += "<div class='selItem' style='margin-top:" + (e > 0 ? "10px" : "") + "'><div class='equipBtn' onclick='selectSpray(" + e + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src='./textures/sprays/" + e + ".png'/></div><div class='itemInfo'><div class='itemName'>" + g.sprays[e].name + "</div><div class='itemCat'>Default Spray</div></div></div>";
                return t
            }
        }, {
            header: "Custom Maps",
            mapsLoaded: function(t, e) {
                if (yourMaps)
                    if (t && t.length)
                        if (e) mapsList.innerHTML = e;
                        else {
                            for (var n = "", i = 0; i < t.length; ++i) n += "<div class='mapListItem'><a href='javascript:;' onclick='selectHostMap(&quot;" + t[i].map_name + "&quot;)'>" + t[i].map_name + "<span style='float:right'>" + t[i].map_votes + "</span></div>";
                            yourMaps.innerHTML = n
                        }
                else yourMaps.innerHTML = "No Maps found"
            },
            gen: function() {
                var t = "<a href='./editor.html' class='menuLink'>Map Editor</a><a href='/social.html?p=maps' target='_blank' class='menuLink' style='float:right'>Map List</a><br/>" + (y ? "<div style='margin-top:30px' class='setHed'>Your Maps</div><div style='color:rgba(0,0,0,0.3)' id='yourMaps'>Loading...</div><div style='margin-top:30px' class='setHed'>Publish Map</div><div style='color:rgba(0,0,0,0.5)'>To update an existing map, upload your map data under the same name</div><input id='mapDataNew' type='text' placeholder='Paste Map Data' class='mapInput' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'/><div id='mapUpResp' style='color:rgba(0,0,0,0.3);margin-top:8px'></div><div class='mapLoadButton' style='margin-top:6px' onclick='uploadCustomMap()'>Publish</div>" : "<div style='color:rgba(0,0,0,0.3);margin-top:20px'><a href='javascript:;' onclick='showWindow(5);' class='menuLink'>Login</a> to create and upload maps!</div>");
                return y && m.send("getMaps", !0), t
            }
        }, {
            header: "Community Maps",
            searchMaps: function() {
                searchResults.innerHTML = "Loading...", m.send("srchM", mpSrch.value)
            },
            searchResp: function(t) {
                var e = "";
                if (t.length) {
                    e += "<div style='height:10px'></div>";
                    for (var n = 0; n < t.length; ++n) e += "<div class='mapListItem'><a href='javascript:;' onclick='selectHostMap(&quot;" + t[n].map_name + "&quot;)'>" + t[n].map_name + "<span style='color:rgba(0,0,0,0.2)'> by <a target='_blank' class='grey' href='/social.html?p=profile&q=" + t[n].creatorname + "'>" + t[n].creatorname + "</a></span></a><span style='float:right'>" + t[n].map_votes + "</span></div>"
                } else e = "No maps found!";
                document.getElementById("searchResults") && (document.getElementById("searchResults").innerHTML = e)
            },
            mapsLoaded: function(t, e) {
                if (mapsList)
                    if (t && t.length)
                        if (e) mapsList.innerHTML = e;
                        else {
                            for (var n = "<div style='margin-bottom:-5px;margin-top:-5px;'>Search</div><input type='text' id='mpSrch' class='smlInput' placeholder='Map Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[10].searchMaps()'>Search</a><div style='color:rgba(0,0,0,0.5);margin-top:5px' id='searchResults'></div>", i = ["<div style='margin-bottom:5px;margin-top:15px'>Hot</div>", "<div style='margin-top:20px;margin-bottom:5px'>New Maps</div>", "<div style='margin-top:20px;margin-bottom:5px'>Your Favorites</div>"], r = 0; r < t.length; ++r)
                                if (t[r]) {
                                    t[r].length && (n += i[r]);
                                    for (var a = 0; a < t[r].length; ++a) n += "<div class='mapListItem'><a href='javascript:;' onclick='selectHostMap(&quot;" + t[r][a].map_name + "&quot;)'>" + t[r][a].map_name + "</a><span style='color:rgba(0,0,0,0.2)'> by <a target='_blank' class='grey' href='/social.html?p=profile&q=" + t[r][a].creatorname + "'>" + t[r][a].creatorname + "</a></span><span style='float:right'>" + t[r][a].map_votes + "</span></div>"
                                } mapsList.innerHTML = n
                        }
                else mapsList.innerHTML = "No Maps found"
            },
            gen: function() {
                return m.send("getMaps"), "<div style='color:rgba(0,0,0,0.3)' id='mapsList'>Loading...</div>"
            }
        }, {
            header: "Theatre Mode",
            gen: function() {
                return "<div class='setHed' style='margin-top:0'>Settings</div><div class='settName'>Enable Recording<label class='switch'><input type='checkbox' onclick='enableRecord(this.checked)' " + (Ht ? "checked" : "") + "><span class='slider'></span></label></div><div class='settName'>Record Key<span class='settText floatR' id='cont13' onclick='changeCont(13, true)'>" + h.getKeyName(_.recordKey) + "</span></div><div style='height:20px'></div><a href='./theatre.html' class='menuLink'>Theatre Mode</a>"
            }
        }, {
            header: "Clans",
            clanData: null,
            sendReq: function(t) {
                var e = document.getElementById("clanErr");
                e && (e.style.color = "rgba(0,0,0,0.6)", e.innerHTML = "Loading...");
                var n = (e = document.getElementById("clanInp" + t)) ? e.value : null;
                m.send("cln", t, n || 1)
            },
            updReq: function(t, e, n) {
                m.send("clnR", e, n), this.clanData.members && 1 == n && this.clanData.members.push({
                    player_name: this.clanData.requests[t].player_name
                }), this.clanData.requests.splice(t, 1), updateWindow(13)
            },
            delReq: function() {
                this.clanData = null, y && (y.clan = null), m.send("cln", 4, 1), showWindow(5)
            },
            resp: function(t, e, n) {
                var i = document.getElementById("clanErr");
                t && i ? (i.style.color = n ? "rgba(0,0,0,0.6)" : "rgba(255,0,0,0.6)", i.innerHTML = t) : e && (y && (y.clan = e.clan_name), this.clanData = e, updateWindow(13))
            },
            gen: function() {
                var t = "",
                    e = "";
                if (this.clanData && this.clanData.members) {
                    t = "<div class='setHed' style='margin-top:10px'>Members (" + this.clanData.members.length + ")</div>";
                    for (var n = 0; n < this.clanData.members.length; ++n) t += "<div class='settName'><a target='_blank'href='/social.html?p=profile&q=" + this.clanData.members[n].player_name + "'>" + this.clanData.members[n].player_name + "</a></div>"
                }
                if (this.clanData && this.clanData.requests) {
                    for (e = "<div class='setHed' style='margin-top:10px'>Requests</div>", n = 0; n < this.clanData.requests.length; ++n) e += "<div class='settName'><a  target='_blank' href='/social.html?p=profile&q=" + this.clanData.requests[n].player_name + "'>" + this.clanData.requests[n].player_name + "</a><span style='float:right'><i style='font-size:40px;color:rgba(255,0,0,0.6)'  class='material-icons h' onclick='windows[12].updReq(" + n + "," + this.clanData.requests[n].cr_playerid + ", 0)'>clear</i><i style='font-size:40px;color:rgba(0,255,0,0.6);margin-left:10px' class='material-icons h' onclick='windows[12].updReq(" + n + "," + this.clanData.requests[n].cr_playerid + ", 1)'>done</i></span></div>";
                    this.clanData.requests.length || (e += "<div style='color:rgba(0,0,0,0.4)'>No Requests</div>")
                }
                var r = y ? y.clan ? "<div class='setHed' style='margin-top:0px'>[" + y.clan + "] Clan Page<a style='float:right' href='javascript:;' onclick='windows[12].delReq()' class='menuLink'>" + (this.clanData ? y && this.clanData.clan_playerid == y.id ? "Delete" : "Leave" : "") + "</a></div><div id='clanErr' style='margin-top:0px;color:rgba(0,0,0,0.5)'>" + (this.clanData ? "<div class='settName'>Level<span class='floatR'>" + Math.max(1, Math.floor(i.rankVar * Math.sqrt(this.clanData.clan_score || 0))) + "</span></div><div class='settName'>Score<span class='floatR'>" + (this.clanData.clan_score || 0) + "</span></div>" + t + e : "Loading...") + "</div>" : "<div class='setHed' style='margin-top:-5px'>Create Clan</div><input id='clanInp1' type='text' class='smlInput' maxlength='4' placeholder='Clan Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[12].sendReq(1)'>Create</a><div style='margin-top:0px' class='setHed'>Join Clan <a href='./social.html?q=clan' class='menuLink' style='margin-top:10px;display:inline-block'>View Clans</a></div><input id='clanInp2' type='text' class='smlInput' maxlength='4' placeholder='Clan Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[12].sendReq(2)'>Submit</a><div id='clanErr' style='margin-top:10px'></div>" : "<div style='color:rgba(0,0,0,0.3);margin-top:20px'><a href='javascript:;' onclick='showWindow(5);' class='menuLink'>Login</a> to create and join a clan!</div>";
                return y && y.clan && !this.clanData && this.sendReq(3), r
            }
        }, {
            header: "Store",
            gen: function() {
                for (var t = "", e = 0; e < g.store.wheels.length; ++e) t += "<div><a href='javascript:;' class='menuLink' onclick='prizeWheel(" + e + ")'>" + (x = g.store.wheels[e]).name + " Spin</a> <span style='color:#fff;margin-left:5px;background-color:" + x.lab.col + ";font-size:15px;padding:3px;padding-left:8px;padding-right:8px'> " + x.lab.nm + " </span><span style='float:right;color:rgba(0,0,0,0.3)'>" + x.price + "<span style='color:rgba(0,0,0,0.6)'> KR</span></span></div>";
                var n = "<div style='color:rgba(0,0,0,0.3);font-size:19px;margin-bottom:10px'>By purchasing you agree to the <a href='./docs/terms.txt'>Terms</a></div>";
                for (e = 0; e < g.store.purchases.length; ++e) n += "<div><a href='javascript:;' class='menuLink' onclick='showPurchase(" + e + ")'>" + (x = g.store.purchases[e]).val + " KR </a><span style='float:right;color:rgba(0,0,0,0.3)'>" + (x.tag ? "<span style='color:#fff;font-size:15px;padding:10px;padding-top:2px;vertical-align:middle;padding-bottom:2px;background-color:" + x.tagCol + "'>" + x.tag + "</span> " : "") + x.price + "<span style='color:rgba(0,0,0,0.6)'> USD</span></span></div>";
                return y ? "<b style='font-size:22px'>Prize Wheels</b><div style='color:rgba(0,0,0,0.3);margin-bottom:10px'>Unlock new weapon skins and items</div>" + t + "<div style='height:10px;'></div><b style='font-size:22px;margin-bottom:10px'>Purchase KR</b>" + n + "<div style='float:right;margin-top:10px'>" + y.funds + " KR in account</div>" : "<div style='color:rgba(0,0,0,0.3)'><a href='javascript:;' onclick='showWindow(5);' class='menuLink'>Login</a> to buy and unlock items from the store!</div>"
            }
        }, {
            header: "Select Skin",
            gen: function() {
                var t = "<div class='selItem'><div class='equipBtn' onclick='selectSkin(-1," + lt + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName'>Default</div><div class='itemCat'>Default Skin</div></div></div>";
                if (y)
                    for (var e = y.skins.slice().sort(function(t, e) {
                            return g.store.skins[e.ind] && g.store.skins[t.ind] ? g.store.skins[e.ind].rarity - g.store.skins[t.ind].rarity : 0
                        }), n = 0; n < e.length; ++n)(x = g.store.skins[e[n].ind]) && !x.type && x.weapon == lt + 1 && (t += "<div class='selItem' style='margin-top:10px'><div class='equipBtn' onclick='selectSkin(" + e[n].ind + "," + (x.weapon - 1) + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName' style='color:" + g.store.rarities[x.rarity].color + "'>" + x.name + "<span style='color:rgba(0,0,0,0.3)'> x" + e[n].cnt + "</span></div><div class='itemCat'>by " + (x.creator || "Krunker.io") + "</div></div></div>");
                return t
            }
        }, {
            header: "Select Hat",
            gen: function() {
                return ht("selectHat", 1)
            }
        }, {
            header: "Select Back",
            gen: function() {
                return ht("selectBack", 2)
            }
        }], Q = 0; Q < windows.length; ++Q) windows[Q].html = "";
    var ut = 0;
    window.updateWindow = function(t, e) {
        "block" == windowHolder.style.display && (ut == t && null != t ? showWindow(t, !0) : e && showWindow(ut, !0))
    }, window.showWindow = function(t, e) {
        window.idleTimer = 0, e || t && ("block" != windowHolder.style.display || t != ut) ? (d.toggleMenu(!0), windows[t - 1].gen ? menuWindow.innerHTML = windows[t - 1].gen() : menuWindow.innerHTML = windows[t - 1].html, ut = t, windowHeader.innerHTML = windows[t - 1].header, d.toggleWindow(!0)) : (d.toggleWindow(!1), _.inputChanger = null)
    };
    var pt, dt, ft, mt, gt = spinWindow,
        vt = gt.getContext("2d"),
        yt = .95,
        xt = .6,
        wt = null,
        bt = !1,
        Mt = 0,
        _t = 0,
        St = 0,
        Et = 0,
        Tt = 0,
        At = 30,
        Lt = 300,
        Rt = !0,
        Pt = 0,
        Ct = 0,
        It = new l.PerspectiveCamera(45, 1, .1, 100),
        Ot = new l.WebGLRenderer({
            precision: "mediump",
            antialias: !1,
            alpha: !0
        });

    function Dt(t, e) {
        var n = g.store.skins[e];
        n && Ae(null, "<span style='color:#fff'>" + t + "</span> unboxed <span style='color:" + g.store.rarities[n.rarity].color + "'>" + n.name + "</span>", !0)
    }

    function Bt(t, e, n, i) {
        if (bt = !1, i);
        else {
            if (wt = g.store.skins[e], spinItemName.innerHTML = wt.name + "<div style='color:rgba(255,255,255,0.5)'>by " + (wt.creator || "Krunker.io") + "</div>", _t = 2 * Math.PI * (t / 100 + 13) + Math.PI / 2, y)
                if (y.funds = n, spinKR.innerHTML = y.funds + " KR", y.skins.some(t => t.ind === e)) {
                    var r = y.skins.find(t => t.ind === e);
                    r && r.cnt++
                } else y.skins.push({
                    ind: e,
                    cnt: 1
                });
            spinRotation = 0, Pt = 0, spinCost.innerHTML = "", (pt = new l.Scene).add(new l.AmbientLight(5197647));
            var a = new l.DirectionalLight(16777215, .5);
            a.position.set(3, 1, 0), pt.add(a);
            var o = wt.type ? wt : g.store.previews[wt.weapon] || {};
            (dt = u.genObj3D(0, 1 + (o.yOff || 0), o.xOff || 0)).rotateX(-Math.PI / 7), dt.rotateY(Math.PI + .5), dt.rotateZ(-.5), u.loadMesh({
                src: g.store.types[wt.type || 0] + (wt.type ? wt.id : wt.weapon),
                texSrc: wt.type ? wt.tex ? "hats/hat_" + wt.id + "_" + wt.tex : null : "weapons/skins/weapon_" + wt.weapon + "_" + wt.id,
                glowText: !wt.type && wt.glow,
                emissive: wt.glow ? 16777215 : null,
                noGreen: !0,
                uv2: !0,
                fillScale: 60,
                centerZ: !0
            }, 0, 0, 0, wt.type ? Math.PI : Math.PI / 2, 2.2 * (o.scl || 1), dt), pt.add(dt), It.lookAt(pt.position)
        }
    }

    function Nt(t, e, n) {
        windows[12].resp(t, e, n)
    }

    function kt(t, e, n) {
        windows[t].mapsLoaded(e, n)
    }

    function Ut(t, e) {
        windows[t].searchResp(e)
    }
    Ot.setPixelRatio(.6 * window.devicePixelRatio), It.position.y = 10, spinItemCanvas.appendChild(Ot.domElement), window.prizeWheel = function(t) {
        ft = g.store.wheels[t], St = t, showWindow(0), Mt = 0, Rt = !bt, _t = 0, Ct = 0, spinRotation = 0, Et = Tt = 0, menuHider.style.display = "none", spinItem.style.display = "none", spinItemName.style.display = "none", spinUI.style.display = "block", It.position.x = Lt, spinButton.style.opacity = 1, spinText.style.display = "table-cell", spinHeader.innerHTML = "SPIN", spinCost.innerHTML = "-" + ft.price + "KR";
        for (var e = "<div style='font-size:50px;color:#fff'>" + ft.name.toUpperCase() + "</div>", n = 0; n < g.store.rarities.length; ++n) e += "<div style='margin-top:5px;color:#fff'>" + (x = g.store.rarities[n]).name + "<span style='color:rgba(255,255,255,0.5)'>&emsp;" + ft.rarities[n] + "%</span><div class='colCub' style='background-color:" + x.color + "'></div></div>";
        spinInfo.innerHTML = e, y && (spinKR.innerHTML = y.funds + " KR")
    }, spinButton.onclick = function(t) {
        t.stopPropagation(), t.preventDefault(), window.idleTimer = 0, m && !bt && Rt && y && y.funds >= ft.price && (bt = !0, Rt = !1, m.send("spin", St), spinHeader.innerHTML = "", spinCost.innerHTML = "Purchasing...", SOUND.play("buy_1", .1))
    }, spinUI.onclick = function(t) {
        showWindow(0), menuHider.style.display = "block", spinUI.style.display = "none", m && m.send("unbx")
    }, window.selectHostMap = function(t) {
        mt = t, showWindow(8)
    }, window.openHostWindow = function() {
        mt = null, showWindow(8)
    };
    var zt, Ft = 1e4,
        Ht = "true" == getSavedVal("krk_record");

    function Gt(t) {
        mapUpResp && (mapUpResp.innerHTML = t)
    }
    window.enableRecord = function(t) {
        Ht = t, saveVal("krk_record", t)
    }, enableRecord(Ht), window.uploadCustomMap = function() {
        mapUpResp && (mapUpResp.innerHTML = "Loading..."), m.send("uploadM", mapDataNew.value)
    }, zip.workerScriptsPath = "./libs/";
    var jt = new FileReader;

    function Vt(t) {
        this.imgAsDataURL = "", this.process = function(e) {
            if (this.imgAsDataURL = URL.createObjectURL(e), this.imgAsDataURL && t) {
                try {
                    var n = new Image;
                    n.onload = function() {
                        u.updateTexture(t.replace("textures/", "").replace(".png", ""), this)
                    }, n.src = this.imgAsDataURL
                } catch (t) {}
                Xt.close()
            }
        }
    }

    function Wt(t) {
        this.filename = t;
        var e = this;
        this.process = function(t) {
            var n = URL.createObjectURL(t);
            if (n) {
                try {
                    var i = e.filename.split("/")[1];
                    "ambient_1" == i && SOUND.stop("ambient_1"), SOUND.sounds[i] = new Howl({
                        src: [n],
                        format: "mp3"
                    }), SOUND.sounds[i + "3d"] = new Howl({
                        src: [n],
                        format: "mp3"
                    }), "ambient_1" == i && SOUND.play("ambient_1", .12, !0)
                } catch (t) {}
                Xt.close()
            }
        }
    }
    jt.onload = function(t) {
        var e = t.target.result;
        loadModPack(e)
    };
    var Yt, Xt = new function() {
        this.init = function(t, e) {
            this.numFiles = e, this.progress = 0, this.reader = t
        }, this.close = function() {
            this.reader && (this.progress++, document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "extracting " + this.progress + "/" + this.numFiles), this.numFiles === this.progress && (spriteIndex = 0, document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "success!"), this.reader.close(), this.reader = void 0))
        }
    };

    function qt(t, e) {
        B = e, se(), ne(t), d.toggleMenu(!1),
            function() {
                xe.length = 0, Ee.length = 0, d.toggleGameUI(!0), f.reset(), _.reset(), Kt(!1), g.players.forcePos(), I.length = 0, window.loading = !1, window.idleTimer = 0, teamName.innerHTML = "", instructions.innerHTML = "CLICK TO PLAY", M = null;
                for (var t = 0; t < playerInfos.children.length; t++) playerInfos.children[t].style.display = "none"
            }(), d.toggleControlUI(_.enabled), g.updateUI()
    }

    function Zt(t, e, n, i, r, a, o) {
        a ? a.data && g.customMap(a.data, a.id, a.creator, null, !0) : g.map.setMaps(), A = n && n == m.socketId, mapVote.innerHTML = "", Yt = 0, n && a && void 0 != a.id && (mapVote.innerHTML = "<i id='mapVoteD' onclick='voteMap(" + a.id + ",-1)' class='material-icons vote'>thumb_down</i><i id='mapVoteU' onclick='voteMap(" + a.id + ",1)' class='material-icons vote'>thumb_up</i>"), g.applyConfig(i, a && a.featured), g.init(t, e, o), r && loadModPack(r, !0), C = null, _.reset();
        var s = g.map.maps[t];
        _.moveCam(s.camPos[0], s.camPos[1], s.camPos[2]), _.rotateCam(0, 0, 0), u.clearSprays(), u.scene.add(_.object), v = null, playerInfos.innerHTML = "", killsVal.innerHTML = 0, D = 0, K(), _.masterLock = !1, instructions.innerHTML = "CLICK TO PLAY"
    }

    function Kt(t) {
        window.locked = t, blocker.style.display = t ? "block" : "none"
    }

    function Jt(t, e, n) {
        instructions.innerHTML = "CLICK TO PLAY", victoryText.innerHTML = e ? "VICTORY" : "DEFEAT", victorySub.src = "./img/" + (e ? "sub" : "defeat") + ".png", v && v.active ? (d.showEndScreen(), C = i.endAnim, setTimeout(function() {
            m.connected && (_.disable(), Qt(n))
        }, i.endAnim)) : t && (_.disable(), d.showEndScreen(), Qt(n))
    }

    function Qt(t) {
        if (t && t.length) {
            endTable.style.display = "inline-block";
            for (var e = "<tr><th>Rank</th>", n = g.mode.endStats || i.endStats, r = n.length, a = 1; a < r; ++a) e += "<th>" + h.capFirst(n[a]) + "</th>";
            e += "</tr>";
            var o = 1;
            for (a = 0; a < t.length;) {
                if (x = g.players.findBySid(t[a])) {
                    e += "<tr style='" + (a + r >= t.length ? "border-bottom:none" : "") + "'><td style='color:#fff'>" + o + ".</td>";
                    for (var s = 1; s < r; ++s) e += "<td " + (1 != s ? "" : "style='color:" + (v && v.sid == x.sid ? "#fff'" : v && v.team && v.team == x.team ? "rgba(255,255,255,0.6)'" : "#eb5656'")) + ">" + (t[a + s] || 0) + (1 == s && x.clan ? "<span style='color:#fff'> [" + x.clan + "]<span>" : "") + "</td>"
                }
                e += "</tr>", o++, a += r
            }
            endTable.innerHTML = e
        } else endTable.style.display = "none"
    }

    function $t(t, e, n) {
        g.playerSound(t, e, n)
    }
    window.loadModURL = function() {
        modURL.value && loadModPack(modURL.value, !0)
    }, window.loadModPack = function(t, e) {
        try {
            t = t.replace("dropbox.com", "dl.dropboxusercontent.com");
            var n = "",
                i = e ? new zip.HttpReader(t) : new zip.Data64URIReader(t);
            zip.createReader(i, function(t) {
                t.getEntries(function(e) {
                    if (e.length) {
                        Xt.init(t, e.length);
                        for (var i = 0; i < e.length; i++) {
                            var r = e[i];
                            r.directory ? Xt.close() : "textures" == (n = r.filename.split("/")[0]) ? r.getData(new zip.BlobWriter("image/png"), new Vt(r.filename).process, function(t, e) {}) : "sound" == n && r.getData(new zip.BlobWriter("audio/mp3"), new Wt(r.filename.replace(".mp3", "")).process, function(t, e) {})
                        }
                    }
                })
            }, function(t) {
                document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "mod error!")
            })
        } catch (t) {
            document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "mod error!")
        }
    }, window.loadMod = function() {
        if (modInput.files && modInput.files[0]) {
            var t = modInput.files[0];
            "zip" == t.name.split(".").pop().toLowerCase() ? (document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "loading mod..."), jt.readAsDataURL(t)) : document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "invalid mod file!")
        }
    }, window.voteMap = function(t, e) {
        if (y) {
            var n = document.getElementById("mapVoteU"),
                i = document.getElementById("mapVoteD"),
                r = 0;
            1 == e ? (r = 1, 1 == Yt && (r = 0)) : -1 == e && (r = -1, -1 == Yt && (r = 0)), Yt = r, n.className = 1 == Yt ? "material-icons vote a" : "material-icons vote", i.className = -1 == Yt ? "material-icons vote a" : "material-icons vote", m.send("vote", y.id, loginToken, t, r)
        }
    };
    var te = getSavedVal("sprayindex") || 0;

    function ee(t, e, n, i, r, a, o) {
        u.addSpray(t, e, n, i, r, a, o, g.sprays[e].opacity)
    }

    function ne(t, e) {
        e ? endTimer.innerHTML = "Next Round in " + t : (timerVal.innerHTML = t, timerDisplay.style.display = "0:00" == t ? "none" : "inline-block")
    }

    function ie(t) {
        for (var e = 0; e < t.length;) {
            var n = t[e] == m.socketId;
            (x = g.players.add(t[e], t[e + 1], t[e + 2], t[e + 3], t[e + 4], t[e + 5], t[e + 6], t[e + 11], t[e + 12], t[e + 13], n)).health = null == t[e + 7] ? x.maxHealth : t[e + 7], x.team = t[e + 8], x.level = t[e + 9], x.clan = t[e + 10], n ? (v = x, g.mode.showTeam && (teamName.innerHTML = v.team)) : playerInfos.innerHTML += "<div id='pInfo" + x.sid + "' class='playerInfo'>" + (x.level ? "<div class='playerRank' id='pInfoR" + x.sid + "'>" + x.level + "</div>" : "") + "<div class='pInfoH' id='pInfoH" + x.sid + "'>" + x.name + (x.clan ? "<span style='color:rgba(255,255,255,0.4)'> [" + x.clan + "]</span>" : "") + "</div><div></div><div class='playerHealth' id='pInfoHB" + x.sid + "'><div class='healthBar" + (B && B == x.team ? "" : "E") + "' id='healthBarE" + x.sid + "'></div></div></div>", Se(x.health, x.sid, null, null), e += 14
        }
    }

    function re(t) {
        if (m.send("p"), v) {
            v.x = t[1], v.y = t[2], v.z = t[3], v.xVel = t[4], v.yVel = t[5], v.zVel = t[6], v.onGround = t[7], v.didJump = t[8], v.onLadder = t[9], v.aimVal = t[10], v.crouchVal = t[11], g.players.swapWeapon(v, 0, !1, t[12]);
            for (var e = 0; e < _.tmpInputs.length;) _.tmpInputs[e][0] <= t[0] ? _.tmpInputs.splice(e, 1) : (v.processInput(_.tmpInputs[e], g, !0), e++)
        }
    }

    function ae() {
        if (!g.singlePlayer && v && v.active)
            for (var t = 0; t < g.players.list.length; ++t)(x = g.players.list[t]).active && x.objInstances && x != v && (x.notObstructed = !0, B && B == x.team || !g.config.nameTags && !g.mode.hideNames && null == g.canSee(v, x.x, x.y, x.z) || (x.notObstructed = !1), g.players.toggleLOD(x, !(null != g.canSee(v, x.x, x.y, x.z, 10))))
    }

    function oe(t) {
        gameMessage.innerHTML = t || ""
    }

    function se() {
        for (var t = 0; t < g.players.list.length; ++t) {
            x = g.players.list[t];
            var e = document.getElementById("healthBarE" + x.sid);
            e && (e.className = "healthBar" + (B && B == x.team ? "" : "E"))
        }
    }

    function ce(t, e) {
        if (x = g.players.findBySid(t))
            if (x.team = e, x == v) B = e, g.mode.showTeam && (teamName.innerHTML = B), se();
            else {
                var n = document.getElementById("healthBarE" + t);
                n && (n.className = "healthBar" + (B && B == x.team ? "" : "E"))
            }
    }

    function le(t) {
        g.players.hideAll();
        for (var e = 0; e < t.length;)(x = g.players.findBySid(t[e])) && x != v && (x.objInstances.visible = !x.lodActive, x.latestData = !0, x.forcePos ? (x.x = t[e + 1], x.y = t[e + 2], x.z = t[e + 3], x.xDir = t[e + 4], x.yDir = t[e + 5], x.interpolate = !1, x.forcePos = !1) : (x.dt = 0, x.x1 = x.x, x.x2 = t[e + 1], x.y1 = x.y, x.y2 = t[e + 2], x.z1 = x.z, x.z2 = t[e + 3], x.xDir1 = x.xDir, x.xDir2 = t[e + 4], x.yDir1 = x.yDir, x.yDir2 = t[e + 5], x.interpolate = !0), x.onGround = t[e + 6], x.crouchVal = t[e + 7], g.players.swapWeapon(x, 0, !1, t[e + 8])), e += 9
    }

    function he(t) {
        g.players.remove(t)
    }

    function ue(t, e, n, r) {
        if (x = g.players.findBySid(t), w = g.players.findBySid(e), x) {
            if (g.players.kill(x), x.isYou) {
                var a = "";
                if (w) {
                    x != w && (_.camLookAt(w.x, w.y + w.height - i.cameraHeight, w.z), w.interpolate = !1, w.notObstructed = !0), a = "<img id='kCProfile' src='./textures/classes/icon_" + w.classIndex + ".png' />", a += "<div id='kCName'>" + (w ? w.name : "You") + (w.clan ? "<span style='color:rgba(255,255,255,0.3)'> [" + w.clan + "]</span>" : "") + "</div>";
                    var o = w.loadout.indexOf(n[0]),
                        s = void 0 != w.skins[o] ? w.skins[o] : null;
                    void 0 != s && (s = g.store.skins[s]), a += "<br/><div id='kCInfo' style='color:" + (s ? g.store.rarities[s.rarity].color : "rgba(255,255,255,0.7)") + "'>[" + (s ? s.name : g.weapons[n[0]].name) + "] <span id='kCInfoS'>+" + n[1] + "</span></div>"
                }
                killCard.innerHTML = a, d.toggleGameUI(!1), setTimeout(function() {
                    K()
                }, i.deathDelay)
            }
            if (!r) {
                var c = x == v ? "<span style='color:#fff'>You</span>" : "<span style='color:" + (B && B == x.team ? "#9eeb56" : "#eb5656") + "'>" + x.name + "</span>",
                    l = w == v ? "<span style='color:#fff'>You</span>" : w ? "<span style='color:" + (B && B == w.team ? "#9eeb56" : "#eb5656") + "'>" + w.name + "</span>" : "";
                Ae(null, w ? l + " killed " + c : c + " committed " + i.suicides[h.randInt(0, i.suicides.length - 1)], !0)
            }
        }
    }

    function pe(t, e, n) {
        x = g.players.findBySid(t), w = g.players.findBySid(e), x && Ae(null, (x == v ? "<span style='color:#fff'>You</span>" : "<span style='color:" + (B && B == x.team ? "#9eeb56" : "#eb5656") + "'>" + x.name + "</span>") + " " + n + " " + (w == v ? "<span style='color:#fff'>You</span>" : w ? "<span style='color:" + (B && B == w.team ? "#9eeb56" : "#eb5656") + "'>" + w.name + "</span>" : ""), !0)
    }

    function de(t) {
        if (v) {
            for (var e = "", n = 1, i = 0; i < t.length; i += 6) e += "<div class='leaderItem'>", e += "<div class='leaderCounter'>" + n + ".</div>", e += "<div class='leaderName" + (t[i] == v.sid ? "M" : B && B == t[i + 2] ? "F" : "") + "'>" + t[i + 1] + (t[i + 4] ? "<span style='color:#fff'> [" + t[i + 4] + "]</span>" : "") + (t[i + 5] ? " <i class='material-icons' style='color:#40C4FF'>check_circle</i>" : "") + "</div>", e += "<div class='leaderScore'>" + h.formatNum(t[i + 3]) + "</div>", e += "</div>", n++;
            leaderContainer.innerHTML = e
        }
    }

    function fe(t, e, n, r, a, o) {
        if (v && v.active) {
            if (x = g.players.findBySid(t)) {
                var s = x.y + x.height - i.cameraHeight - x.crouchVal * i.crouchDst,
                    c = h.getDistance3D(x.x, s, x.z, e, n, r),
                    l = h.getDirection(x.z, x.x, r, e),
                    u = h.getDirection(h.getDistance(x.x, x.z, e, r), n, 0, s);
                p.physObj(x.x, s, x.z, l, u, c, 0)
            }
            void 0 != a && null == g.canSee(v, e, n, r) && p.effect(e, n, r, a, o, 0)
        }
    }

    function me(t, e, n, i, r, a, o) {
        var s = g.projectiles.types[a];
        p.physObj(t, e, n, i, r, g.projectiles.types[a].range, null, null, s, o)
    }

    function ge(t) {
        p.disablePhys(t)
    }

    function ve(t, e, n, r) {
        if (v) {
            var a = 1 - h.getDistance3D(t, e, n, v.x, v.y, v.z) / i.explosionRange;
            a > 0 && u.shake(.14 * a), SOUND.play3D("explosion", t, e, n, 1, h.randFloat(.9, 1.1)), p.ExplosionManager.explodeAt(t, e, n, .08 * r)
        }
    }

    function ye(t) {
        D += t, f.animateText(scoreText, "+" + D, 100, .38, 1100, 100, 0, function() {
            D = 0
        }), v.score += t
    }
    window.selectSpray = function(t) {
        saveVal("sprayindex", t), te = t, showWindow(3)
    };
    var xe = [];

    function we(t, e, n) {
        Me(t), e && SOUND.play("headshot"), killsVal.innerHTML = n
    }

    function be() {
        Me(["Assist", i.assistScore])
    }

    function Me(t) {
        if (t) {
            for (var e = 0 == xe.length, n = 0; n < t.length; ++n) "" == t[n] ? n++ : xe.push(t[n]);
            e && function t(e) {
                xe.length > 0 && f.animateText(chalName, "<span class='cTxt'>" + xe[0] + "</span><div id='chalScore'>+" + xe[1] + "</div>", 130, .4, i.medalAnim, 100, e, function() {
                    xe.splice(0, 2), t(0)
                })
            }(i.medalDelay)
        }
    }
    var _e = 0;

    function Se(t, e, n, r) {
        if (v && (x = void 0 == e || null == e ? v : g.players.findBySid(e))) {
            x.health = t, x.health > x.maxHealth && (x.maxHealth = x.health);
            var a = t / x.maxHealth * 100;
            x == v ? (healthValue.innerHTML = t + " <span id='maxHP'>|" + x.maxHealth + "</span>", healthBarH.style.width = a + "%", healthBarH.style.backgroundColor = a <= 35 ? "#eb5656" : "#9eeb56", bloodDisplay.style.display = a <= 90 ? "block" : "none", bloodDisplay.style.opacity = 1 - a / 90, t < _e && (void 0 != n && null != n && function(t, e) {
                for (var n = null, r = 0; r < Ee.length; ++r)
                    if (!Ee[r].life) {
                        n = Ee[r];
                        break
                    } n || (n = {}, Ee.push(n)), n.life = i.hitLife, n.x = t, n.z = e
            }(n, r), SOUND.play("impact_0", .8)), _e = t) : document.getElementById("healthBarE" + e).style.width = a + "%"
        }
    }
    var Ee = [];

    function Te(t, e, n) {
        SOUND.play("hit_0", 3), f.animateDiv(hitmarker, 400, 100, 14)
    }

    function Ae(t, e, n) {
        for (chatList.innerHTML += n ? "<div class='chatItem'><span class='chatMsg'>" + e + "</span></div><br/>" : "<div class='chatItem'>" + (t || "unknown") + ": <span class='chatMsg'>" + e + "</span></div><br/>"; chatList.scrollHeight >= 250;) chatList.removeChild(chatList.childNodes[0])
    }

    function Le() {
        L = Date.now(), R = L - P, R = Math.min(R, i.dltMx), P = L, C > 0 && (C -= R) <= 0 && (C = 0), null != C && (R *= C / i.endAnim), v || (O += 1e-4 * R, O %= 2 * Math.PI, _.rotateCam(O, 0, 0)),
            function(t) {
                if ("block" == spinUI.style.display && (gt.width = gt.clientWidth, gt.height = gt.clientHeight, spinItemCanvas.style.width = 1.5 * gt.clientWidth + "px", spinItemCanvas.style.height = 1.5 * gt.clientWidth + "px", Ot.setSize(1.5 * gt.clientWidth, 1.5 * gt.clientWidth), gt.width > 0)) {
                    Mt < 1 && (Mt += .008 * t) >= 1 && (Mt = 1), Et < Tt && ((Et += .4 * t) >= Tt && (Et = Tt), spinItem.style.display = "block", spinItemName.style.display = "inline-block"), spinRotation != _t && (spinRotation += .024 * (_t - spinRotation), (Ct -= .024 * (_t - spinRotation)) <= 0 && (Ct += Math.PI / 1.5, SOUND.play("tick_0", .2)), _t - spinRotation <= .002 && (spinRotation = _t, Tt = 100 - ft.rarities[wt.rarity], SOUND.play("reward", .3), m && m.send("unbx"), wt.rarity >= 1 && SOUND.play("cheer_0", .1)));
                    var e = 1 - (Tt ? Et / Tt : 0);
                    vt.translate(2, 2);
                    var n = gt.width / 2 * yt * Mt;
                    spinButton.style.opacity = e;
                    var i = .3 * n * (1 - e);
                    spinButton.style.width = 2 * n * xt * .8 + i + "px", spinButton.style.height = 2 * n * xt * .8 + i + "px", spinText.style.fontSize = 2 * n * xt * .15 + i + "px", spinCost.style.fontSize = 2 * n * xt * .08 + i + "px", vt.fillStyle = "#fff", vt.beginPath(), vt.arc(gt.width / 2, gt.height / 2, n, 0, 2 * Math.PI), vt.closePath(), vt.fill();
                    var r = 0;
                    if (vt.save(), vt.translate(gt.width / 2, gt.height / 2), Tt) {
                        for (var a = 0, o = 0; o < g.store.rarities.length; o++) {
                            if (wt.rarity == o) {
                                a += ft.rarities[o] / 2;
                                break
                            }
                            a += ft.rarities[o]
                        }
                        a /= 100, a = 2 * Math.PI * a * (Et / Tt) % (2 * Math.PI), vt.rotate(a - Math.PI * (Et / Tt))
                    }
                    for (o = 0; o < g.store.rarities.length; o++) {
                        x = g.store.rarities[o], vt.fillStyle = x.color, vt.beginPath();
                        var s = ft.rarities[o];
                        Tt && (wt.rarity == o ? s += Et : s -= Et * (ft.rarities[o] / Tt)), s > 0 && (vt.moveTo(0, 0), vt.arc(0, 0, .95 * n, r, r + 2 * Math.PI * (s / 100), !1), vt.lineTo(0, 0), vt.fill()), r += 2 * Math.PI * (s / 100)
                    }
                    vt.restore(), vt.fillStyle = "#F44336", vt.save(), vt.translate(gt.width / 2, gt.height / 2), vt.rotate(spinRotation), vt.beginPath();
                    var c = (spinButton.getBoundingClientRect().width / spinButton.offsetWidth - 1) * (n * xt) * .3;
                    if (vt.moveTo(0, (n * xt * -1.2 - c) * e), vt.lineTo(n * xt * e, 0), vt.lineTo(-n * xt * e, 0), vt.closePath(), vt.fill(), vt.restore(), vt.fillStyle = "#fff", vt.beginPath(), vt.arc(gt.width / 2, gt.height / 2, n * xt, 0, 2 * Math.PI), vt.closePath(), vt.fill(), "block" == spinItem.style.display && pt) {
                        var l = 1 - Math.abs(It.position.x - At) / (Lt - At);
                        spinItemName.style.opacity = l, spinItemName.style.marginTop = .6 * n + "px", spinItemName.style.fontSize = n / 6.5 * l + "px", spinItemName.children[0].style.fontSize = n / 12 * l + "px", spinItemName.style.padding = n / 20 * l + "px", spinItemName.style.paddingLeft = n / 2 * l + "px", spinItemName.style.paddingRight = n / 2 * l + "px", It.position.x != At && (It.position.x -= .2 * (It.position.x - At), Math.abs(At - It.position.x) <= .05 && (It.position.x = At), It.lookAt(pt.position)), Pt += .0018 * t, dt.position.y += .012 * Math.sin(Pt), dt.rotation.x -= 7e-4 * Math.sin(.85 * Pt), Ot.render(pt, It)
                    }
                }
            }(R), _.update(R * g.config.deltaMlt), v && v.active && !window.locked && (_.skipScroll = !1, b = [_.getISN(), R * g.config.deltaMlt, _.xDr, _.yDr, i.movDirs.indexOf(_.moveDir), _.mouseDownL, _.mouseDownR || _.keys[_.aimKey] ? 1 : 0, _.keys[_.jumpKey] ? 1 : 0, _.keys[_.crouchKey] ? 1 : 0, _.keys[_.reloadKey] ? 1 : 0, _.scrollDelta], _.scrollDelta && (_.skipScroll = !0), _.scrollDelta = 0, _.tmpInputs.push(b), function(t) {
                if (Ht && v && v.active) {
                    var e = {
                        time: L,
                        players: []
                    };
                    e.input = {
                        data: t,
                        classIndex: v.classIndex,
                        swapTime: v.swapTime,
                        reloadTimer: v.reloadTimer,
                        weaponIndex: v.weaponIndex,
                        reloads: v.reloads,
                        ammos: v.ammos,
                        recoilAnim: v.recoilAnim,
                        recoilAnimY: v.recoilAnimY,
                        recoilForce: v.recoilForce,
                        crouchVal: v.crouchVal,
                        didJump: v.didJump,
                        onGround: v.onGround,
                        onLadder: v.onLadder,
                        rampFix: v.rampFix,
                        aimVal: v.aimVal,
                        x: v.x,
                        y: v.y,
                        z: v.z,
                        xVel: v.xVel,
                        yVel: v.yVel,
                        zVel: v.zVel
                    };
                    for (var n = 0; n < g.players.list.length; ++n)(x = g.players.list[n]) != v && x.active && e.players.push([x.sid, x.classIndex, x.weaponIndex, x.xDr, x.yDr, x.crouchVal, x.x, x.y, x.z]);
                    for (zt.states.push(e), n = zt.states.length - 1; n >= 0; --n) L - zt.states[n].time > Ft && zt.states.splice(n, 1)
                }
            }(b), v.processInput(b, g), _.moveCam(v.x, v.y + v.height - i.cameraHeight, v.z), _.rotateCam(u.shakeX, u.shakeY + v.recoilAnimY * i.recoilMlt + .1 * v.landAnim, 0), d.updateCrosshair(Math.max(.05 * window.innerHeight, v.spread * k), v.aimVal * (v.reloadTimer > 0 ? 0 : 1)), g.singlePlayer || function(t) {
                for (var e = I.length ? 1 : 0; e < t.length;)
                    if (2 == e && M && M[2] == t[2] && M[3] == t[3]) I.push("f"), e += 2;
                    else {
                        if (5 == e && M && M[5] == t[5] && M[6] == t[6] && M[7] == t[7] && M[8] == t[8] && M[9] == t[9] && M[10] == t[10]) {
                            I.push("f");
                            break
                        }
                        I.push(t[e]), e++
                    } M = t
            }(b), Howler.pos(v.x, v.y + v.height - i.cameraHeight, v.z), Howler.orientation(Math.sin(_.xDr + Math.PI), _.yDr, Math.cos(_.xDr + Math.PI)), g.singlePlayer && v.y <= i.deathY && ue(v.sid)), g.update(R, L, v),
            function(t) {
                var e = "";
                if (v && v.active)
                    for (var n = 0; n < Ee.length; ++n) Ee[n].life && (Ee[n].life -= t, Ee[n].life <= 0 && (Ee[n].life = 0), e += "<div class='hitInd' style='transform: translate(0, -50%) rotate(" + (_.xDr + h.getDirection(Ee[n].x, Ee[n].z, v.x, v.z)) + "rad);opacity:" + Ee[n].life / i.hitLife + "'></div>");
                hitHolder.innerHTML = e
            }(R), f.update(R), "block" == menuHolder.style.display && i.isProd && !A && (window.idleTimer += R, 0 >= i.kickTimer && Oe("Kicked for inactivity")), requestAnimFrame(Le)
    }

    function Re() {
        !g.singlePlayer && v && v.active && (m.send("i", I), I.length = 0)
    }

    function Pe(t) {
        instructionHolder.style.display = "block", instructions.innerHTML = "<span style='color: rgba(255, 255, 255, 0.6)'>" + t + "</span><br/><span style='color: rgba(255, 255, 255, 0.6)'>Try seeking a new server by clicking <a href='javascript:;' onclick='showWindow(2);'>here</a>.</span>", instructionHolder.style.pointerEvents = "all"
    }
    window.pressButton = function(t) {
        t == _.chatKey && (document.activeElement != chatInput ? chatInput.focus() : ("" != chatInput.value && (m.send("c", chatInput.value), chatInput.value = ""), chatInput.blur())), v && v.active && (t == _.recordKey && function() {
            if (Ht && v && v.active && zt.states.length) {
                for (var t = Object.assign({}, g.map.maps[g.mapIndex]), e = 0; e < t.objects.length; ++e) t.objects[e].id = i.prefabIDS.indexOf(t.objects[e].id), t.objects[e].t = i.textureIDS.indexOf(t.objects[e].t);
                var n = {
                    id: "clip_" + Date.now(),
                    mode: g.modeIndex,
                    map: t,
                    states: []
                };
                for (e = 0; e < zt.states.length; ++e)
                    if (e) {
                        var r = [];
                        r.push(zt.states[e].input.data), zt.states[e].players.length && r.push(zt.states[e].players), n.states.push(r)
                    } else n.states.push(zt.states[e]);
                var a = document.createElement("a");
                a.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(JSON.stringify(n))), a.setAttribute("download", n.id), a.style.display = "none", document.body.appendChild(a), a.click(), document.body.removeChild(a)
            }
        }(), t == _.sprayKey && m.send("s"))
    };
    var Ce = void 0;

    function Ie(t) {
        Ce = t, m.connected = !1, showWindow(0), _.disable(), d.hideUI(), d.hideDiscon(), Pe(t), m.socket.onclose = function() {}, Oe = function() {}
    }

    function Oe(t, e) {
        Ce || g.singlePlayer || (m.socket.onclose = function() {}, m && m.socket && m.socket.close(), e || (showWindow(0), _.disable(), d.hideUI(), d.hideDiscon(), Pe(t || "DISCONNECTED")))
    }

    function De(t) {
        g.singlePlayer = !0, m && m.socket && m.socket.close(), m.send = function() {};
        try {
            Zt(0, null, null, {
                maps: [0]
            }, 0, {
                data: t
            }, !0)
        } catch (t) {}
        a("custMap"), K(), window.history.replaceState({}, "Krunker Offline", "offline")
    }

    function Be(t) {
        t ? (grecaptcha.render("captchaBtn", {
            sitekey: "6LchqW0UAAAAANOoHruD0Ql5aNJIZld4EwLiaf-W",
            callback: function(t) {
                m.send("load", t)
            }
        }), grecaptcha.execute()) : m.send("load")
    }

    function Ne() {
        ! function() {
            loginToken = getSavedVal("krunker_token");
            var t = getSavedVal("krunker_username");
            loginToken && t && nt(1, [t, null, loginToken])
        }()
    }
    window.captchaCallback = function() {
        ! function() {
            var t = getSavedVal("custMap");
            a("custMap"), t ? De(t) : o.start(function(t, e, n) {
                var i = "//" + t + ":8008/?gameIndex=" + n;
                m.connect(i, function(t) {
                    if (t) {
                        if (void 0 != Ce) return;
                        Oe()
                    } else {
                        K();
                        var e = getSavedVal("mapToLoad");
                        a("mapToLoad"), e && selectHostMap(e)
                    }
                }, {
                    init: Zt,
                    load: Be,
                    ready: Ne,
                    start: qt,
                    cust: s,
                    pur: j,
                    uf: G,
                    gmsg: oe,
                    newG: c,
                    pc: De,
                    cln: Nt,
                    upMp: Gt,
                    mpsL: kt,
                    lock: Kt,
                    srchM: Ut,
                    spin: Bt,
                    unb: Dt,
                    end: Jt,
                    error: Ie,
                    dc: Oe,
                    t: ne,
                    0: ie,
                    1: le,
                    8: re,
                    2: he,
                    3: ue,
                    ac: pe,
                    4: Te,
                    5: ye,
                    6: we,
                    7: de,
                    9: fe,
                    10: be,
                    h: Se,
                    s: $t,
                    sp: ee,
                    ch: Ae,
                    vc: voiceChat,
                    a: it,
                    ua: tt,
                    ex: ve,
                    pr: me,
                    tm: ce,
                    pre: ge
                })
            }, function(t) {
                Ie(t)
            }), window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(t) {
                window.setTimeout(t, 1e3 / 60)
            }, setInterval(Re, i.clientSendRate), setInterval(ae, i.nameVisRate), P = Date.now(), Le()
        }()
    }
}]);
